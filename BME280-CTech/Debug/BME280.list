
BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003934  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a68  08003a68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a70  08003a70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003a84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003a84  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006858  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a3  00000000  00000000  0002688d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00028310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001607b  00000000  00000000  00028970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad8  00000000  00000000  0003e9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e59e  00000000  00000000  000474c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cdc  00000000  00000000  000c5ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a28 	.word	0x08003a28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a28 	.word	0x08003a28

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_ldivmod>:
 8000988:	b97b      	cbnz	r3, 80009aa <__aeabi_ldivmod+0x22>
 800098a:	b972      	cbnz	r2, 80009aa <__aeabi_ldivmod+0x22>
 800098c:	2900      	cmp	r1, #0
 800098e:	bfbe      	ittt	lt
 8000990:	2000      	movlt	r0, #0
 8000992:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000996:	e006      	blt.n	80009a6 <__aeabi_ldivmod+0x1e>
 8000998:	bf08      	it	eq
 800099a:	2800      	cmpeq	r0, #0
 800099c:	bf1c      	itt	ne
 800099e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80009a2:	f04f 30ff 	movne.w	r0, #4294967295
 80009a6:	f000 b9a9 	b.w	8000cfc <__aeabi_idiv0>
 80009aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80009ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b2:	2900      	cmp	r1, #0
 80009b4:	db09      	blt.n	80009ca <__aeabi_ldivmod+0x42>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db1a      	blt.n	80009f0 <__aeabi_ldivmod+0x68>
 80009ba:	f000 f835 	bl	8000a28 <__udivmoddi4>
 80009be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c6:	b004      	add	sp, #16
 80009c8:	4770      	bx	lr
 80009ca:	4240      	negs	r0, r0
 80009cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db1b      	blt.n	8000a0c <__aeabi_ldivmod+0x84>
 80009d4:	f000 f828 	bl	8000a28 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4240      	negs	r0, r0
 80009e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e8:	4252      	negs	r2, r2
 80009ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ee:	4770      	bx	lr
 80009f0:	4252      	negs	r2, r2
 80009f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009f6:	f000 f817 	bl	8000a28 <__udivmoddi4>
 80009fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a02:	b004      	add	sp, #16
 8000a04:	4240      	negs	r0, r0
 8000a06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a0a:	4770      	bx	lr
 8000a0c:	4252      	negs	r2, r2
 8000a0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a12:	f000 f809 	bl	8000a28 <__udivmoddi4>
 8000a16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1e:	b004      	add	sp, #16
 8000a20:	4252      	negs	r2, r2
 8000a22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a26:	4770      	bx	lr

08000a28 <__udivmoddi4>:
 8000a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a2c:	9e08      	ldr	r6, [sp, #32]
 8000a2e:	460d      	mov	r5, r1
 8000a30:	4604      	mov	r4, r0
 8000a32:	4688      	mov	r8, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d14d      	bne.n	8000ad4 <__udivmoddi4+0xac>
 8000a38:	428a      	cmp	r2, r1
 8000a3a:	4694      	mov	ip, r2
 8000a3c:	d968      	bls.n	8000b10 <__udivmoddi4+0xe8>
 8000a3e:	fab2 f282 	clz	r2, r2
 8000a42:	b152      	cbz	r2, 8000a5a <__udivmoddi4+0x32>
 8000a44:	fa01 f302 	lsl.w	r3, r1, r2
 8000a48:	f1c2 0120 	rsb	r1, r2, #32
 8000a4c:	fa20 f101 	lsr.w	r1, r0, r1
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	ea41 0803 	orr.w	r8, r1, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000a5e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000a62:	fa1f fe8c 	uxth.w	lr, ip
 8000a66:	fb01 8817 	mls	r8, r1, r7, r8
 8000a6a:	fb07 f00e 	mul.w	r0, r7, lr
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a74:	4298      	cmp	r0, r3
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x66>
 8000a78:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000a80:	f080 811e 	bcs.w	8000cc0 <__udivmoddi4+0x298>
 8000a84:	4298      	cmp	r0, r3
 8000a86:	f240 811b 	bls.w	8000cc0 <__udivmoddi4+0x298>
 8000a8a:	3f02      	subs	r7, #2
 8000a8c:	4463      	add	r3, ip
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	fbb3 f0f1 	udiv	r0, r3, r1
 8000a94:	fb01 3310 	mls	r3, r1, r0, r3
 8000a98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a9c:	b2a4      	uxth	r4, r4
 8000a9e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	d90a      	bls.n	8000abc <__udivmoddi4+0x94>
 8000aa6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aaa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aae:	f080 8109 	bcs.w	8000cc4 <__udivmoddi4+0x29c>
 8000ab2:	45a6      	cmp	lr, r4
 8000ab4:	f240 8106 	bls.w	8000cc4 <__udivmoddi4+0x29c>
 8000ab8:	4464      	add	r4, ip
 8000aba:	3802      	subs	r0, #2
 8000abc:	2100      	movs	r1, #0
 8000abe:	eba4 040e 	sub.w	r4, r4, lr
 8000ac2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac6:	b11e      	cbz	r6, 8000ad0 <__udivmoddi4+0xa8>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	40d4      	lsrs	r4, r2
 8000acc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0xc2>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	f000 80ee 	beq.w	8000cba <__udivmoddi4+0x292>
 8000ade:	2100      	movs	r1, #0
 8000ae0:	e9c6 0500 	strd	r0, r5, [r6]
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d14a      	bne.n	8000b88 <__udivmoddi4+0x160>
 8000af2:	42ab      	cmp	r3, r5
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xd4>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 80fc 	bhi.w	8000cf4 <__udivmoddi4+0x2cc>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb65 0303 	sbc.w	r3, r5, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4698      	mov	r8, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d0e2      	beq.n	8000ad0 <__udivmoddi4+0xa8>
 8000b0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b0e:	e7df      	b.n	8000ad0 <__udivmoddi4+0xa8>
 8000b10:	b902      	cbnz	r2, 8000b14 <__udivmoddi4+0xec>
 8000b12:	deff      	udf	#255	; 0xff
 8000b14:	fab2 f282 	clz	r2, r2
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	f040 8091 	bne.w	8000c40 <__udivmoddi4+0x218>
 8000b1e:	eba1 000c 	sub.w	r0, r1, ip
 8000b22:	2101      	movs	r1, #1
 8000b24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b28:	fa1f fe8c 	uxth.w	lr, ip
 8000b2c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000b30:	fb07 0013 	mls	r0, r7, r3, r0
 8000b34:	0c25      	lsrs	r5, r4, #16
 8000b36:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000b3a:	fb0e f003 	mul.w	r0, lr, r3
 8000b3e:	42a8      	cmp	r0, r5
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x12c>
 8000b42:	eb1c 0505 	adds.w	r5, ip, r5
 8000b46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x12a>
 8000b4c:	42a8      	cmp	r0, r5
 8000b4e:	f200 80ce 	bhi.w	8000cee <__udivmoddi4+0x2c6>
 8000b52:	4643      	mov	r3, r8
 8000b54:	1a2d      	subs	r5, r5, r0
 8000b56:	fbb5 f0f7 	udiv	r0, r5, r7
 8000b5a:	fb07 5510 	mls	r5, r7, r0, r5
 8000b5e:	fb0e fe00 	mul.w	lr, lr, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x156>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b74:	d202      	bcs.n	8000b7c <__udivmoddi4+0x154>
 8000b76:	45a6      	cmp	lr, r4
 8000b78:	f200 80b6 	bhi.w	8000ce8 <__udivmoddi4+0x2c0>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b86:	e79e      	b.n	8000ac6 <__udivmoddi4+0x9e>
 8000b88:	f1c1 0720 	rsb	r7, r1, #32
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b96:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9e:	fbba f8f9 	udiv	r8, sl, r9
 8000ba2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000baa:	408d      	lsls	r5, r1
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	431d      	orrs	r5, r3
 8000bb2:	fa00 f301 	lsl.w	r3, r0, r1
 8000bb6:	fb08 f00e 	mul.w	r0, r8, lr
 8000bba:	0c2c      	lsrs	r4, r5, #16
 8000bbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000bc0:	42a0      	cmp	r0, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	d90b      	bls.n	8000be0 <__udivmoddi4+0x1b8>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd0:	f080 8088 	bcs.w	8000ce4 <__udivmoddi4+0x2bc>
 8000bd4:	42a0      	cmp	r0, r4
 8000bd6:	f240 8085 	bls.w	8000ce4 <__udivmoddi4+0x2bc>
 8000bda:	f1a8 0802 	sub.w	r8, r8, #2
 8000bde:	4464      	add	r4, ip
 8000be0:	1a24      	subs	r4, r4, r0
 8000be2:	fbb4 f0f9 	udiv	r0, r4, r9
 8000be6:	fb09 4410 	mls	r4, r9, r0, r4
 8000bea:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bee:	b2ad      	uxth	r5, r5
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1e2>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c00:	d26c      	bcs.n	8000cdc <__udivmoddi4+0x2b4>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	d96a      	bls.n	8000cdc <__udivmoddi4+0x2b4>
 8000c06:	3802      	subs	r0, #2
 8000c08:	4464      	add	r4, ip
 8000c0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c0e:	fba0 9502 	umull	r9, r5, r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	46c8      	mov	r8, r9
 8000c1a:	46ae      	mov	lr, r5
 8000c1c:	d356      	bcc.n	8000ccc <__udivmoddi4+0x2a4>
 8000c1e:	d053      	beq.n	8000cc8 <__udivmoddi4+0x2a0>
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d069      	beq.n	8000cf8 <__udivmoddi4+0x2d0>
 8000c24:	ebb3 0208 	subs.w	r2, r3, r8
 8000c28:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2c:	fa22 f301 	lsr.w	r3, r2, r1
 8000c30:	fa04 f707 	lsl.w	r7, r4, r7
 8000c34:	431f      	orrs	r7, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e747      	b.n	8000ad0 <__udivmoddi4+0xa8>
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	f1c2 0120 	rsb	r1, r2, #32
 8000c48:	fa25 f301 	lsr.w	r3, r5, r1
 8000c4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c50:	fa20 f101 	lsr.w	r1, r0, r1
 8000c54:	4095      	lsls	r5, r2
 8000c56:	430d      	orrs	r5, r1
 8000c58:	fbb3 f1f7 	udiv	r1, r3, r7
 8000c5c:	fb07 3311 	mls	r3, r7, r1, r3
 8000c60:	fa1f fe8c 	uxth.w	lr, ip
 8000c64:	0c28      	lsrs	r0, r5, #16
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	fb01 f30e 	mul.w	r3, r1, lr
 8000c6e:	4283      	cmp	r3, r0
 8000c70:	fa04 f402 	lsl.w	r4, r4, r2
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x260>
 8000c76:	eb1c 0000 	adds.w	r0, ip, r0
 8000c7a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c7e:	d22f      	bcs.n	8000ce0 <__udivmoddi4+0x2b8>
 8000c80:	4283      	cmp	r3, r0
 8000c82:	d92d      	bls.n	8000ce0 <__udivmoddi4+0x2b8>
 8000c84:	3902      	subs	r1, #2
 8000c86:	4460      	add	r0, ip
 8000c88:	1ac0      	subs	r0, r0, r3
 8000c8a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c8e:	fb07 0013 	mls	r0, r7, r3, r0
 8000c92:	b2ad      	uxth	r5, r5
 8000c94:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c98:	fb03 f00e 	mul.w	r0, r3, lr
 8000c9c:	42a8      	cmp	r0, r5
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x28a>
 8000ca0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ca4:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca8:	d216      	bcs.n	8000cd8 <__udivmoddi4+0x2b0>
 8000caa:	42a8      	cmp	r0, r5
 8000cac:	d914      	bls.n	8000cd8 <__udivmoddi4+0x2b0>
 8000cae:	3b02      	subs	r3, #2
 8000cb0:	4465      	add	r5, ip
 8000cb2:	1a28      	subs	r0, r5, r0
 8000cb4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cb8:	e738      	b.n	8000b2c <__udivmoddi4+0x104>
 8000cba:	4631      	mov	r1, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e707      	b.n	8000ad0 <__udivmoddi4+0xa8>
 8000cc0:	462f      	mov	r7, r5
 8000cc2:	e6e4      	b.n	8000a8e <__udivmoddi4+0x66>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6f9      	b.n	8000abc <__udivmoddi4+0x94>
 8000cc8:	454b      	cmp	r3, r9
 8000cca:	d2a9      	bcs.n	8000c20 <__udivmoddi4+0x1f8>
 8000ccc:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	e7a3      	b.n	8000c20 <__udivmoddi4+0x1f8>
 8000cd8:	4643      	mov	r3, r8
 8000cda:	e7ea      	b.n	8000cb2 <__udivmoddi4+0x28a>
 8000cdc:	4628      	mov	r0, r5
 8000cde:	e794      	b.n	8000c0a <__udivmoddi4+0x1e2>
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	e7d1      	b.n	8000c88 <__udivmoddi4+0x260>
 8000ce4:	46d0      	mov	r8, sl
 8000ce6:	e77b      	b.n	8000be0 <__udivmoddi4+0x1b8>
 8000ce8:	4464      	add	r4, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	e747      	b.n	8000b7e <__udivmoddi4+0x156>
 8000cee:	3b02      	subs	r3, #2
 8000cf0:	4465      	add	r5, ip
 8000cf2:	e72f      	b.n	8000b54 <__udivmoddi4+0x12c>
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e706      	b.n	8000b06 <__udivmoddi4+0xde>
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e6e9      	b.n	8000ad0 <__udivmoddi4+0xa8>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2319      	movs	r3, #25
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	463b      	mov	r3, r7
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	2288      	movs	r2, #136	; 0x88
 8000d18:	21ec      	movs	r1, #236	; 0xec
 8000d1a:	4857      	ldr	r0, [pc, #348]	; (8000e78 <TrimRead+0x178>)
 8000d1c:	f001 fc90 	bl	8002640 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000d20:	463b      	mov	r3, r7
 8000d22:	3319      	adds	r3, #25
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	9202      	str	r2, [sp, #8]
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	9201      	str	r2, [sp, #4]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	22e1      	movs	r2, #225	; 0xe1
 8000d34:	21ec      	movs	r1, #236	; 0xec
 8000d36:	4850      	ldr	r0, [pc, #320]	; (8000e78 <TrimRead+0x178>)
 8000d38:	f001 fc82 	bl	8002640 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000d3c:	787b      	ldrb	r3, [r7, #1]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	783b      	ldrb	r3, [r7, #0]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <TrimRead+0x17c>)
 8000d4e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	78bb      	ldrb	r3, [r7, #2]
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <TrimRead+0x180>)
 8000d60:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000d62:	797b      	ldrb	r3, [r7, #5]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	793b      	ldrb	r3, [r7, #4]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <TrimRead+0x184>)
 8000d72:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	797b      	ldrb	r3, [r7, #5]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <TrimRead+0x188>)
 8000d86:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000d88:	7a7b      	ldrb	r3, [r7, #9]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <TrimRead+0x18c>)
 8000d98:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	7abb      	ldrb	r3, [r7, #10]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <TrimRead+0x190>)
 8000daa:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <TrimRead+0x194>)
 8000dbc:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <TrimRead+0x198>)
 8000dce:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000dd0:	7c7b      	ldrb	r3, [r7, #17]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	7c3b      	ldrb	r3, [r7, #16]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <TrimRead+0x19c>)
 8000de0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000de2:	7cfb      	ldrb	r3, [r7, #19]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	7cbb      	ldrb	r3, [r7, #18]
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <TrimRead+0x1a0>)
 8000df2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000df4:	7d7b      	ldrb	r3, [r7, #21]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	7d3b      	ldrb	r3, [r7, #20]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <TrimRead+0x1a4>)
 8000e04:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	7dbb      	ldrb	r3, [r7, #22]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <TrimRead+0x1a8>)
 8000e16:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000e18:	7e3b      	ldrb	r3, [r7, #24]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <TrimRead+0x1ac>)
 8000e1e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000e20:	7ebb      	ldrb	r3, [r7, #26]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	7e7b      	ldrb	r3, [r7, #25]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <TrimRead+0x1b0>)
 8000e30:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000e32:	7efb      	ldrb	r3, [r7, #27]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <TrimRead+0x1b4>)
 8000e38:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000e3a:	7f3b      	ldrb	r3, [r7, #28]
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	7f7b      	ldrb	r3, [r7, #29]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <TrimRead+0x1b8>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000e52:	7fbb      	ldrb	r3, [r7, #30]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	7f7b      	ldrb	r3, [r7, #29]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <TrimRead+0x1bc>)
 8000e66:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000e68:	7ffb      	ldrb	r3, [r7, #31]
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <TrimRead+0x1c0>)
 8000e6e:	801a      	strh	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000060 	.word	0x20000060
 8000e7c:	20000038 	.word	0x20000038
 8000e80:	20000040 	.word	0x20000040
 8000e84:	20000042 	.word	0x20000042
 8000e88:	2000003a 	.word	0x2000003a
 8000e8c:	20000044 	.word	0x20000044
 8000e90:	20000046 	.word	0x20000046
 8000e94:	20000048 	.word	0x20000048
 8000e98:	2000004a 	.word	0x2000004a
 8000e9c:	2000004c 	.word	0x2000004c
 8000ea0:	2000004e 	.word	0x2000004e
 8000ea4:	20000050 	.word	0x20000050
 8000ea8:	20000052 	.word	0x20000052
 8000eac:	2000003c 	.word	0x2000003c
 8000eb0:	20000054 	.word	0x20000054
 8000eb4:	2000003e 	.word	0x2000003e
 8000eb8:	20000056 	.word	0x20000056
 8000ebc:	20000058 	.word	0x20000058
 8000ec0:	2000005a 	.word	0x2000005a

08000ec4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af04      	add	r7, sp, #16
 8000eca:	4604      	mov	r4, r0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	460b      	mov	r3, r1
 8000edc:	717b      	strb	r3, [r7, #5]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000ee2:	f7ff ff0d 	bl	8000d00 <TrimRead>


	uint8_t datatowrite = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000eee:	23b6      	movs	r3, #182	; 0xb6
 8000ef0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f107 030f 	add.w	r3, r7, #15
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	22e0      	movs	r2, #224	; 0xe0
 8000f06:	21ec      	movs	r1, #236	; 0xec
 8000f08:	4858      	ldr	r0, [pc, #352]	; (800106c <BME280_Config+0x1a8>)
 8000f0a:	f001 fa9f 	bl	800244c <HAL_I2C_Mem_Write>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <BME280_Config+0x56>
	{
		return -1;
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	e0a3      	b.n	8001062 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f000 fec6 	bl	8001cac <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	f107 030f 	add.w	r3, r7, #15
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	22f2      	movs	r2, #242	; 0xf2
 8000f38:	21ec      	movs	r1, #236	; 0xec
 8000f3a:	484c      	ldr	r0, [pc, #304]	; (800106c <BME280_Config+0x1a8>)
 8000f3c:	f001 fa86 	bl	800244c <HAL_I2C_Mem_Write>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <BME280_Config+0x88>
	{
		return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e08a      	b.n	8001062 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8000f4c:	2064      	movs	r0, #100	; 0x64
 8000f4e:	f000 fead 	bl	8001cac <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	f107 030e 	add.w	r3, r7, #14
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	22f2      	movs	r2, #242	; 0xf2
 8000f66:	21ec      	movs	r1, #236	; 0xec
 8000f68:	4840      	ldr	r0, [pc, #256]	; (800106c <BME280_Config+0x1a8>)
 8000f6a:	f001 fb69 	bl	8002640 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000f6e:	7bba      	ldrb	r2, [r7, #14]
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d002      	beq.n	8000f7c <BME280_Config+0xb8>
	{
		return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e072      	b.n	8001062 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8000f7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f80:	015b      	lsls	r3, r3, #5
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 030f 	add.w	r3, r7, #15
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	22f5      	movs	r2, #245	; 0xf5
 8000fa8:	21ec      	movs	r1, #236	; 0xec
 8000faa:	4830      	ldr	r0, [pc, #192]	; (800106c <BME280_Config+0x1a8>)
 8000fac:	f001 fa4e 	bl	800244c <HAL_I2C_Mem_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <BME280_Config+0xf8>
	{
		return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e052      	b.n	8001062 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8000fbc:	2064      	movs	r0, #100	; 0x64
 8000fbe:	f000 fe75 	bl	8001cac <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	f107 030e 	add.w	r3, r7, #14
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	22f5      	movs	r2, #245	; 0xf5
 8000fd6:	21ec      	movs	r1, #236	; 0xec
 8000fd8:	4824      	ldr	r0, [pc, #144]	; (800106c <BME280_Config+0x1a8>)
 8000fda:	f001 fb31 	bl	8002640 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000fde:	7bba      	ldrb	r2, [r7, #14]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d002      	beq.n	8000fec <BME280_Config+0x128>
	{
		return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e03a      	b.n	8001062 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	015b      	lsls	r3, r3, #5
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25a      	sxtb	r2, r3
 8000ffc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	b25b      	sxtb	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 030f 	add.w	r3, r7, #15
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	22f4      	movs	r2, #244	; 0xf4
 800101c:	21ec      	movs	r1, #236	; 0xec
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <BME280_Config+0x1a8>)
 8001020:	f001 fa14 	bl	800244c <HAL_I2C_Mem_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <BME280_Config+0x16c>
	{
		return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e018      	b.n	8001062 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001030:	2064      	movs	r0, #100	; 0x64
 8001032:	f000 fe3b 	bl	8001cac <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030e 	add.w	r3, r7, #14
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	22f4      	movs	r2, #244	; 0xf4
 800104a:	21ec      	movs	r1, #236	; 0xec
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <BME280_Config+0x1a8>)
 800104e:	f001 faf7 	bl	8002640 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001052:	7bba      	ldrb	r2, [r7, #14]
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	429a      	cmp	r2, r3
 8001058:	d002      	beq.n	8001060 <BME280_Config+0x19c>
	{
		return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e000      	b.n	8001062 <BME280_Config+0x19e>
	}

	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	20000060 	.word	0x20000060

08001070 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <BMEReadRaw+0x8c>)
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	22d0      	movs	r2, #208	; 0xd0
 8001088:	21ec      	movs	r1, #236	; 0xec
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <BMEReadRaw+0x90>)
 800108c:	f001 fad8 	bl	8002640 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <BMEReadRaw+0x8c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b60      	cmp	r3, #96	; 0x60
 8001096:	d12a      	bne.n	80010ee <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	2308      	movs	r3, #8
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	463b      	mov	r3, r7
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	22f7      	movs	r2, #247	; 0xf7
 80010aa:	21ec      	movs	r1, #236	; 0xec
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <BMEReadRaw+0x90>)
 80010ae:	f001 fac7 	bl	8002640 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80010b2:	783b      	ldrb	r3, [r7, #0]
 80010b4:	031a      	lsls	r2, r3, #12
 80010b6:	787b      	ldrb	r3, [r7, #1]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4313      	orrs	r3, r2
 80010bc:	78ba      	ldrb	r2, [r7, #2]
 80010be:	0912      	lsrs	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	4313      	orrs	r3, r2
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <BMEReadRaw+0x94>)
 80010c6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	031a      	lsls	r2, r3, #12
 80010cc:	793b      	ldrb	r3, [r7, #4]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4313      	orrs	r3, r2
 80010d2:	797a      	ldrb	r2, [r7, #5]
 80010d4:	0912      	lsrs	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	4313      	orrs	r3, r2
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <BMEReadRaw+0x98>)
 80010dc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <BMEReadRaw+0x9c>)
 80010e8:	6013      	str	r3, [r2, #0]

		return 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e001      	b.n	80010f2 <BMEReadRaw+0x82>
	}

	else return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000028 	.word	0x20000028
 8001100:	20000060 	.word	0x20000060
 8001104:	20000030 	.word	0x20000030
 8001108:	2000002c 	.word	0x2000002c
 800110c:	20000034 	.word	0x20000034

08001110 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	10da      	asrs	r2, r3, #3
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <BME280_compensate_T_int32+0x70>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <BME280_compensate_T_int32+0x74>)
 8001126:	f9b2 2000 	ldrsh.w	r2, [r2]
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	12db      	asrs	r3, r3, #11
 8001130:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	111b      	asrs	r3, r3, #4
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <BME280_compensate_T_int32+0x70>)
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	1112      	asrs	r2, r2, #4
 8001140:	490f      	ldr	r1, [pc, #60]	; (8001180 <BME280_compensate_T_int32+0x70>)
 8001142:	8809      	ldrh	r1, [r1, #0]
 8001144:	1a52      	subs	r2, r2, r1
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	131b      	asrs	r3, r3, #12
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <BME280_compensate_T_int32+0x78>)
 800114e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	139b      	asrs	r3, r3, #14
 8001158:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4413      	add	r3, r2
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <BME280_compensate_T_int32+0x7c>)
 8001162:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <BME280_compensate_T_int32+0x7c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3380      	adds	r3, #128	; 0x80
 8001170:	121b      	asrs	r3, r3, #8
 8001172:	60fb      	str	r3, [r7, #12]
	return T;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000038 	.word	0x20000038
 8001184:	20000040 	.word	0x20000040
 8001188:	20000042 	.word	0x20000042
 800118c:	2000005c 	.word	0x2000005c

08001190 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001194:	b0ca      	sub	sp, #296	; 0x128
 8001196:	af00      	add	r7, sp, #0
 8001198:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800119c:	4bae      	ldr	r3, [pc, #696]	; (8001458 <BME280_compensate_P_int64+0x2c8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	17da      	asrs	r2, r3, #31
 80011a2:	461c      	mov	r4, r3
 80011a4:	4615      	mov	r5, r2
 80011a6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80011aa:	f145 3bff 	adc.w	fp, r5, #4294967295
 80011ae:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80011b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80011b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011ba:	fb03 f102 	mul.w	r1, r3, r2
 80011be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80011c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	18ca      	adds	r2, r1, r3
 80011cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011d0:	fba3 8903 	umull	r8, r9, r3, r3
 80011d4:	eb02 0309 	add.w	r3, r2, r9
 80011d8:	4699      	mov	r9, r3
 80011da:	4ba0      	ldr	r3, [pc, #640]	; (800145c <BME280_compensate_P_int64+0x2cc>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	17da      	asrs	r2, r3, #31
 80011e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80011ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80011f0:	4603      	mov	r3, r0
 80011f2:	fb03 f209 	mul.w	r2, r3, r9
 80011f6:	460b      	mov	r3, r1
 80011f8:	fb08 f303 	mul.w	r3, r8, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	4602      	mov	r2, r0
 8001200:	fba8 2102 	umull	r2, r1, r8, r2
 8001204:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001208:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800120c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001210:	4413      	add	r3, r2
 8001212:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001216:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800121a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800121e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001222:	4b8f      	ldr	r3, [pc, #572]	; (8001460 <BME280_compensate_P_int64+0x2d0>)
 8001224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001228:	b21b      	sxth	r3, r3
 800122a:	17da      	asrs	r2, r3, #31
 800122c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001230:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001234:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001238:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800123c:	462a      	mov	r2, r5
 800123e:	fb02 f203 	mul.w	r2, r2, r3
 8001242:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001246:	4621      	mov	r1, r4
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	441a      	add	r2, r3
 800124e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001252:	4621      	mov	r1, r4
 8001254:	fba3 3101 	umull	r3, r1, r3, r1
 8001258:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800125c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001276:	462b      	mov	r3, r5
 8001278:	0459      	lsls	r1, r3, #17
 800127a:	4622      	mov	r2, r4
 800127c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001280:	4623      	mov	r3, r4
 8001282:	0458      	lsls	r0, r3, #17
 8001284:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001288:	1814      	adds	r4, r2, r0
 800128a:	643c      	str	r4, [r7, #64]	; 0x40
 800128c:	414b      	adcs	r3, r1
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
 8001290:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001294:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001298:	4b72      	ldr	r3, [pc, #456]	; (8001464 <BME280_compensate_P_int64+0x2d4>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	17da      	asrs	r2, r3, #31
 80012a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012b6:	00d9      	lsls	r1, r3, #3
 80012b8:	2000      	movs	r0, #0
 80012ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80012be:	1814      	adds	r4, r2, r0
 80012c0:	63bc      	str	r4, [r7, #56]	; 0x38
 80012c2:	414b      	adcs	r3, r1
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80012ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80012ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012d6:	fb03 f102 	mul.w	r1, r3, r2
 80012da:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	18ca      	adds	r2, r1, r3
 80012e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012ec:	fba3 3103 	umull	r3, r1, r3, r3
 80012f0:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80012f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <BME280_compensate_P_int64+0x2d8>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	b21b      	sxth	r3, r3
 800130a:	17da      	asrs	r2, r3, #31
 800130c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001310:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001314:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001318:	4622      	mov	r2, r4
 800131a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800131e:	4641      	mov	r1, r8
 8001320:	fb01 f202 	mul.w	r2, r1, r2
 8001324:	464d      	mov	r5, r9
 8001326:	4618      	mov	r0, r3
 8001328:	4621      	mov	r1, r4
 800132a:	4603      	mov	r3, r0
 800132c:	fb03 f305 	mul.w	r3, r3, r5
 8001330:	4413      	add	r3, r2
 8001332:	4602      	mov	r2, r0
 8001334:	4641      	mov	r1, r8
 8001336:	fba2 2101 	umull	r2, r1, r2, r1
 800133a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800133e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001342:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001346:	4413      	add	r3, r2
 8001348:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800134c:	f04f 0000 	mov.w	r0, #0
 8001350:	f04f 0100 	mov.w	r1, #0
 8001354:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001358:	4623      	mov	r3, r4
 800135a:	0a18      	lsrs	r0, r3, #8
 800135c:	462a      	mov	r2, r5
 800135e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001362:	462b      	mov	r3, r5
 8001364:	1219      	asrs	r1, r3, #8
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <BME280_compensate_P_int64+0x2dc>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	b21b      	sxth	r3, r3
 800136e:	17da      	asrs	r2, r3, #31
 8001370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001374:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001378:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800137c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001380:	464a      	mov	r2, r9
 8001382:	fb02 f203 	mul.w	r2, r2, r3
 8001386:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800138a:	4644      	mov	r4, r8
 800138c:	fb04 f303 	mul.w	r3, r4, r3
 8001390:	441a      	add	r2, r3
 8001392:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001396:	4644      	mov	r4, r8
 8001398:	fba3 3404 	umull	r3, r4, r3, r4
 800139c:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80013a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80013a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80013ba:	464c      	mov	r4, r9
 80013bc:	0323      	lsls	r3, r4, #12
 80013be:	46c4      	mov	ip, r8
 80013c0:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80013c4:	4644      	mov	r4, r8
 80013c6:	0322      	lsls	r2, r4, #12
 80013c8:	1884      	adds	r4, r0, r2
 80013ca:	633c      	str	r4, [r7, #48]	; 0x30
 80013cc:	eb41 0303 	adc.w	r3, r1, r3
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
 80013d2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80013d6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80013da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80013de:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80013e2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80013e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <BME280_compensate_P_int64+0x2e0>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013fa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80013fe:	4622      	mov	r2, r4
 8001400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001404:	4641      	mov	r1, r8
 8001406:	fb01 f202 	mul.w	r2, r1, r2
 800140a:	464d      	mov	r5, r9
 800140c:	4618      	mov	r0, r3
 800140e:	4621      	mov	r1, r4
 8001410:	4603      	mov	r3, r0
 8001412:	fb03 f305 	mul.w	r3, r3, r5
 8001416:	4413      	add	r3, r2
 8001418:	4602      	mov	r2, r0
 800141a:	4641      	mov	r1, r8
 800141c:	fba2 2101 	umull	r2, r1, r2, r1
 8001420:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001424:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001428:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800142c:	4413      	add	r3, r2
 800142e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800143e:	4629      	mov	r1, r5
 8001440:	104a      	asrs	r2, r1, #1
 8001442:	4629      	mov	r1, r5
 8001444:	17cb      	asrs	r3, r1, #31
 8001446:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800144a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800144e:	4313      	orrs	r3, r2
 8001450:	d110      	bne.n	8001474 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001452:	2300      	movs	r3, #0
 8001454:	e152      	b.n	80016fc <BME280_compensate_P_int64+0x56c>
 8001456:	bf00      	nop
 8001458:	2000005c 	.word	0x2000005c
 800145c:	2000004c 	.word	0x2000004c
 8001460:	2000004a 	.word	0x2000004a
 8001464:	20000048 	.word	0x20000048
 8001468:	20000046 	.word	0x20000046
 800146c:	20000044 	.word	0x20000044
 8001470:	2000003a 	.word	0x2000003a
	}
	p = 1048576-adc_P;
 8001474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001478:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001482:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001486:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800148a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800148e:	105b      	asrs	r3, r3, #1
 8001490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001494:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001498:	07db      	lsls	r3, r3, #31
 800149a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800149e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80014a6:	4604      	mov	r4, r0
 80014a8:	1aa4      	subs	r4, r4, r2
 80014aa:	67bc      	str	r4, [r7, #120]	; 0x78
 80014ac:	eb61 0303 	sbc.w	r3, r1, r3
 80014b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014b6:	4622      	mov	r2, r4
 80014b8:	462b      	mov	r3, r5
 80014ba:	1891      	adds	r1, r2, r2
 80014bc:	6239      	str	r1, [r7, #32]
 80014be:	415b      	adcs	r3, r3
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014c6:	4621      	mov	r1, r4
 80014c8:	1851      	adds	r1, r2, r1
 80014ca:	61b9      	str	r1, [r7, #24]
 80014cc:	4629      	mov	r1, r5
 80014ce:	414b      	adcs	r3, r1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80014de:	4649      	mov	r1, r9
 80014e0:	018b      	lsls	r3, r1, #6
 80014e2:	4641      	mov	r1, r8
 80014e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014e8:	4641      	mov	r1, r8
 80014ea:	018a      	lsls	r2, r1, #6
 80014ec:	4641      	mov	r1, r8
 80014ee:	1889      	adds	r1, r1, r2
 80014f0:	6139      	str	r1, [r7, #16]
 80014f2:	4649      	mov	r1, r9
 80014f4:	eb43 0101 	adc.w	r1, r3, r1
 80014f8:	6179      	str	r1, [r7, #20]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001506:	4649      	mov	r1, r9
 8001508:	008b      	lsls	r3, r1, #2
 800150a:	46c4      	mov	ip, r8
 800150c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001510:	4641      	mov	r1, r8
 8001512:	008a      	lsls	r2, r1, #2
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	4603      	mov	r3, r0
 800151a:	4622      	mov	r2, r4
 800151c:	189b      	adds	r3, r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	460b      	mov	r3, r1
 8001522:	462a      	mov	r2, r5
 8001524:	eb42 0303 	adc.w	r3, r2, r3
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001536:	4649      	mov	r1, r9
 8001538:	008b      	lsls	r3, r1, #2
 800153a:	46c4      	mov	ip, r8
 800153c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001540:	4641      	mov	r1, r8
 8001542:	008a      	lsls	r2, r1, #2
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	4603      	mov	r3, r0
 800154a:	4622      	mov	r2, r4
 800154c:	189b      	adds	r3, r3, r2
 800154e:	673b      	str	r3, [r7, #112]	; 0x70
 8001550:	462b      	mov	r3, r5
 8001552:	460a      	mov	r2, r1
 8001554:	eb42 0303 	adc.w	r3, r2, r3
 8001558:	677b      	str	r3, [r7, #116]	; 0x74
 800155a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800155e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001562:	f7ff fa11 	bl	8000988 <__aeabi_ldivmod>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <BME280_compensate_P_int64+0x578>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	b21b      	sxth	r3, r3
 8001576:	17da      	asrs	r2, r3, #31
 8001578:	66bb      	str	r3, [r7, #104]	; 0x68
 800157a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800157c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	0b50      	lsrs	r0, r2, #13
 800158a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800158e:	1359      	asrs	r1, r3, #13
 8001590:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001594:	462b      	mov	r3, r5
 8001596:	fb00 f203 	mul.w	r2, r0, r3
 800159a:	4623      	mov	r3, r4
 800159c:	fb03 f301 	mul.w	r3, r3, r1
 80015a0:	4413      	add	r3, r2
 80015a2:	4622      	mov	r2, r4
 80015a4:	fba2 2100 	umull	r2, r1, r2, r0
 80015a8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80015ac:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80015b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80015b4:	4413      	add	r3, r2
 80015b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80015ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	0b50      	lsrs	r0, r2, #13
 80015c8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015cc:	1359      	asrs	r1, r3, #13
 80015ce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80015d2:	462b      	mov	r3, r5
 80015d4:	fb00 f203 	mul.w	r2, r0, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	fb03 f301 	mul.w	r3, r3, r1
 80015de:	4413      	add	r3, r2
 80015e0:	4622      	mov	r2, r4
 80015e2:	fba2 2100 	umull	r2, r1, r2, r0
 80015e6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80015ea:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80015ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80015f2:	4413      	add	r3, r2
 80015f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001604:	4621      	mov	r1, r4
 8001606:	0e4a      	lsrs	r2, r1, #25
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	460c      	mov	r4, r1
 800160e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001612:	164b      	asrs	r3, r1, #25
 8001614:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <BME280_compensate_P_int64+0x57c>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	b21b      	sxth	r3, r3
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	663b      	str	r3, [r7, #96]	; 0x60
 8001624:	667a      	str	r2, [r7, #100]	; 0x64
 8001626:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800162a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800162e:	462a      	mov	r2, r5
 8001630:	fb02 f203 	mul.w	r2, r2, r3
 8001634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001638:	4621      	mov	r1, r4
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001644:	4621      	mov	r1, r4
 8001646:	fba2 2101 	umull	r2, r1, r2, r1
 800164a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800164e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001652:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001656:	4413      	add	r3, r2
 8001658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001668:	4621      	mov	r1, r4
 800166a:	0cca      	lsrs	r2, r1, #19
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	460c      	mov	r4, r1
 8001672:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001676:	14cb      	asrs	r3, r1, #19
 8001678:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800167c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001680:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001684:	1884      	adds	r4, r0, r2
 8001686:	65bc      	str	r4, [r7, #88]	; 0x58
 8001688:	eb41 0303 	adc.w	r3, r1, r3
 800168c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800168e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001692:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001696:	4621      	mov	r1, r4
 8001698:	1889      	adds	r1, r1, r2
 800169a:	6539      	str	r1, [r7, #80]	; 0x50
 800169c:	4629      	mov	r1, r5
 800169e:	eb43 0101 	adc.w	r1, r3, r1
 80016a2:	6579      	str	r1, [r7, #84]	; 0x54
 80016a4:	f04f 0000 	mov.w	r0, #0
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016b0:	4623      	mov	r3, r4
 80016b2:	0a18      	lsrs	r0, r3, #8
 80016b4:	462a      	mov	r2, r5
 80016b6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80016ba:	462b      	mov	r3, r5
 80016bc:	1219      	asrs	r1, r3, #8
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <BME280_compensate_P_int64+0x580>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	17da      	asrs	r2, r3, #31
 80016c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80016ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80016d8:	464c      	mov	r4, r9
 80016da:	0123      	lsls	r3, r4, #4
 80016dc:	46c4      	mov	ip, r8
 80016de:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80016e2:	4644      	mov	r4, r8
 80016e4:	0122      	lsls	r2, r4, #4
 80016e6:	1884      	adds	r4, r0, r2
 80016e8:	603c      	str	r4, [r7, #0]
 80016ea:	eb41 0303 	adc.w	r3, r1, r3
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80016f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001702:	46bd      	mov	sp, r7
 8001704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001708:	20000052 	.word	0x20000052
 800170c:	20000050 	.word	0x20000050
 8001710:	2000004e 	.word	0x2000004e

08001714 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <bme280_compensate_H_int32+0xbc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001724:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	039a      	lsls	r2, r3, #14
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <bme280_compensate_H_int32+0xc0>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	051b      	lsls	r3, r3, #20
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <bme280_compensate_H_int32+0xc4>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	4619      	mov	r1, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001744:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001748:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800174a:	4a24      	ldr	r2, [pc, #144]	; (80017dc <bme280_compensate_H_int32+0xc8>)
 800174c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001750:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001758:	1292      	asrs	r2, r2, #10
 800175a:	4921      	ldr	r1, [pc, #132]	; (80017e0 <bme280_compensate_H_int32+0xcc>)
 800175c:	8809      	ldrh	r1, [r1, #0]
 800175e:	4608      	mov	r0, r1
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	fb00 f101 	mul.w	r1, r0, r1
 8001766:	12c9      	asrs	r1, r1, #11
 8001768:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800176c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001770:	1292      	asrs	r2, r2, #10
 8001772:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <bme280_compensate_H_int32+0xd0>)
 8001778:	f9b1 1000 	ldrsh.w	r1, [r1]
 800177c:	fb01 f202 	mul.w	r2, r1, r2
 8001780:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001784:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	13db      	asrs	r3, r3, #15
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	13d2      	asrs	r2, r2, #15
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <bme280_compensate_H_int32+0xd4>)
 800179c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800179e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 80017a2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80017b0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80017b8:	bfa8      	it	ge
 80017ba:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80017be:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	131b      	asrs	r3, r3, #12
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000005c 	.word	0x2000005c
 80017d4:	20000056 	.word	0x20000056
 80017d8:	20000058 	.word	0x20000058
 80017dc:	2000005a 	.word	0x2000005a
 80017e0:	2000003e 	.word	0x2000003e
 80017e4:	20000054 	.word	0x20000054
 80017e8:	2000003c 	.word	0x2000003c

080017ec <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80017f0:	f7ff fc3e 	bl	8001070 <BMEReadRaw>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d163      	bne.n	80018c2 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <BME280_Measure+0xf4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001802:	d104      	bne.n	800180e <BME280_Measure+0x22>
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <BME280_Measure+0xf8>)
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e016      	b.n	800183c <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <BME280_Measure+0xf4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fc7c 	bl	8001110 <BME280_compensate_T_int32>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fde8 	bl	80003f0 <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <BME280_Measure+0xfc>)
 8001826:	f7fe ff77 	bl	8000718 <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f859 	bl	80008e8 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <BME280_Measure+0xf8>)
 800183a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <BME280_Measure+0x100>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001844:	d104      	bne.n	8001850 <BME280_Measure+0x64>
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <BME280_Measure+0x104>)
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e016      	b.n	800187e <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <BME280_Measure+0x100>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fc9b 	bl	8001190 <BME280_compensate_P_int64>
 800185a:	4603      	mov	r3, r0
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fdb7 	bl	80003d0 <__aeabi_ui2d>
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <BME280_Measure+0x108>)
 8001868:	f7fe ff56 	bl	8000718 <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f838 	bl	80008e8 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <BME280_Measure+0x104>)
 800187c:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <BME280_Measure+0x10c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001886:	d104      	bne.n	8001892 <BME280_Measure+0xa6>
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <BME280_Measure+0x110>)
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001890:	e023      	b.n	80018da <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <BME280_Measure+0x10c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff3c 	bl	8001714 <bme280_compensate_H_int32>
 800189c:	4603      	mov	r3, r0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fd96 	bl	80003d0 <__aeabi_ui2d>
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <BME280_Measure+0x114>)
 80018aa:	f7fe ff35 	bl	8000718 <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f817 	bl	80008e8 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <BME280_Measure+0x110>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	e00b      	b.n	80018da <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <BME280_Measure+0x110>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <BME280_Measure+0x110>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <BME280_Measure+0x104>)
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <BME280_Measure+0x104>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <BME280_Measure+0xf8>)
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000002c 	.word	0x2000002c
 80018e4:	200000b4 	.word	0x200000b4
 80018e8:	40590000 	.word	0x40590000
 80018ec:	20000030 	.word	0x20000030
 80018f0:	200000b8 	.word	0x200000b8
 80018f4:	40700000 	.word	0x40700000
 80018f8:	20000034 	.word	0x20000034
 80018fc:	200000bc 	.word	0x200000bc
 8001900:	40900000 	.word	0x40900000

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190a:	f000 f96d 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190e:	f000 f815 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001912:	f000 f87d 	bl	8001a10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001916:	f000 f84d 	bl	80019b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800191a:	2304      	movs	r3, #4
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2303      	movs	r3, #3
 8001924:	2201      	movs	r2, #1
 8001926:	2105      	movs	r1, #5
 8001928:	2002      	movs	r0, #2
 800192a:	f7ff facb 	bl	8000ec4 <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BME280_Measure();
 800192e:	f7ff ff5d 	bl	80017ec <BME280_Measure>
	  HAL_Delay(500);
 8001932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001936:	f000 f9b9 	bl	8001cac <HAL_Delay>
	  BME280_Measure();
 800193a:	e7f8      	b.n	800192e <main+0x2a>

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b090      	sub	sp, #64	; 0x40
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2228      	movs	r2, #40	; 0x28
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f002 f864 	bl	8003a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001962:	2301      	movs	r3, #1
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001966:	2310      	movs	r3, #16
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0318 	add.w	r3, r7, #24
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fc26 	bl	80031c4 <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800197e:	f000 f869 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fe94 	bl	80036c8 <HAL_RCC_ClockConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019a6:	f000 f855 	bl	8001a54 <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3740      	adds	r7, #64	; 0x40
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <MX_I2C1_Init+0x54>)
 80019bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <MX_I2C1_Init+0x58>)
 80019c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019f2:	f000 fbe7 	bl	80021c4 <HAL_I2C_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f000 f82a 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000060 	.word	0x20000060
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	000186a0 	.word	0x000186a0

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_GPIO_Init+0x40>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <MX_GPIO_Init+0x40>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6193      	str	r3, [r2, #24]
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_GPIO_Init+0x40>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_GPIO_Init+0x40>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <MX_GPIO_Init+0x40>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <MX_GPIO_Init+0x40>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_MspInit+0x5c>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_MspInit+0x5c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6193      	str	r3, [r2, #24]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_MspInit+0x5c>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_MspInit+0x5c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <HAL_MspInit+0x5c>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_MspInit+0x5c>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_MspInit+0x60>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_MspInit+0x60>)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000

08001ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <HAL_I2C_MspInit+0x70>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d123      	bne.n	8001b2c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b00:	2312      	movs	r3, #18
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001b10:	f000 f9d4 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b1e:	61d3      	str	r3, [r2, #28]
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40005400 	.word	0x40005400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010c00 	.word	0x40010c00

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b86:	f000 f875 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc2:	f7ff ffe4 	bl	8001b8e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f001 ff03 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff fe9b 	bl	8001904 <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bd8:	08003a78 	.word	0x08003a78
  ldr r2, =_sbss
 8001bdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001be0:	200000c4 	.word	0x200000c4

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f92b 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff ff2c 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f935 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f90b 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000008 	.word	0x20000008
 8001c94:	200000c0 	.word	0x200000c0

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	200000c0 	.word	0x200000c0

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffe0 	bl	8001c98 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff49 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff5e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffb0 	bl	8001e10 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b08b      	sub	sp, #44	; 0x2c
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e169      	b.n	80021a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 8158 	bne.w	800219e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a9a      	ldr	r2, [pc, #616]	; (800215c <HAL_GPIO_Init+0x2a0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d05e      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a98      	ldr	r2, [pc, #608]	; (800215c <HAL_GPIO_Init+0x2a0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d875      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001efe:	4a98      	ldr	r2, [pc, #608]	; (8002160 <HAL_GPIO_Init+0x2a4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d058      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f04:	4a96      	ldr	r2, [pc, #600]	; (8002160 <HAL_GPIO_Init+0x2a4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d86f      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f0a:	4a96      	ldr	r2, [pc, #600]	; (8002164 <HAL_GPIO_Init+0x2a8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d052      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f10:	4a94      	ldr	r2, [pc, #592]	; (8002164 <HAL_GPIO_Init+0x2a8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d869      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f16:	4a94      	ldr	r2, [pc, #592]	; (8002168 <HAL_GPIO_Init+0x2ac>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04c      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f1c:	4a92      	ldr	r2, [pc, #584]	; (8002168 <HAL_GPIO_Init+0x2ac>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d863      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f22:	4a92      	ldr	r2, [pc, #584]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d046      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f28:	4a90      	ldr	r2, [pc, #576]	; (800216c <HAL_GPIO_Init+0x2b0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d85d      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d82a      	bhi.n	8001f88 <HAL_GPIO_Init+0xcc>
 8001f32:	2b12      	cmp	r3, #18
 8001f34:	d859      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f36:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <HAL_GPIO_Init+0x80>)
 8001f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001f91 	.word	0x08001f91
 8001f44:	08001fa3 	.word	0x08001fa3
 8001f48:	08001fe5 	.word	0x08001fe5
 8001f4c:	08001feb 	.word	0x08001feb
 8001f50:	08001feb 	.word	0x08001feb
 8001f54:	08001feb 	.word	0x08001feb
 8001f58:	08001feb 	.word	0x08001feb
 8001f5c:	08001feb 	.word	0x08001feb
 8001f60:	08001feb 	.word	0x08001feb
 8001f64:	08001feb 	.word	0x08001feb
 8001f68:	08001feb 	.word	0x08001feb
 8001f6c:	08001feb 	.word	0x08001feb
 8001f70:	08001feb 	.word	0x08001feb
 8001f74:	08001feb 	.word	0x08001feb
 8001f78:	08001feb 	.word	0x08001feb
 8001f7c:	08001feb 	.word	0x08001feb
 8001f80:	08001f99 	.word	0x08001f99
 8001f84:	08001fad 	.word	0x08001fad
 8001f88:	4a79      	ldr	r2, [pc, #484]	; (8002170 <HAL_GPIO_Init+0x2b4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f8e:	e02c      	b.n	8001fea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	623b      	str	r3, [r7, #32]
          break;
 8001f96:	e029      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e024      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	3308      	adds	r3, #8
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e01f      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e01a      	b.n	8001fec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	623b      	str	r3, [r7, #32]
          break;
 8001fc2:	e013      	b.n	8001fec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	611a      	str	r2, [r3, #16]
          break;
 8001fd6:	e009      	b.n	8001fec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	615a      	str	r2, [r3, #20]
          break;
 8001fe2:	e003      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x130>
          break;
 8001fea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2bff      	cmp	r3, #255	; 0xff
 8001ff0:	d801      	bhi.n	8001ff6 <HAL_GPIO_Init+0x13a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	e001      	b.n	8001ffa <HAL_GPIO_Init+0x13e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d802      	bhi.n	8002008 <HAL_GPIO_Init+0x14c>
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x152>
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	3b08      	subs	r3, #8
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	210f      	movs	r1, #15
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	6a39      	ldr	r1, [r7, #32]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	431a      	orrs	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80b1 	beq.w	800219e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800203c:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <HAL_GPIO_Init+0x2b8>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_GPIO_Init+0x2b8>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <HAL_GPIO_Init+0x2b8>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002054:	4a48      	ldr	r2, [pc, #288]	; (8002178 <HAL_GPIO_Init+0x2bc>)
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	220f      	movs	r2, #15
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a40      	ldr	r2, [pc, #256]	; (800217c <HAL_GPIO_Init+0x2c0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d013      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_GPIO_Init+0x2c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00d      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3e      	ldr	r2, [pc, #248]	; (8002184 <HAL_GPIO_Init+0x2c8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_GPIO_Init+0x1e4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3d      	ldr	r2, [pc, #244]	; (8002188 <HAL_GPIO_Init+0x2cc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_GPIO_Init+0x1e0>
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 800209c:	2304      	movs	r3, #4
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ba:	492f      	ldr	r1, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x2bc>)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_GPIO_Init+0x2d0>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	492c      	ldr	r1, [pc, #176]	; (800218c <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_GPIO_Init+0x2d0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4928      	ldr	r1, [pc, #160]	; (800218c <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_GPIO_Init+0x2d0>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4922      	ldr	r1, [pc, #136]	; (800218c <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_GPIO_Init+0x2d0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	491e      	ldr	r1, [pc, #120]	; (800218c <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_GPIO_Init+0x2d0>)
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4918      	ldr	r1, [pc, #96]	; (800218c <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_GPIO_Init+0x2d0>)
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	4914      	ldr	r1, [pc, #80]	; (800218c <HAL_GPIO_Init+0x2d0>)
 800213c:	4013      	ands	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d021      	beq.n	8002190 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_GPIO_Init+0x2d0>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
 8002158:	e021      	b.n	800219e <HAL_GPIO_Init+0x2e2>
 800215a:	bf00      	nop
 800215c:	10320000 	.word	0x10320000
 8002160:	10310000 	.word	0x10310000
 8002164:	10220000 	.word	0x10220000
 8002168:	10210000 	.word	0x10210000
 800216c:	10120000 	.word	0x10120000
 8002170:	10110000 	.word	0x10110000
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000
 800217c:	40010800 	.word	0x40010800
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40011000 	.word	0x40011000
 8002188:	40011400 	.word	0x40011400
 800218c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	43db      	mvns	r3, r3
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800219a:	4013      	ands	r3, r2
 800219c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	3301      	adds	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f47f ae8e 	bne.w	8001ed0 <HAL_GPIO_Init+0x14>
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	372c      	adds	r7, #44	; 0x2c
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e12b      	b.n	800242e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fc6a 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	; 0x24
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002228:	f001 fba0 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a81      	ldr	r2, [pc, #516]	; (8002438 <HAL_I2C_Init+0x274>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d807      	bhi.n	8002248 <HAL_I2C_Init+0x84>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a80      	ldr	r2, [pc, #512]	; (800243c <HAL_I2C_Init+0x278>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e006      	b.n	8002256 <HAL_I2C_Init+0x92>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a7d      	ldr	r2, [pc, #500]	; (8002440 <HAL_I2C_Init+0x27c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0e7      	b.n	800242e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a78      	ldr	r2, [pc, #480]	; (8002444 <HAL_I2C_Init+0x280>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a6a      	ldr	r2, [pc, #424]	; (8002438 <HAL_I2C_Init+0x274>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d802      	bhi.n	8002298 <HAL_I2C_Init+0xd4>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3301      	adds	r3, #1
 8002296:	e009      	b.n	80022ac <HAL_I2C_Init+0xe8>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_I2C_Init+0x284>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	3301      	adds	r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	495c      	ldr	r1, [pc, #368]	; (8002438 <HAL_I2C_Init+0x274>)
 80022c8:	428b      	cmp	r3, r1
 80022ca:	d819      	bhi.n	8002300 <HAL_I2C_Init+0x13c>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e59      	subs	r1, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022da:	1c59      	adds	r1, r3, #1
 80022dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_I2C_Init+0x138>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e59      	subs	r1, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	e051      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e04f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_I2C_Init+0x168>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e012      	b.n	8002352 <HAL_I2C_Init+0x18e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	0099      	lsls	r1, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Init+0x196>
 8002356:	2301      	movs	r3, #1
 8002358:	e022      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_I2C_Init+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e58      	subs	r0, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	440b      	add	r3, r1
 8002370:	fbb0 f3f3 	udiv	r3, r0, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	e00f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	6809      	ldr	r1, [r1, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6911      	ldr	r1, [r2, #16]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d2      	ldr	r2, [r2, #12]
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	000186a0 	.word	0x000186a0
 800243c:	001e847f 	.word	0x001e847f
 8002440:	003d08ff 	.word	0x003d08ff
 8002444:	431bde83 	.word	0x431bde83
 8002448:	10624dd3 	.word	0x10624dd3

0800244c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002466:	f7ff fc17 	bl	8001c98 <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	f040 80d9 	bne.w	800262c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2319      	movs	r3, #25
 8002480:	2201      	movs	r2, #1
 8002482:	496d      	ldr	r1, [pc, #436]	; (8002638 <HAL_I2C_Mem_Write+0x1ec>)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fcc1 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	e0cc      	b.n	800262e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Mem_Write+0x56>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0c5      	b.n	800262e <HAL_I2C_Mem_Write+0x1e2>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d007      	beq.n	80024c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2221      	movs	r2, #33	; 0x21
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_I2C_Mem_Write+0x1f0>)
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800250a:	88f8      	ldrh	r0, [r7, #6]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	4603      	mov	r3, r0
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 faf8 	bl	8002b10 <I2C_RequestMemoryWrite>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d052      	beq.n	80025cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e081      	b.n	800262e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fd42 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11b      	bne.n	80025cc <HAL_I2C_Mem_Write+0x180>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1aa      	bne.n	800252a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fd2e 	bl	800303a <I2C_WaitOnBTFFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d107      	bne.n	80025fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e016      	b.n	800262e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	00100002 	.word	0x00100002
 800263c:	ffff0000 	.word	0xffff0000

08002640 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	817b      	strh	r3, [r7, #10]
 8002652:	460b      	mov	r3, r1
 8002654:	813b      	strh	r3, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265e:	f7ff fb1b 	bl	8001c98 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	f040 8244 	bne.w	8002afa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	4982      	ldr	r1, [pc, #520]	; (8002884 <HAL_I2C_Mem_Read+0x244>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fbc5 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
 800268a:	e237      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_I2C_Mem_Read+0x5a>
 8002696:	2302      	movs	r3, #2
 8002698:	e230      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2222      	movs	r2, #34	; 0x22
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a62      	ldr	r2, [pc, #392]	; (8002888 <HAL_I2C_Mem_Read+0x248>)
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002702:	88f8      	ldrh	r0, [r7, #6]
 8002704:	893a      	ldrh	r2, [r7, #8]
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4603      	mov	r3, r0
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fa92 	bl	8002c3c <I2C_RequestMemoryRead>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1ec      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d113      	bne.n	8002752 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e1c0      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	2b01      	cmp	r3, #1
 8002758:	d11e      	bne.n	8002798 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800276a:	b672      	cpsid	i
}
 800276c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002794:	b662      	cpsie	i
}
 8002796:	e035      	b.n	8002804 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11e      	bne.n	80027de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027da:	b662      	cpsie	i
}
 80027dc:	e012      	b.n	8002804 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002804:	e166      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	2b03      	cmp	r3, #3
 800280c:	f200 811f 	bhi.w	8002a4e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b01      	cmp	r3, #1
 8002816:	d123      	bne.n	8002860 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fc4d 	bl	80030bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e167      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800285e:	e139      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b02      	cmp	r3, #2
 8002866:	d152      	bne.n	800290e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	2200      	movs	r2, #0
 8002870:	4906      	ldr	r1, [pc, #24]	; (800288c <HAL_I2C_Mem_Read+0x24c>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 faca 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e13c      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
 8002882:	bf00      	nop
 8002884:	00100002 	.word	0x00100002
 8002888:	ffff0000 	.word	0xffff0000
 800288c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028d6:	b662      	cpsie	i
}
 80028d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800290c:	e0e2      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	2200      	movs	r2, #0
 8002916:	497b      	ldr	r1, [pc, #492]	; (8002b04 <HAL_I2C_Mem_Read+0x4c4>)
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fa77 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0e9      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002938:	b672      	cpsid	i
}
 800293a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800296e:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <HAL_I2C_Mem_Read+0x4c8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	08db      	lsrs	r3, r3, #3
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_I2C_Mem_Read+0x4cc>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a1a      	lsrs	r2, r3, #8
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00da      	lsls	r2, r3, #3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	3b01      	subs	r3, #1
 800298c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d118      	bne.n	80029c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029b6:	b662      	cpsie	i
}
 80029b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e09a      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d1d9      	bne.n	8002988 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a16:	b662      	cpsie	i
}
 8002a18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a4c:	e042      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fb32 	bl	80030bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e04c      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d118      	bne.n	8002ad4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f ae94 	bne.w	8002806 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	00010004 	.word	0x00010004
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	14f8b589 	.word	0x14f8b589

08002b10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	460b      	mov	r3, r1
 8002b24:	813b      	strh	r3, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f960 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b60:	d103      	bne.n	8002b6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e05f      	b.n	8002c2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	492d      	ldr	r1, [pc, #180]	; (8002c38 <I2C_RequestMemoryWrite+0x128>)
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f998 	bl	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04c      	b.n	8002c2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	6a39      	ldr	r1, [r7, #32]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa02 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d107      	bne.n	8002bd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e02b      	b.n	8002c2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bdc:	893b      	ldrh	r3, [r7, #8]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	e021      	b.n	8002c2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f9dc 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d107      	bne.n	8002c1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e005      	b.n	8002c2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c22:	893b      	ldrh	r3, [r7, #8]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	00010002 	.word	0x00010002

08002c3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f8c2 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d103      	bne.n	8002ca6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0aa      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	4952      	ldr	r1, [pc, #328]	; (8002e08 <I2C_RequestMemoryRead+0x1cc>)
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f8fa 	bl	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e097      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f964 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e076      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	e021      	b.n	8002d68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f93e 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d107      	bne.n	8002d5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e050      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f923 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e035      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f82b 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dca:	d103      	bne.n	8002dd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e013      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dd8:	897b      	ldrh	r3, [r7, #10]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	4906      	ldr	r1, [pc, #24]	; (8002e08 <I2C_RequestMemoryRead+0x1cc>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f863 	bl	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	00010002 	.word	0x00010002

08002e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1c:	e025      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d021      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fe ff37 	bl	8001c98 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e023      	b.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10d      	bne.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	e00c      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d0b6      	beq.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec8:	e051      	b.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d123      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0204 	orr.w	r2, r3, #4
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e046      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d021      	beq.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe feb5 	bl	8001c98 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d116      	bne.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e020      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10c      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e00b      	b.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d18d      	bne.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc4:	e02d      	b.n	8003022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f8ce 	bl	8003168 <I2C_IsAcknowledgeFailed>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e02d      	b.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d021      	beq.n	8003022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fe5b 	bl	8001c98 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d116      	bne.n	8003022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f043 0220 	orr.w	r2, r3, #32
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e007      	b.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d1ca      	bne.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003046:	e02d      	b.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f88d 	bl	8003168 <I2C_IsAcknowledgeFailed>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e02d      	b.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d021      	beq.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fe fe1a 	bl	8001c98 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d1ca      	bne.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c8:	e042      	b.n	8003150 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d119      	bne.n	800310c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0210 	mvn.w	r2, #16
 80030e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e029      	b.n	8003160 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fe fdc4 	bl	8001c98 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d1b5      	bne.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d11b      	bne.n	80031b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003188:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e272      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8087 	beq.w	80032f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e4:	4b92      	ldr	r3, [pc, #584]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d00c      	beq.n	800320a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f0:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d112      	bne.n	8003222 <HAL_RCC_OscConfig+0x5e>
 80031fc:	4b8c      	ldr	r3, [pc, #560]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d10b      	bne.n	8003222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320a:	4b89      	ldr	r3, [pc, #548]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d06c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x12c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d168      	bne.n	80032f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e24c      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x76>
 800322c:	4b80      	ldr	r3, [pc, #512]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7f      	ldr	r2, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e02e      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x98>
 8003242:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7a      	ldr	r2, [pc, #488]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b78      	ldr	r3, [pc, #480]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a77      	ldr	r2, [pc, #476]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e01d      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0xbc>
 8003266:	4b72      	ldr	r3, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a71      	ldr	r2, [pc, #452]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 8003280:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6a      	ldr	r2, [pc, #424]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a67      	ldr	r2, [pc, #412]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fcfa 	bl	8001c98 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fcf6 	bl	8001c98 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e200      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe4>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fce6 	bl	8001c98 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fce2 	bl	8001c98 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1ec      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x10c>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fe:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800330a:	4b49      	ldr	r3, [pc, #292]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b08      	cmp	r3, #8
 8003314:	d11c      	bne.n	8003350 <HAL_RCC_OscConfig+0x18c>
 8003316:	4b46      	ldr	r3, [pc, #280]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d116      	bne.n	8003350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_RCC_OscConfig+0x176>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1c0      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4939      	ldr	r1, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	e03a      	b.n	80033c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x270>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fc9b 	bl	8001c98 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7fe fc97 	bl	8001c98 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1a1      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4927      	ldr	r1, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
 8003398:	e015      	b.n	80033c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x270>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fc7a 	bl	8001c98 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fe fc76 	bl	8001c98 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e180      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03a      	beq.n	8003448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d019      	beq.n	800340e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe fc5a 	bl	8001c98 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe fc56 	bl	8001c98 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e160      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f000 fac4 	bl	8003994 <RCC_Delay>
 800340c:	e01c      	b.n	8003448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fe fc40 	bl	8001c98 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341a:	e00f      	b.n	800343c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7fe fc3c 	bl	8001c98 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d908      	bls.n	800343c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e146      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	42420000 	.word	0x42420000
 8003438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b92      	ldr	r3, [pc, #584]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e9      	bne.n	800341c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a6 	beq.w	80035a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4b8b      	ldr	r3, [pc, #556]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a87      	ldr	r2, [pc, #540]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]
 8003472:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b7f      	ldr	r3, [pc, #508]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7e      	ldr	r2, [pc, #504]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7fe fbfd 	bl	8001c98 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe fbf9 	bl	8001c98 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e103      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b75      	ldr	r3, [pc, #468]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x312>
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e02d      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x334>
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a69      	ldr	r2, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a66      	ldr	r2, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6213      	str	r3, [r2, #32]
 80034f6:	e01c      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d10c      	bne.n	800351a <HAL_RCC_OscConfig+0x356>
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a60      	ldr	r2, [pc, #384]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a5d      	ldr	r2, [pc, #372]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a5a      	ldr	r2, [pc, #360]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d015      	beq.n	8003566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fbad 	bl	8001c98 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe fba9 	bl	8001c98 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0b1      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ee      	beq.n	8003542 <HAL_RCC_OscConfig+0x37e>
 8003564:	e014      	b.n	8003590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fe fb97 	bl	8001c98 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe fb93 	bl	8001c98 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e09b      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003596:	4b3c      	ldr	r3, [pc, #240]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4a3b      	ldr	r2, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8087 	beq.w	80036ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d061      	beq.n	800367c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d146      	bne.n	800364e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe fb67 	bl	8001c98 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fb63 	bl	8001c98 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e06d      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e0:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d108      	bne.n	8003608 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4921      	ldr	r1, [pc, #132]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a19      	ldr	r1, [r3, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	430b      	orrs	r3, r1
 800361a:	491b      	ldr	r1, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fb37 	bl	8001c98 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe fb33 	bl	8001c98 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e03d      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x46a>
 800364c:	e035      	b.n	80036ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fb20 	bl	8001c98 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe fb1c 	bl	8001c98 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e026      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x498>
 800367a:	e01e      	b.n	80036ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e019      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x500>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0d0      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d910      	bls.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 0207 	bic.w	r2, r3, #7
 80036f2:	4965      	ldr	r1, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800372e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003746:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d040      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e073      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06b      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4936      	ldr	r1, [pc, #216]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b8:	f7fe fa6e 	bl	8001c98 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe fa6a 	bl	8001c98 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e053      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d210      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4922      	ldr	r1, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1cc>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1d0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe f9cc 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	08003a50 	.word	0x08003a50
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b490      	push	{r4, r7}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038a2:	4b29      	ldr	r3, [pc, #164]	; (8003948 <HAL_RCC_GetSysClockFreq+0xac>)
 80038a4:	1d3c      	adds	r4, r7, #4
 80038a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038ac:	f240 2301 	movw	r3, #513	; 0x201
 80038b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_RCC_GetSysClockFreq+0xb0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d002      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x46>
 80038da:	e02b      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038de:	623b      	str	r3, [r7, #32]
      break;
 80038e0:	e02b      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	0c9b      	lsrs	r3, r3, #18
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3328      	adds	r3, #40	; 0x28
 80038ec:	443b      	add	r3, r7
 80038ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0c5b      	lsrs	r3, r3, #17
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	3328      	adds	r3, #40	; 0x28
 800390a:	443b      	add	r3, r7
 800390c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003910:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003916:	fb03 f202 	mul.w	r2, r3, r2
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	e004      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	623b      	str	r3, [r7, #32]
      break;
 8003932:	e002      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003936:	623b      	str	r3, [r7, #32]
      break;
 8003938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393a:	6a3b      	ldr	r3, [r7, #32]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc90      	pop	{r4, r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	08003a40 	.word	0x08003a40
 800394c:	40021000 	.word	0x40021000
 8003950:	007a1200 	.word	0x007a1200
 8003954:	003d0900 	.word	0x003d0900

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <HAL_RCC_GetHCLKFreq+0x10>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	20000000 	.word	0x20000000

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003970:	f7ff fff2 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	08003a60 	.word	0x08003a60

08003994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <RCC_Delay+0x34>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <RCC_Delay+0x38>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	0a5b      	lsrs	r3, r3, #9
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039b0:	bf00      	nop
  }
  while (Delay --);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f9      	bne.n	80039b0 <RCC_Delay+0x1c>
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	20000000 	.word	0x20000000
 80039cc:	10624dd3 	.word	0x10624dd3

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	2600      	movs	r6, #0
 80039d4:	4d0c      	ldr	r5, [pc, #48]	; (8003a08 <__libc_init_array+0x38>)
 80039d6:	4c0d      	ldr	r4, [pc, #52]	; (8003a0c <__libc_init_array+0x3c>)
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	42a6      	cmp	r6, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	f000 f822 	bl	8003a28 <_init>
 80039e4:	2600      	movs	r6, #0
 80039e6:	4d0a      	ldr	r5, [pc, #40]	; (8003a10 <__libc_init_array+0x40>)
 80039e8:	4c0a      	ldr	r4, [pc, #40]	; (8003a14 <__libc_init_array+0x44>)
 80039ea:	1b64      	subs	r4, r4, r5
 80039ec:	10a4      	asrs	r4, r4, #2
 80039ee:	42a6      	cmp	r6, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f8:	4798      	blx	r3
 80039fa:	3601      	adds	r6, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a02:	4798      	blx	r3
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	08003a70 	.word	0x08003a70
 8003a0c:	08003a70 	.word	0x08003a70
 8003a10:	08003a70 	.word	0x08003a70
 8003a14:	08003a74 	.word	0x08003a74

08003a18 <memset>:
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4402      	add	r2, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_init>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr

08003a34 <_fini>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr
