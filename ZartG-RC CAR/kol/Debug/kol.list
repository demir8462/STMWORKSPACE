
kol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007094  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  08007238  08007238  00017238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800844c  0800844c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008454  08008454  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800845c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200001f0  0800864c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800864c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac9c  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002102  00000000  00000000  0002aebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002cfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d5f  00000000  00000000  0002e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bba4  00000000  00000000  0004515f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087049  00000000  00000000  00050d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  000d7d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800721c 	.word	0x0800721c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800721c 	.word	0x0800721c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000eda:	88f8      	ldrh	r0, [r7, #6]
 8000edc:	88b9      	ldrh	r1, [r7, #4]
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	883c      	ldrh	r4, [r7, #0]
 8000ee2:	8b3b      	ldrh	r3, [r7, #24]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	f000 febc 	bl	8001c64 <ST7735_FillRectangle>
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}

08000ef4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <fillScreen+0x2c>)
 8000f00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <fillScreen+0x30>)
 8000f06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	2100      	movs	r1, #0
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ffd2 	bl	8000ebc <fillRect>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000027e 	.word	0x2000027e
 8000f24:	20000280 	.word	0x20000280

08000f28 <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <NRF24_DelayMicroSeconds+0x3c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <NRF24_DelayMicroSeconds+0x40>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	0c9a      	lsrs	r2, r3, #18
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000f48:	bf00      	nop
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	60fa      	str	r2, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1fa      	bne.n	8000f4a <NRF24_DelayMicroSeconds+0x22>
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000014 	.word	0x20000014
 8000f68:	165e9f81 	.word	0x165e9f81

08000f6c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d008      	beq.n	8000f8c <NRF24_csn+0x20>
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <NRF24_csn+0x38>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <NRF24_csn+0x3c>)
 8000f80:	8811      	ldrh	r1, [r2, #0]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fea1 	bl	8002ccc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000f8a:	e007      	b.n	8000f9c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <NRF24_csn+0x38>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <NRF24_csn+0x3c>)
 8000f92:	8811      	ldrh	r1, [r2, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fe98 	bl	8002ccc <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000021c 	.word	0x2000021c
 8000fa8:	20000220 	.word	0x20000220

08000fac <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <NRF24_ce+0x20>
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <NRF24_ce+0x38>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <NRF24_ce+0x3c>)
 8000fc0:	8811      	ldrh	r1, [r2, #0]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fe81 	bl	8002ccc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000fca:	e007      	b.n	8000fdc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <NRF24_ce+0x38>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <NRF24_ce+0x3c>)
 8000fd2:	8811      	ldrh	r1, [r2, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fe78 	bl	8002ccc <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000021c 	.word	0x2000021c
 8000fe8:	20000222 	.word	0x20000222

08000fec <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff ffb8 	bl	8000f6c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	b2db      	uxtb	r3, r3
 8001004:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	2201      	movs	r2, #1
 800100e:	480a      	ldr	r0, [pc, #40]	; (8001038 <NRF24_read_register+0x4c>)
 8001010:	f002 fb23 	bl	800365a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	1c59      	adds	r1, r3, #1
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <NRF24_read_register+0x4c>)
 8001020:	f002 fc57 	bl	80038d2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff ff9f 	bl	8000f6c <NRF24_csn>
	return retData;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000224 	.word	0x20000224

0800103c <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ff8d 	bl	8000f6c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	b2db      	uxtb	r3, r3
 800105a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001060:	f107 010c 	add.w	r1, r7, #12
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	2202      	movs	r2, #2
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <NRF24_write_register+0x40>)
 800106a:	f002 faf6 	bl	800365a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff7c 	bl	8000f6c <NRF24_csn>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000224 	.word	0x20000224

08001080 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff6b 	bl	8000f6c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	b2db      	uxtb	r3, r3
 800109e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2201      	movs	r2, #1
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <NRF24_write_registerN+0x4c>)
 80010aa:	f002 fad6 	bl	800365a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <NRF24_write_registerN+0x4c>)
 80010b8:	f002 facf 	bl	800365a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff ff55 	bl	8000f6c <NRF24_csn>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000224 	.word	0x20000224

080010d0 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80010dc:	f000 fa0e 	bl	80014fc <NRF24_getPayloadSize>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d303      	bcc.n	80010f2 <NRF24_read_payload+0x22>
 80010ea:	f000 fa07 	bl	80014fc <NRF24_getPayloadSize>
 80010ee:	4603      	mov	r3, r0
 80010f0:	e000      	b.n	80010f4 <NRF24_read_payload+0x24>
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ff38 	bl	8000f6c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80010fc:	2361      	movs	r3, #97	; 0x61
 80010fe:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001100:	f107 010e 	add.w	r1, r7, #14
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	2201      	movs	r2, #1
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <NRF24_read_payload+0x5c>)
 800110a:	f002 faa6 	bl	800365a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	b29a      	uxth	r2, r3
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <NRF24_read_payload+0x5c>)
 8001118:	f002 fbdb 	bl	80038d2 <HAL_SPI_Receive>
	NRF24_csn(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ff25 	bl	8000f6c <NRF24_csn>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000224 	.word	0x20000224

08001130 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001134:	21ff      	movs	r1, #255	; 0xff
 8001136:	20e1      	movs	r0, #225	; 0xe1
 8001138:	f7ff ff80 	bl	800103c <NRF24_write_register>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001144:	21ff      	movs	r1, #255	; 0xff
 8001146:	20e2      	movs	r0, #226	; 0xe2
 8001148:	f7ff ff78 	bl	800103c <NRF24_write_register>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001156:	2007      	movs	r0, #7
 8001158:	f7ff ff48 	bl	8000fec <NRF24_read_register>
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001160:	79fb      	ldrb	r3, [r7, #7]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800116c:	b082      	sub	sp, #8
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <NRF24_begin+0x1ac>)
 8001182:	4618      	mov	r0, r3
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2258      	movs	r2, #88	; 0x58
 800118a:	4619      	mov	r1, r3
 800118c:	f003 f8d0 	bl	8004330 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001190:	4a62      	ldr	r2, [pc, #392]	; (800131c <NRF24_begin+0x1b0>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001196:	4a62      	ldr	r2, [pc, #392]	; (8001320 <NRF24_begin+0x1b4>)
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800119c:	4a61      	ldr	r2, [pc, #388]	; (8001324 <NRF24_begin+0x1b8>)
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fee2 	bl	8000f6c <NRF24_csn>
	NRF24_ce(0);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff feff 	bl	8000fac <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80011ae:	2005      	movs	r0, #5
 80011b0:	f001 fab0 	bl	8002714 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80011b4:	2108      	movs	r1, #8
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ff40 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80011bc:	213f      	movs	r1, #63	; 0x3f
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ff3c 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80011c4:	2103      	movs	r1, #3
 80011c6:	2002      	movs	r0, #2
 80011c8:	f7ff ff38 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80011cc:	2103      	movs	r1, #3
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff ff34 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80011d4:	2103      	movs	r1, #3
 80011d6:	2004      	movs	r0, #4
 80011d8:	f7ff ff30 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80011dc:	2102      	movs	r1, #2
 80011de:	2005      	movs	r0, #5
 80011e0:	f7ff ff2c 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80011e4:	210f      	movs	r1, #15
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff ff28 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80011ec:	210e      	movs	r1, #14
 80011ee:	2007      	movs	r0, #7
 80011f0:	f7ff ff24 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2008      	movs	r0, #8
 80011f8:	f7ff ff20 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2009      	movs	r0, #9
 8001200:	f7ff ff1c 	bl	800103c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001204:	23e7      	movs	r3, #231	; 0xe7
 8001206:	733b      	strb	r3, [r7, #12]
 8001208:	23e7      	movs	r3, #231	; 0xe7
 800120a:	72fb      	strb	r3, [r7, #11]
 800120c:	23e7      	movs	r3, #231	; 0xe7
 800120e:	72bb      	strb	r3, [r7, #10]
 8001210:	23e7      	movs	r3, #231	; 0xe7
 8001212:	727b      	strb	r3, [r7, #9]
 8001214:	23e7      	movs	r3, #231	; 0xe7
 8001216:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2205      	movs	r2, #5
 800121e:	4619      	mov	r1, r3
 8001220:	200a      	movs	r0, #10
 8001222:	f7ff ff2d 	bl	8001080 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001226:	23c2      	movs	r3, #194	; 0xc2
 8001228:	733b      	strb	r3, [r7, #12]
 800122a:	23c2      	movs	r3, #194	; 0xc2
 800122c:	72fb      	strb	r3, [r7, #11]
 800122e:	23c2      	movs	r3, #194	; 0xc2
 8001230:	72bb      	strb	r3, [r7, #10]
 8001232:	23c2      	movs	r3, #194	; 0xc2
 8001234:	727b      	strb	r3, [r7, #9]
 8001236:	23c2      	movs	r3, #194	; 0xc2
 8001238:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2205      	movs	r2, #5
 8001240:	4619      	mov	r1, r3
 8001242:	200b      	movs	r0, #11
 8001244:	f7ff ff1c 	bl	8001080 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001248:	21c3      	movs	r1, #195	; 0xc3
 800124a:	200c      	movs	r0, #12
 800124c:	f7ff fef6 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001250:	21c4      	movs	r1, #196	; 0xc4
 8001252:	200d      	movs	r0, #13
 8001254:	f7ff fef2 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001258:	21c5      	movs	r1, #197	; 0xc5
 800125a:	200e      	movs	r0, #14
 800125c:	f7ff feee 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001260:	21c6      	movs	r1, #198	; 0xc6
 8001262:	200f      	movs	r0, #15
 8001264:	f7ff feea 	bl	800103c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001268:	23e7      	movs	r3, #231	; 0xe7
 800126a:	733b      	strb	r3, [r7, #12]
 800126c:	23e7      	movs	r3, #231	; 0xe7
 800126e:	72fb      	strb	r3, [r7, #11]
 8001270:	23e7      	movs	r3, #231	; 0xe7
 8001272:	72bb      	strb	r3, [r7, #10]
 8001274:	23e7      	movs	r3, #231	; 0xe7
 8001276:	727b      	strb	r3, [r7, #9]
 8001278:	23e7      	movs	r3, #231	; 0xe7
 800127a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2205      	movs	r2, #5
 8001282:	4619      	mov	r1, r3
 8001284:	2010      	movs	r0, #16
 8001286:	f7ff fefb 	bl	8001080 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2011      	movs	r0, #17
 800128e:	f7ff fed5 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	2012      	movs	r0, #18
 8001296:	f7ff fed1 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800129a:	2100      	movs	r1, #0
 800129c:	2013      	movs	r0, #19
 800129e:	f7ff fecd 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2014      	movs	r0, #20
 80012a6:	f7ff fec9 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2015      	movs	r0, #21
 80012ae:	f7ff fec5 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	2016      	movs	r0, #22
 80012b6:	f7ff fec1 	bl	800103c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80012ba:	f000 fa4f 	bl	800175c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80012be:	2100      	movs	r1, #0
 80012c0:	201c      	movs	r0, #28
 80012c2:	f7ff febb 	bl	800103c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	201d      	movs	r0, #29
 80012ca:	f7ff feb7 	bl	800103c <NRF24_write_register>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80012ce:	210f      	movs	r1, #15
 80012d0:	200f      	movs	r0, #15
 80012d2:	f000 f8cb 	bl	800146c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f000 f951 	bl	800157e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f987 	bl	80015f0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f000 f9ca 	bl	800167c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80012e8:	f000 f91c 	bl	8001524 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80012ec:	2020      	movs	r0, #32
 80012ee:	f000 f8ed 	bl	80014cc <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80012f2:	f000 fa2a 	bl	800174a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80012f6:	204c      	movs	r0, #76	; 0x4c
 80012f8:	f000 f8d3 	bl	80014a2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80012fc:	f7ff ff18 	bl	8001130 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001300:	f7ff ff1e 	bl	8001140 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001304:	f000 f9e2 	bl	80016cc <NRF24_powerDown>
	
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001312:	b002      	add	sp, #8
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000224 	.word	0x20000224
 800131c:	2000021c 	.word	0x2000021c
 8001320:	20000220 	.word	0x20000220
 8001324:	20000222 	.word	0x20000222

08001328 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe5d 	bl	8000fec <NRF24_read_register>
 8001332:	4603      	mov	r3, r0
 8001334:	f043 0303 	orr.w	r3, r3, #3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4619      	mov	r1, r3
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fe7d 	bl	800103c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <NRF24_startListening+0x48>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	4313      	orrs	r3, r2
 800134a:	d004      	beq.n	8001356 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800134c:	2205      	movs	r2, #5
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <NRF24_startListening+0x48>)
 8001350:	200a      	movs	r0, #10
 8001352:	f7ff fe95 	bl	8001080 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8001356:	f7ff feeb 	bl	8001130 <NRF24_flush_tx>
	NRF24_flush_rx();
 800135a:	f7ff fef1 	bl	8001140 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff fe24 	bl	8000fac <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001364:	2096      	movs	r0, #150	; 0x96
 8001366:	f7ff fddf 	bl	8000f28 <NRF24_DelayMicroSeconds>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000210 	.word	0x20000210

08001374 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f9b6 	bl	80016ea <NRF24_availablePipe>
 800137e:	4603      	mov	r3, r0
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}

08001384 <NRF24_read>:
//17. Read received data
uint8_t t;
bool NRF24_read( void* buf, uint8_t len )
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fe9b 	bl	80010d0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800139a:	2017      	movs	r0, #23
 800139c:	f7ff fe26 	bl	8000fec <NRF24_read_register>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80013a8:	f7ff feca 	bl	8001140 <NRF24_flush_rx>
	t= NRF24_getDynamicPayloadSize();
 80013ac:	f000 f8b2 	bl	8001514 <NRF24_getDynamicPayloadSize>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <NRF24_read+0x48>)
 80013b6:	701a      	strb	r2, [r3, #0]
	return rxStatus;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000027c 	.word	0x2000027c

080013d0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4601      	mov	r1, r0
 80013d8:	e9c7 2300 	strd	r2, r3, [r7]
 80013dc:	460b      	mov	r3, r1
 80013de:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d104      	bne.n	80013f0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80013e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ea:	491c      	ldr	r1, [pc, #112]	; (800145c <NRF24_openReadingPipe+0x8c>)
 80013ec:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d82d      	bhi.n	8001452 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d808      	bhi.n	800140e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <NRF24_openReadingPipe+0x90>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	4639      	mov	r1, r7
 8001404:	2205      	movs	r2, #5
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe3a 	bl	8001080 <NRF24_write_registerN>
 800140c:	e007      	b.n	800141e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4a13      	ldr	r2, [pc, #76]	; (8001460 <NRF24_openReadingPipe+0x90>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	4639      	mov	r1, r7
 8001416:	2201      	movs	r2, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe31 	bl	8001080 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	4a10      	ldr	r2, [pc, #64]	; (8001464 <NRF24_openReadingPipe+0x94>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	4a10      	ldr	r2, [pc, #64]	; (8001468 <NRF24_openReadingPipe+0x98>)
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe06 	bl	800103c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001430:	2002      	movs	r0, #2
 8001432:	f7ff fddb 	bl	8000fec <NRF24_read_register>
 8001436:	4603      	mov	r3, r0
 8001438:	b25a      	sxtb	r2, r3
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b25b      	sxtb	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff fdf5 	bl	800103c <NRF24_write_register>
	}
	
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000210 	.word	0x20000210
 8001460:	0800727c 	.word	0x0800727c
 8001464:	08007284 	.word	0x08007284
 8001468:	20000218 	.word	0x20000218

0800146c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	b25a      	sxtb	r2, r3
 8001482:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	b25b      	sxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b25b      	sxtb	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	2004      	movs	r0, #4
 8001496:	f7ff fdd1 	bl	800103c <NRF24_write_register>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80014ac:	237f      	movs	r3, #127	; 0x7f
 80014ae:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf28      	it	cs
 80014b8:	4613      	movcs	r3, r2
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	2005      	movs	r0, #5
 80014c0:	f7ff fdbc 	bl	800103c <NRF24_write_register>
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80014d6:	2320      	movs	r3, #32
 80014d8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4293      	cmp	r3, r2
 80014e0:	bf28      	it	cs
 80014e2:	4613      	movcs	r3, r2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <NRF24_setPayloadSize+0x2c>)
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000218 	.word	0x20000218

080014fc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	return payload_size;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <NRF24_getPayloadSize+0x14>)
 8001502:	781b      	ldrb	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000218 	.word	0x20000218

08001514 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001518:	2060      	movs	r0, #96	; 0x60
 800151a:	f7ff fd67 	bl	8000fec <NRF24_read_register>
 800151e:	4603      	mov	r3, r0
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}

08001524 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001528:	201d      	movs	r0, #29
 800152a:	f7ff fd5f 	bl	8000fec <NRF24_read_register>
 800152e:	4603      	mov	r3, r0
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	201d      	movs	r0, #29
 800153a:	f7ff fd7f 	bl	800103c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800153e:	2100      	movs	r1, #0
 8001540:	201c      	movs	r0, #28
 8001542:	f7ff fd7b 	bl	800103c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001546:	4b02      	ldr	r3, [pc, #8]	; (8001550 <NRF24_disableDynamicPayloads+0x2c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000219 	.word	0x20000219

08001554 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001564:	213f      	movs	r1, #63	; 0x3f
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fd68 	bl	800103c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800156c:	e003      	b.n	8001576 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800156e:	2100      	movs	r1, #0
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fd63 	bl	800103c <NRF24_write_register>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001588:	2006      	movs	r0, #6
 800158a:	f7ff fd2f 	bl	8000fec <NRF24_read_register>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	f023 0306 	bic.w	r3, r3, #6
 8001598:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d104      	bne.n	80015aa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f043 0306 	orr.w	r3, r3, #6
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e019      	b.n	80015de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d104      	bne.n	80015ba <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e011      	b.n	80015de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d104      	bne.n	80015ca <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e009      	b.n	80015de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d103      	bne.n	80015de <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f043 0306 	orr.w	r3, r3, #6
 80015dc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	4619      	mov	r1, r3
 80015e2:	2006      	movs	r0, #6
 80015e4:	f7ff fd2a 	bl	800103c <NRF24_write_register>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80015fe:	2006      	movs	r0, #6
 8001600:	f7ff fcf4 	bl	8000fec <NRF24_read_register>
 8001604:	4603      	mov	r3, r0
 8001606:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <NRF24_setDataRate+0x88>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001614:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d107      	bne.n	800162c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <NRF24_setDataRate+0x88>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	73bb      	strb	r3, [r7, #14]
 800162a:	e00d      	b.n	8001648 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <NRF24_setDataRate+0x88>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	73bb      	strb	r3, [r7, #14]
 8001640:	e002      	b.n	8001648 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <NRF24_setDataRate+0x88>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	4619      	mov	r1, r3
 800164c:	2006      	movs	r0, #6
 800164e:	f7ff fcf5 	bl	800103c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001652:	2006      	movs	r0, #6
 8001654:	f7ff fcca 	bl	8000fec <NRF24_read_register>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	7bbb      	ldrb	r3, [r7, #14]
 800165e:	4293      	cmp	r3, r2
 8001660:	d102      	bne.n	8001668 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	e002      	b.n	800166e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <NRF24_setDataRate+0x88>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000021a 	.word	0x2000021a

0800167c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fcb0 	bl	8000fec <NRF24_read_register>
 800168c:	4603      	mov	r3, r0
 800168e:	f023 030c 	bic.w	r3, r3, #12
 8001692:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00f      	beq.n	80016ba <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e007      	b.n	80016ba <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	4619      	mov	r1, r3
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fcbc 	bl	800103c <NRF24_write_register>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fc8b 	bl	8000fec <NRF24_read_register>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f023 0302 	bic.w	r3, r3, #2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fcab 	bl	800103c <NRF24_write_register>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}

080016ea <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80016f2:	f7ff fd2d 	bl	8001150 <NRF24_get_status>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	73bb      	strb	r3, [r7, #14]

  if (result)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d017      	beq.n	8001740 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001726:	2140      	movs	r1, #64	; 0x40
 8001728:	2007      	movs	r0, #7
 800172a:	f7ff fc87 	bl	800103c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001738:	2120      	movs	r1, #32
 800173a:	2007      	movs	r0, #7
 800173c:	f7ff fc7e 	bl	800103c <NRF24_write_register>
    }
  }
  return result;
 8001740:	7bbb      	ldrb	r3, [r7, #14]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800174e:	2170      	movs	r1, #112	; 0x70
 8001750:	2007      	movs	r0, #7
 8001752:	f7ff fc73 	bl	800103c <NRF24_write_register>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fc02 	bl	8000f6c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001768:	2350      	movs	r3, #80	; 0x50
 800176a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800176c:	2373      	movs	r3, #115	; 0x73
 800176e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001770:	1d39      	adds	r1, r7, #4
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	2202      	movs	r2, #2
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <NRF24_ACTIVATE_cmd+0x30>)
 8001778:	f001 ff6f 	bl	800365a <HAL_SPI_Transmit>
	NRF24_csn(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff fbf5 	bl	8000f6c <NRF24_csn>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000224 	.word	0x20000224

08001790 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	2101      	movs	r1, #1
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <ST7735_Select+0x14>)
 800179a:	f001 fa97 	bl	8002ccc <HAL_GPIO_WritePin>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020000 	.word	0x40020000

080017a8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2101      	movs	r1, #1
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <ST7735_Unselect+0x14>)
 80017b2:	f001 fa8b 	bl	8002ccc <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40020000 	.word	0x40020000

080017c0 <ST7735_Reset>:

void ST7735_Reset()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2104      	movs	r1, #4
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <ST7735_Reset+0x24>)
 80017ca:	f001 fa7f 	bl	8002ccc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80017ce:	2005      	movs	r0, #5
 80017d0:	f000 ffa0 	bl	8002714 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2104      	movs	r1, #4
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <ST7735_Reset+0x24>)
 80017da:	f001 fa77 	bl	8002ccc <HAL_GPIO_WritePin>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020000 	.word	0x40020000

080017e8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2102      	movs	r1, #2
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <ST7735_WriteCommand+0x2c>)
 80017f8:	f001 fa68 	bl	8002ccc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80017fc:	1df9      	adds	r1, r7, #7
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	2201      	movs	r2, #1
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <ST7735_WriteCommand+0x30>)
 8001806:	f001 ff28 	bl	800365a <HAL_SPI_Transmit>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40020000 	.word	0x40020000
 8001818:	200002e0 	.word	0x200002e0

0800181c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2102      	movs	r1, #2
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <ST7735_WriteData+0x2c>)
 800182c:	f001 fa4e 	bl	8002ccc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b29a      	uxth	r2, r3
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <ST7735_WriteData+0x30>)
 800183c:	f001 ff0d 	bl	800365a <HAL_SPI_Transmit>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020000 	.word	0x40020000
 800184c:	200002e0 	.word	0x200002e0

08001850 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001862:	e034      	b.n	80018ce <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ffb9 	bl	80017e8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001880:	7abb      	ldrb	r3, [r7, #10]
 8001882:	b29b      	uxth	r3, r3
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800188a:	7abb      	ldrb	r3, [r7, #10]
 800188c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001890:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001892:	7abb      	ldrb	r3, [r7, #10]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001898:	7abb      	ldrb	r3, [r7, #10]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffbd 	bl	800181c <ST7735_WriteData>
            addr += numArgs;
 80018a2:	7abb      	ldrb	r3, [r7, #10]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80018aa:	89bb      	ldrh	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00e      	beq.n	80018ce <DisplayInit+0x7e>
            ms = *addr++;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80018ba:	89bb      	ldrh	r3, [r7, #12]
 80018bc:	2bff      	cmp	r3, #255	; 0xff
 80018be:	d102      	bne.n	80018c6 <DisplayInit+0x76>
 80018c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80018c6:	89bb      	ldrh	r3, [r7, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 ff23 	bl	8002714 <HAL_Delay>
    while(numCommands--) {
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	73fa      	strb	r2, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1c5      	bne.n	8001864 <DisplayInit+0x14>
        }
    }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	4603      	mov	r3, r0
 80018f8:	71bb      	strb	r3, [r7, #6]
 80018fa:	460b      	mov	r3, r1
 80018fc:	717b      	strb	r3, [r7, #5]
 80018fe:	4613      	mov	r3, r2
 8001900:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001902:	202a      	movs	r0, #42	; 0x2a
 8001904:	f7ff ff70 	bl	80017e8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001908:	2300      	movs	r3, #0
 800190a:	733b      	strb	r3, [r7, #12]
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <ST7735_SetAddressWindow+0x88>)
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4413      	add	r3, r2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	737b      	strb	r3, [r7, #13]
 8001918:	2300      	movs	r3, #0
 800191a:	73bb      	strb	r3, [r7, #14]
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <ST7735_SetAddressWindow+0x88>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	4413      	add	r3, r2
 8001924:	b2db      	uxtb	r3, r3
 8001926:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2104      	movs	r1, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff74 	bl	800181c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001934:	202b      	movs	r0, #43	; 0x2b
 8001936:	f7ff ff57 	bl	80017e8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <ST7735_SetAddressWindow+0x8c>)
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	4413      	add	r3, r2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <ST7735_SetAddressWindow+0x8c>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	793b      	ldrb	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	b2db      	uxtb	r3, r3
 8001950:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2104      	movs	r1, #4
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800195e:	202c      	movs	r0, #44	; 0x2c
 8001960:	f7ff ff42 	bl	80017e8 <ST7735_WriteCommand>
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	20000285 	.word	0x20000285
 8001970:	20000286 	.word	0x20000286

08001974 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800197e:	f7ff ff07 	bl	8001790 <ST7735_Select>
    ST7735_Reset();
 8001982:	f7ff ff1d 	bl	80017c0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <ST7735_Init+0x44>)
 8001988:	f7ff ff62 	bl	8001850 <DisplayInit>
    DisplayInit(init_cmds2);
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <ST7735_Init+0x48>)
 800198e:	f7ff ff5f 	bl	8001850 <DisplayInit>
    DisplayInit(init_cmds3);
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <ST7735_Init+0x4c>)
 8001994:	f7ff ff5c 	bl	8001850 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 20;
    _rowstart = 0;
#else
    _colstart = 24;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <ST7735_Init+0x50>)
 800199a:	2218      	movs	r2, #24
 800199c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <ST7735_Init+0x54>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f810 	bl	80019cc <ST7735_SetRotation>
    ST7735_Unselect();
 80019ac:	f7ff fefc 	bl	80017a8 <ST7735_Unselect>

}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800728c 	.word	0x0800728c
 80019bc:	080072c4 	.word	0x080072c4
 80019c0:	080072d4 	.word	0x080072d4
 80019c4:	20000283 	.word	0x20000283
 80019c8:	20000284 	.word	0x20000284

080019cc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <ST7735_SetRotation+0xe4>)
 80019e4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <ST7735_SetRotation+0xe4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d84e      	bhi.n	8001a8c <ST7735_SetRotation+0xc0>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <ST7735_SetRotation+0x28>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a27 	.word	0x08001a27
 80019fc:	08001a49 	.word	0x08001a49
 8001a00:	08001a6b 	.word	0x08001a6b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <ST7735_SetRotation+0xe8>)
 8001a0a:	22a0      	movs	r2, #160	; 0xa0
 8001a0c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <ST7735_SetRotation+0xec>)
 8001a10:	2250      	movs	r2, #80	; 0x50
 8001a12:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <ST7735_SetRotation+0xf0>)
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <ST7735_SetRotation+0xf4>)
 8001a1a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <ST7735_SetRotation+0xf8>)
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <ST7735_SetRotation+0xfc>)
 8001a22:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a24:	e032      	b.n	8001a8c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001a26:	23a0      	movs	r3, #160	; 0xa0
 8001a28:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <ST7735_SetRotation+0xec>)
 8001a2c:	22a0      	movs	r2, #160	; 0xa0
 8001a2e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <ST7735_SetRotation+0xe8>)
 8001a32:	2250      	movs	r2, #80	; 0x50
 8001a34:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <ST7735_SetRotation+0xf0>)
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <ST7735_SetRotation+0xfc>)
 8001a3c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <ST7735_SetRotation+0xf8>)
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <ST7735_SetRotation+0xf4>)
 8001a44:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a46:	e021      	b.n	8001a8c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <ST7735_SetRotation+0xe8>)
 8001a4e:	22a0      	movs	r2, #160	; 0xa0
 8001a50:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <ST7735_SetRotation+0xec>)
 8001a54:	2250      	movs	r2, #80	; 0x50
 8001a56:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <ST7735_SetRotation+0xf0>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <ST7735_SetRotation+0xf4>)
 8001a5e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <ST7735_SetRotation+0xf8>)
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <ST7735_SetRotation+0xfc>)
 8001a66:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a68:	e010      	b.n	8001a8c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001a6a:	2360      	movs	r3, #96	; 0x60
 8001a6c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <ST7735_SetRotation+0xec>)
 8001a70:	22a0      	movs	r2, #160	; 0xa0
 8001a72:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <ST7735_SetRotation+0xe8>)
 8001a76:	2250      	movs	r2, #80	; 0x50
 8001a78:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <ST7735_SetRotation+0xf0>)
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <ST7735_SetRotation+0xfc>)
 8001a80:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <ST7735_SetRotation+0xf8>)
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <ST7735_SetRotation+0xf4>)
 8001a88:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a8a:	bf00      	nop
  }
  ST7735_Select();
 8001a8c:	f7ff fe80 	bl	8001790 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001a90:	2036      	movs	r0, #54	; 0x36
 8001a92:	f7ff fea9 	bl	80017e8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001a96:	f107 030f 	add.w	r3, r7, #15
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff febd 	bl	800181c <ST7735_WriteData>
  ST7735_Unselect();
 8001aa2:	f7ff fe81 	bl	80017a8 <ST7735_Unselect>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000282 	.word	0x20000282
 8001ab4:	20000280 	.word	0x20000280
 8001ab8:	2000027e 	.word	0x2000027e
 8001abc:	20000283 	.word	0x20000283
 8001ac0:	20000285 	.word	0x20000285
 8001ac4:	20000284 	.word	0x20000284
 8001ac8:	20000286 	.word	0x20000286

08001acc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001acc:	b082      	sub	sp, #8
 8001ace:	b590      	push	{r4, r7, lr}
 8001ad0:	b089      	sub	sp, #36	; 0x24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
 8001ada:	460b      	mov	r3, r1
 8001adc:	80bb      	strh	r3, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2d8      	uxtb	r0, r3
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	b2d9      	uxtb	r1, r3
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2dc      	uxtb	r4, r3
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b02:	4413      	add	r3, r2
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	f7ff feea 	bl	80018e4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	e043      	b.n	8001b9e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	3b20      	subs	r3, #32
 8001b1c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	440b      	add	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	e029      	b.n	8001b8c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001b48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	743b      	strb	r3, [r7, #16]
 8001b52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fe5c 	bl	800181c <ST7735_WriteData>
 8001b64:	e00f      	b.n	8001b86 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001b66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	733b      	strb	r3, [r7, #12]
 8001b72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fe4b 	bl	800181c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b90:	461a      	mov	r2, r3
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d3cf      	bcc.n	8001b38 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d3b5      	bcc.n	8001b16 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3724      	adds	r7, #36	; 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001bb6:	b002      	add	sp, #8
 8001bb8:	4770      	bx	lr
	...

08001bbc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af04      	add	r7, sp, #16
 8001bc4:	603a      	str	r2, [r7, #0]
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	4603      	mov	r3, r0
 8001bca:	80fb      	strh	r3, [r7, #6]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001bd0:	f7ff fdde 	bl	8001790 <ST7735_Select>

    while(*str) {
 8001bd4:	e033      	b.n	8001c3e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	7d3a      	ldrb	r2, [r7, #20]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <ST7735_WriteString+0xa0>)
 8001bde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001be2:	4293      	cmp	r3, r2
 8001be4:	db16      	blt.n	8001c14 <ST7735_WriteString+0x58>
            x = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001bea:	7d7b      	ldrb	r3, [r7, #21]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	88bb      	ldrh	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	7d7a      	ldrb	r2, [r7, #21]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <ST7735_WriteString+0xa4>)
 8001bfc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	da21      	bge.n	8001c48 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d103      	bne.n	8001c14 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	603b      	str	r3, [r7, #0]
                continue;
 8001c12:	e014      	b.n	8001c3e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	88b9      	ldrh	r1, [r7, #4]
 8001c1a:	88f8      	ldrh	r0, [r7, #6]
 8001c1c:	8c3b      	ldrh	r3, [r7, #32]
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	8bbb      	ldrh	r3, [r7, #28]
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f7ff ff4f 	bl	8001acc <ST7735_WriteChar>
        x += font.width;
 8001c2e:	7d3b      	ldrb	r3, [r7, #20]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4413      	add	r3, r2
 8001c36:	80fb      	strh	r3, [r7, #6]
        str++;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1c7      	bne.n	8001bd6 <ST7735_WriteString+0x1a>
 8001c46:	e000      	b.n	8001c4a <ST7735_WriteString+0x8e>
                break;
 8001c48:	bf00      	nop
    }

    ST7735_Unselect();
 8001c4a:	f7ff fdad 	bl	80017a8 <ST7735_Unselect>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c58:	b002      	add	sp, #8
 8001c5a:	4770      	bx	lr
 8001c5c:	2000027e 	.word	0x2000027e
 8001c60:	20000280 	.word	0x20000280

08001c64 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4623      	mov	r3, r4
 8001c74:	80fb      	strh	r3, [r7, #6]
 8001c76:	4603      	mov	r3, r0
 8001c78:	80bb      	strh	r3, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	807b      	strh	r3, [r7, #2]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4a37      	ldr	r2, [pc, #220]	; (8001d64 <ST7735_FillRectangle+0x100>)
 8001c86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	da66      	bge.n	8001d5c <ST7735_FillRectangle+0xf8>
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	4a35      	ldr	r2, [pc, #212]	; (8001d68 <ST7735_FillRectangle+0x104>)
 8001c92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	da60      	bge.n	8001d5c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <ST7735_FillRectangle+0x100>)
 8001ca2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	dd06      	ble.n	8001cb8 <ST7735_FillRectangle+0x54>
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <ST7735_FillRectangle+0x100>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001cb8:	88ba      	ldrh	r2, [r7, #4]
 8001cba:	883b      	ldrh	r3, [r7, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <ST7735_FillRectangle+0x104>)
 8001cc0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	dd06      	ble.n	8001cd6 <ST7735_FillRectangle+0x72>
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <ST7735_FillRectangle+0x104>)
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001cd6:	f7ff fd5b 	bl	8001790 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	b2d8      	uxtb	r0, r3
 8001cde:	88bb      	ldrh	r3, [r7, #4]
 8001ce0:	b2d9      	uxtb	r1, r3
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b2dc      	uxtb	r4, r3
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	883b      	ldrh	r3, [r7, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4622      	mov	r2, r4
 8001d04:	f7ff fdee 	bl	80018e4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001d08:	8c3b      	ldrh	r3, [r7, #32]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	733b      	strb	r3, [r7, #12]
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4813      	ldr	r0, [pc, #76]	; (8001d6c <ST7735_FillRectangle+0x108>)
 8001d1e:	f000 ffd5 	bl	8002ccc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001d22:	883b      	ldrh	r3, [r7, #0]
 8001d24:	80bb      	strh	r3, [r7, #4]
 8001d26:	e013      	b.n	8001d50 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	e00a      	b.n	8001d44 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001d2e:	f107 010c 	add.w	r1, r7, #12
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	2202      	movs	r2, #2
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <ST7735_FillRectangle+0x10c>)
 8001d3a:	f001 fc8e 	bl	800365a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	80fb      	strh	r3, [r7, #6]
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f1      	bne.n	8001d2e <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	80bb      	strh	r3, [r7, #4]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e8      	bne.n	8001d28 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8001d56:	f7ff fd27 	bl	80017a8 <ST7735_Unselect>
 8001d5a:	e000      	b.n	8001d5e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8001d5c:	bf00      	nop
}
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	2000027e 	.word	0x2000027e
 8001d68:	20000280 	.word	0x20000280
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	200002e0 	.word	0x200002e0

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b099      	sub	sp, #100	; 0x64
 8001d78:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7a:	f000 fc59 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f8ed 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d82:	f000 f9c3 	bl	800210c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d86:	f000 f953 	bl	8002030 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001d8a:	f000 f987 	bl	800209c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(1);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7ff fdf0 	bl	8001974 <ST7735_Init>
  fillScreen(BLACK);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff f8ad 	bl	8000ef4 <fillScreen>
  NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi1);
 8001d9a:	4c5e      	ldr	r4, [pc, #376]	; (8001f14 <main+0x1a0>)
 8001d9c:	4668      	mov	r0, sp
 8001d9e:	1d23      	adds	r3, r4, #4
 8001da0:	2254      	movs	r2, #84	; 0x54
 8001da2:	4619      	mov	r1, r3
 8001da4:	f002 fac4 	bl	8004330 <memcpy>
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	2208      	movs	r2, #8
 8001dac:	2110      	movs	r1, #16
 8001dae:	485a      	ldr	r0, [pc, #360]	; (8001f18 <main+0x1a4>)
 8001db0:	f7ff f9dc 	bl	800116c <NRF24_begin>
  NRF24_setChannel(120);
 8001db4:	2078      	movs	r0, #120	; 0x78
 8001db6:	f7ff fb74 	bl	80014a2 <NRF24_setChannel>
  NRF24_setPayloadSize(20);
 8001dba:	2014      	movs	r0, #20
 8001dbc:	f7ff fb86 	bl	80014cc <NRF24_setPayloadSize>
  NRF24_setAutoAck(false);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fbc7 	bl	8001554 <NRF24_setAutoAck>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 8001dc6:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <main+0x1a8>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff faff 	bl	80013d0 <NRF24_openReadingPipe>
  NRF24_startListening();
 8001dd2:	f7ff faa9 	bl	8001328 <NRF24_startListening>
    /* USER CODE BEGIN 3 */




	  if(NRF24_available())
 8001dd6:	f7ff facd 	bl	8001374 <NRF24_available>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <main+0x88>
	  {
		  REC = NRF24_read(RXPAKET,sizeof(RXPAKET));
 8001de0:	2114      	movs	r1, #20
 8001de2:	484f      	ldr	r0, [pc, #316]	; (8001f20 <main+0x1ac>)
 8001de4:	f7ff face 	bl	8001384 <NRF24_read>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <main+0x1b0>)
 8001dee:	701a      	strb	r2, [r3, #0]
		  PACKAGECOUNTER++;
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <main+0x1b4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <main+0x1b4>)
 8001dfa:	701a      	strb	r2, [r3, #0]
	  }

	  if(TUR==50)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b32      	cmp	r3, #50	; 0x32
 8001e00:	f040 8081 	bne.w	8001f06 <main+0x192>
	  {
	  	TUR=0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	71fb      	strb	r3, [r7, #7]
	  	LASTPACKAGECOUNT = PACKAGECOUNTER;
 8001e08:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <main+0x1b4>)
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <main+0x1b8>)
 8001e0e:	701a      	strb	r2, [r3, #0]
	  	PACKAGECOUNTER=0;
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <main+0x1b4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
	  	processBuffer(RXPAKET, &gx, &gy, &deg1, &deg2);
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <main+0x1bc>)
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <main+0x1c0>)
 8001e1c:	4a46      	ldr	r2, [pc, #280]	; (8001f38 <main+0x1c4>)
 8001e1e:	4947      	ldr	r1, [pc, #284]	; (8001f3c <main+0x1c8>)
 8001e20:	483f      	ldr	r0, [pc, #252]	; (8001f20 <main+0x1ac>)
 8001e22:	f000 f9bb 	bl	800219c <processBuffer>
	  	fillScreen(BLACK);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff f864 	bl	8000ef4 <fillScreen>
	  	if(LASTPACKAGECOUNT ==0)
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <main+0x1b8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d114      	bne.n	8001e5e <main+0xea>
	  	{
	  		sprintf(TEXT,"NO CONNECTION",LASTPACKAGECOUNT);
 8001e34:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <main+0x1b8>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4941      	ldr	r1, [pc, #260]	; (8001f40 <main+0x1cc>)
 8001e3c:	4841      	ldr	r0, [pc, #260]	; (8001f44 <main+0x1d0>)
 8001e3e:	f002 fef7 	bl	8004c30 <siprintf>
	  		ST7735_WriteString(0, 0, TEXT, Font_11x18, BLUE,BLACK);
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <main+0x1d4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	9202      	str	r2, [sp, #8]
 8001e48:	221f      	movs	r2, #31
 8001e4a:	9201      	str	r2, [sp, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	9200      	str	r2, [sp, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3c      	ldr	r2, [pc, #240]	; (8001f44 <main+0x1d0>)
 8001e54:	2100      	movs	r1, #0
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff feb0 	bl	8001bbc <ST7735_WriteString>
 8001e5c:	e053      	b.n	8001f06 <main+0x192>
	  	}else
	  	{
	  		sprintf(TEXT,"PPS :%d",LASTPACKAGECOUNT);
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <main+0x1b8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4939      	ldr	r1, [pc, #228]	; (8001f4c <main+0x1d8>)
 8001e66:	4837      	ldr	r0, [pc, #220]	; (8001f44 <main+0x1d0>)
 8001e68:	f002 fee2 	bl	8004c30 <siprintf>
	  		ST7735_WriteString(0, 0, TEXT, Font_11x18, BLUE,BLACK);
 8001e6c:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <main+0x1d4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	9202      	str	r2, [sp, #8]
 8001e72:	221f      	movs	r2, #31
 8001e74:	9201      	str	r2, [sp, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <main+0x1d0>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fe9b 	bl	8001bbc <ST7735_WriteString>
	  		sprintf(TEXT,"Gx|y :%d-%d",gx,gy);
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <main+0x1c8>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <main+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4930      	ldr	r1, [pc, #192]	; (8001f50 <main+0x1dc>)
 8001e90:	482c      	ldr	r0, [pc, #176]	; (8001f44 <main+0x1d0>)
 8001e92:	f002 fecd 	bl	8004c30 <siprintf>
	  		ST7735_WriteString(0, 19, TEXT, Font_11x18, BLUE,BLACK);
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <main+0x1d4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	221f      	movs	r2, #31
 8001e9e:	9201      	str	r2, [sp, #4]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <main+0x1d0>)
 8001ea8:	2113      	movs	r1, #19
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff fe86 	bl	8001bbc <ST7735_WriteString>
	  		sprintf(TEXT,"Deg1|2 :%d-%d",deg1,deg2);
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <main+0x1c0>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <main+0x1bc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4926      	ldr	r1, [pc, #152]	; (8001f54 <main+0x1e0>)
 8001eba:	4822      	ldr	r0, [pc, #136]	; (8001f44 <main+0x1d0>)
 8001ebc:	f002 feb8 	bl	8004c30 <siprintf>
	  		ST7735_WriteString(0, 39, TEXT, Font_11x18, BLUE,BLACK);
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <main+0x1d4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	9202      	str	r2, [sp, #8]
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	9201      	str	r2, [sp, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	9200      	str	r2, [sp, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <main+0x1d0>)
 8001ed2:	2127      	movs	r1, #39	; 0x27
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fe71 	bl	8001bbc <ST7735_WriteString>
	  		sprintf(TEXT,"----DACIA----",deg1,deg2);
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <main+0x1c0>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <main+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	491d      	ldr	r1, [pc, #116]	; (8001f58 <main+0x1e4>)
 8001ee4:	4817      	ldr	r0, [pc, #92]	; (8001f44 <main+0x1d0>)
 8001ee6:	f002 fea3 	bl	8004c30 <siprintf>
	  		ST7735_WriteString(0, 60, TEXT, Font_11x18, GREEN,BLACK);
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <main+0x1d4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	9202      	str	r2, [sp, #8]
 8001ef0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001ef4:	9201      	str	r2, [sp, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <main+0x1d0>)
 8001efe:	213c      	movs	r1, #60	; 0x3c
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fe5b 	bl	8001bbc <ST7735_WriteString>
	  	}
	  }
	  TUR++;
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	71fb      	strb	r3, [r7, #7]



	  HAL_Delay(20);
 8001f0c:	2014      	movs	r0, #20
 8001f0e:	f000 fc01 	bl	8002714 <HAL_Delay>
	  if(NRF24_available())
 8001f12:	e760      	b.n	8001dd6 <main+0x62>
 8001f14:	20000288 	.word	0x20000288
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000338 	.word	0x20000338
 8001f24:	2000034e 	.word	0x2000034e
 8001f28:	2000034c 	.word	0x2000034c
 8001f2c:	2000034d 	.word	0x2000034d
 8001f30:	2000035c 	.word	0x2000035c
 8001f34:	20000358 	.word	0x20000358
 8001f38:	20000354 	.word	0x20000354
 8001f3c:	20000350 	.word	0x20000350
 8001f40:	08007238 	.word	0x08007238
 8001f44:	20000360 	.word	0x20000360
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	08007248 	.word	0x08007248
 8001f50:	08007250 	.word	0x08007250
 8001f54:	0800725c 	.word	0x0800725c
 8001f58:	0800726c 	.word	0x0800726c

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b094      	sub	sp, #80	; 0x50
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	2230      	movs	r2, #48	; 0x30
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 f9ee 	bl	800434c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <SystemClock_Config+0xcc>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <SystemClock_Config+0xcc>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <SystemClock_Config+0xcc>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <SystemClock_Config+0xd0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <SystemClock_Config+0xd0>)
 8001faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <SystemClock_Config+0xd0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fd4:	2348      	movs	r3, #72	; 0x48
 8001fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe0:	f107 0320 	add.w	r3, r7, #32
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fe8b 	bl	8002d00 <HAL_RCC_OscConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ff0:	f000 f8ce 	bl	8002190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	2101      	movs	r1, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f001 f8ed 	bl	80031f0 <HAL_RCC_ClockConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800201c:	f000 f8b8 	bl	8002190 <Error_Handler>
  }
}
 8002020:	bf00      	nop
 8002022:	3750      	adds	r7, #80	; 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000

08002030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_SPI1_Init+0x64>)
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <MX_SPI1_Init+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_SPI1_Init+0x64>)
 800203c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_SPI1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_SPI1_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_SPI1_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_SPI1_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_SPI1_Init+0x64>)
 800205c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_SPI1_Init+0x64>)
 8002064:	2208      	movs	r2, #8
 8002066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_SPI1_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_SPI1_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_SPI1_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_SPI1_Init+0x64>)
 800207c:	220a      	movs	r2, #10
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_SPI1_Init+0x64>)
 8002082:	f001 fa61 	bl	8003548 <HAL_SPI_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800208c:	f000 f880 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000288 	.word	0x20000288
 8002098:	40013000 	.word	0x40013000

0800209c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_SPI2_Init+0x68>)
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <MX_SPI2_Init+0x6c>)
 80020a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <MX_SPI2_Init+0x68>)
 80020a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MX_SPI2_Init+0x68>)
 80020b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MX_SPI2_Init+0x68>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_SPI2_Init+0x68>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_SPI2_Init+0x68>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_SPI2_Init+0x68>)
 80020ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_SPI2_Init+0x68>)
 80020d2:	2210      	movs	r2, #16
 80020d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_SPI2_Init+0x68>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_SPI2_Init+0x68>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_SPI2_Init+0x68>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_SPI2_Init+0x68>)
 80020ea:	220a      	movs	r2, #10
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_SPI2_Init+0x68>)
 80020f0:	f001 fa2a 	bl	8003548 <HAL_SPI_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80020fa:	f000 f849 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002e0 	.word	0x200002e0
 8002108:	40003800 	.word	0x40003800

0800210c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_GPIO_Init+0x7c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a17      	ldr	r2, [pc, #92]	; (8002188 <MX_GPIO_Init+0x7c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <MX_GPIO_Init+0x7c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_GPIO_Init+0x7c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <MX_GPIO_Init+0x7c>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_GPIO_Init+0x7c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CE_Pin
 800215a:	2200      	movs	r2, #0
 800215c:	211f      	movs	r1, #31
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <MX_GPIO_Init+0x80>)
 8002160:	f000 fdb4 	bl	8002ccc <HAL_GPIO_WritePin>
                          |CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 CE_Pin
                           CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CE_Pin
 8002164:	231f      	movs	r3, #31
 8002166:	60fb      	str	r3, [r7, #12]
                          |CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_GPIO_Init+0x80>)
 800217c:	f000 fc22 	bl	80029c4 <HAL_GPIO_Init>

}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002198:	e7fe      	b.n	8002198 <Error_Handler+0x8>
	...

0800219c <processBuffer>:
#include "parcala.h"
char PARTICALBUFFER[5];
int x, y, z,q;
int startindex=1;
void processBuffer(char *BUFFERR,int *x,int *y,int *z,int *q)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
	startindex=1;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <processBuffer+0xc4>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
    for (uint8_t BUFFERINDEX = 0; BUFFERINDEX < 4; BUFFERINDEX++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]
 80021b4:	e04c      	b.n	8002250 <processBuffer+0xb4>
    {
        for (uint8_t i = startindex; i < 20; i++)
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <processBuffer+0xc4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	75bb      	strb	r3, [r7, #22]
 80021bc:	e017      	b.n	80021ee <processBuffer+0x52>
        {
            if (BUFFERR[i] == '#')
 80021be:	7dbb      	ldrb	r3, [r7, #22]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b23      	cmp	r3, #35	; 0x23
 80021c8:	d104      	bne.n	80021d4 <processBuffer+0x38>
            {
                startindex = i+1;
 80021ca:	7dbb      	ldrb	r3, [r7, #22]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <processBuffer+0xc4>)
 80021d0:	6013      	str	r3, [r2, #0]
                break;
 80021d2:	e00f      	b.n	80021f4 <processBuffer+0x58>
            }
            else
            {
                PARTICALBUFFER[i - startindex] = BUFFERR[i];
 80021d4:	7dbb      	ldrb	r3, [r7, #22]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	441a      	add	r2, r3
 80021da:	7db9      	ldrb	r1, [r7, #22]
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <processBuffer+0xc4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	1acb      	subs	r3, r1, r3
 80021e2:	7811      	ldrb	r1, [r2, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <processBuffer+0xc8>)
 80021e6:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = startindex; i < 20; i++)
 80021e8:	7dbb      	ldrb	r3, [r7, #22]
 80021ea:	3301      	adds	r3, #1
 80021ec:	75bb      	strb	r3, [r7, #22]
 80021ee:	7dbb      	ldrb	r3, [r7, #22]
 80021f0:	2b13      	cmp	r3, #19
 80021f2:	d9e4      	bls.n	80021be <processBuffer+0x22>

            }
        }
        switch (BUFFERINDEX) {
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d826      	bhi.n	8002248 <processBuffer+0xac>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <processBuffer+0x64>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	0800221f 	.word	0x0800221f
 8002208:	0800222d 	.word	0x0800222d
 800220c:	0800223b 	.word	0x0800223b
			case 0:
				*x = atoi(PARTICALBUFFER);
 8002210:	4814      	ldr	r0, [pc, #80]	; (8002264 <processBuffer+0xc8>)
 8002212:	f002 f85f 	bl	80042d4 <atoi>
 8002216:	4602      	mov	r2, r0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	601a      	str	r2, [r3, #0]
				break;
 800221c:	e015      	b.n	800224a <processBuffer+0xae>
			case 1:
				*y = atoi(PARTICALBUFFER);
 800221e:	4811      	ldr	r0, [pc, #68]	; (8002264 <processBuffer+0xc8>)
 8002220:	f002 f858 	bl	80042d4 <atoi>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	601a      	str	r2, [r3, #0]
				break;
 800222a:	e00e      	b.n	800224a <processBuffer+0xae>
			case 2:
				*z = atoi(PARTICALBUFFER);
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <processBuffer+0xc8>)
 800222e:	f002 f851 	bl	80042d4 <atoi>
 8002232:	4602      	mov	r2, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	601a      	str	r2, [r3, #0]
				break;
 8002238:	e007      	b.n	800224a <processBuffer+0xae>
			case 3:
				*q = atoi(PARTICALBUFFER);
 800223a:	480a      	ldr	r0, [pc, #40]	; (8002264 <processBuffer+0xc8>)
 800223c:	f002 f84a 	bl	80042d4 <atoi>
 8002240:	4602      	mov	r2, r0
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	601a      	str	r2, [r3, #0]
				break;
 8002246:	e000      	b.n	800224a <processBuffer+0xae>
			default:
				break;
 8002248:	bf00      	nop
    for (uint8_t BUFFERINDEX = 0; BUFFERINDEX < 4; BUFFERINDEX++)
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	3301      	adds	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d9af      	bls.n	80021b6 <processBuffer+0x1a>
		}
    }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000010 	.word	0x20000010
 8002264:	2000036c 	.word	0x2000036c

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_MspInit+0x4c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_MspInit+0x4c>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227c:	6453      	str	r3, [r2, #68]	; 0x44
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_MspInit+0x4c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_MspInit+0x4c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <HAL_SPI_MspInit+0xf8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d134      	bne.n	8002344 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a34      	ldr	r2, [pc, #208]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 80022e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002312:	23e0      	movs	r3, #224	; 0xe0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002322:	2305      	movs	r3, #5
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	4822      	ldr	r0, [pc, #136]	; (80023b8 <HAL_SPI_MspInit+0x100>)
 800232e:	f000 fb49 	bl	80029c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2023      	movs	r0, #35	; 0x23
 8002338:	f000 faeb 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800233c:	2023      	movs	r0, #35	; 0x23
 800233e:	f000 fb04 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002342:	e031      	b.n	80023a8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_SPI_MspInit+0x104>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12c      	bne.n	80023a8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_SPI_MspInit+0xfc>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002386:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002398:	2305      	movs	r3, #5
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	4807      	ldr	r0, [pc, #28]	; (80023c0 <HAL_SPI_MspInit+0x108>)
 80023a4:	f000 fb0e 	bl	80029c4 <HAL_GPIO_Init>
}
 80023a8:	bf00      	nop
 80023aa:	3730      	adds	r7, #48	; 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40013000 	.word	0x40013000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40020400 	.word	0x40020400

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <NMI_Handler+0x4>

080023ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <MemManage_Handler+0x4>

080023d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f000 f960 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <SPI1_IRQHandler+0x10>)
 800241e:	f001 fd0b 	bl	8003e38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000288 	.word	0x20000288

0800242c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_kill>:

int _kill(int pid, int sig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002446:	f001 ff49 	bl	80042dc <__errno>
 800244a:	4603      	mov	r3, r0
 800244c:	2216      	movs	r2, #22
 800244e:	601a      	str	r2, [r3, #0]
  return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_exit>:

void _exit (int status)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ffe7 	bl	800243c <_kill>
  while (1) {}    /* Make sure we hang here */
 800246e:	e7fe      	b.n	800246e <_exit+0x12>

08002470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e00a      	b.n	8002498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002482:	f3af 8000 	nop.w
 8002486:	4601      	mov	r1, r0
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf0      	blt.n	8002482 <_read+0x12>
  }

  return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e009      	b.n	80024d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dbf1      	blt.n	80024bc <_write+0x12>
  }
  return len;
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_close>:

int _close(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250a:	605a      	str	r2, [r3, #4]
  return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_isatty>:

int _isatty(int file)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f001 feae 	bl	80042dc <__errno>
 8002580:	4603      	mov	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20010000 	.word	0x20010000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	20000374 	.word	0x20000374
 80025b4:	20000390 	.word	0x20000390

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f8:	4c0b      	ldr	r4, [pc, #44]	; (8002628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002606:	f7ff ffd7 	bl	80025b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f001 fe6d 	bl	80042e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7ff fbb1 	bl	8001d74 <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002614:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002620:	0800845c 	.word	0x0800845c
  ldr r2, =_sbss
 8002624:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002628:	2000038c 	.word	0x2000038c

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>
	...

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f94f 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fe00 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f967 	bl	8002966 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 f92f 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000014 	.word	0x20000014
 80026cc:	2000001c 	.word	0x2000001c
 80026d0:	20000018 	.word	0x20000018

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000001c 	.word	0x2000001c
 80026f8:	20000378 	.word	0x20000378

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000378 	.word	0x20000378

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000001c 	.word	0x2000001c

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d004      	beq.n	800299c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e00c      	b.n	80029b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2205      	movs	r2, #5
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e159      	b.n	8002c94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 8148 	bne.w	8002c8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d005      	beq.n	8002a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d130      	bne.n	8002a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0201 	and.w	r2, r3, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d017      	beq.n	8002ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d123      	bne.n	8002b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a2 	beq.w	8002c8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b57      	ldr	r3, [pc, #348]	; (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b66:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_GPIO_Init+0x2ec>)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_GPIO_Init+0x2f0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d019      	beq.n	8002bc6 <HAL_GPIO_Init+0x202>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a48      	ldr	r2, [pc, #288]	; (8002cb8 <HAL_GPIO_Init+0x2f4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0x1fe>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a47      	ldr	r2, [pc, #284]	; (8002cbc <HAL_GPIO_Init+0x2f8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00d      	beq.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a46      	ldr	r2, [pc, #280]	; (8002cc0 <HAL_GPIO_Init+0x2fc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <HAL_GPIO_Init+0x1f6>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_GPIO_Init+0x1f2>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e008      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd8:	4935      	ldr	r1, [pc, #212]	; (8002cb0 <HAL_GPIO_Init+0x2ec>)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c88:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	f67f aea2 	bls.w	80029e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e267      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d075      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d00c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d112      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b82      	ldr	r3, [pc, #520]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4b7e      	ldr	r3, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d157      	bne.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e242      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x74>
 8002d66:	4b76      	ldr	r3, [pc, #472]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a75      	ldr	r2, [pc, #468]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6f      	ldr	r2, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6c      	ldr	r2, [pc, #432]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d98:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a68      	ldr	r2, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fca0 	bl	80026fc <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff fc9c 	bl	80026fc <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e207      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7ff fc8c 	bl	80026fc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff fc88 	bl	80026fc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1f3      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b44      	ldr	r3, [pc, #272]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1c7      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4937      	ldr	r1, [pc, #220]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x244>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7ff fc41 	bl	80026fc <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7ff fc3d 	bl	80026fc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1a8      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4925      	ldr	r1, [pc, #148]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCC_OscConfig+0x244>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff fc20 	bl	80026fc <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff fc1c 	bl	80026fc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e187      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d036      	beq.n	8002f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_RCC_OscConfig+0x248>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7ff fc00 	bl	80026fc <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f00:	f7ff fbfc 	bl	80026fc <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e167      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
 8002f1e:	e01b      	b.n	8002f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x248>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7ff fbe9 	bl	80026fc <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e00e      	b.n	8002f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7ff fbe5 	bl	80026fc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d907      	bls.n	8002f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e150      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	42470000 	.word	0x42470000
 8002f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b88      	ldr	r3, [pc, #544]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ea      	bne.n	8002f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8097 	beq.w	8003094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b81      	ldr	r3, [pc, #516]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b7d      	ldr	r3, [pc, #500]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a7c      	ldr	r2, [pc, #496]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b7a      	ldr	r3, [pc, #488]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b77      	ldr	r3, [pc, #476]	; (8003174 <HAL_RCC_OscConfig+0x474>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b74      	ldr	r3, [pc, #464]	; (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a73      	ldr	r2, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7ff fba5 	bl	80026fc <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7ff fba1 	bl	80026fc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e10c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x2ea>
 8002fdc:	4b64      	ldr	r3, [pc, #400]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a63      	ldr	r2, [pc, #396]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x324>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x30c>
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a5e      	ldr	r2, [pc, #376]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffe:	4b5c      	ldr	r3, [pc, #368]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	4a5b      	ldr	r2, [pc, #364]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	; 0x70
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0x324>
 800300c:	4b58      	ldr	r3, [pc, #352]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a57      	ldr	r2, [pc, #348]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	4b55      	ldr	r3, [pc, #340]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7ff fb66 	bl	80026fc <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7ff fb62 	bl	80026fc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0cb      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ee      	beq.n	8003034 <HAL_RCC_OscConfig+0x334>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7ff fb50 	bl	80026fc <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7ff fb4c 	bl	80026fc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0b5      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003076:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ee      	bne.n	8003060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	4a38      	ldr	r2, [pc, #224]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003092:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a1 	beq.w	80031e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d05c      	beq.n	8003164 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d141      	bne.n	8003136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCC_OscConfig+0x478>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7ff fb20 	bl	80026fc <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff fb1c 	bl	80026fc <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e087      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	019b      	lsls	r3, r3, #6
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	3b01      	subs	r3, #1
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	491b      	ldr	r1, [pc, #108]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x478>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7ff faf5 	bl	80026fc <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7ff faf1 	bl	80026fc <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e05c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x416>
 8003134:	e054      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x478>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7ff fade 	bl	80026fc <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7ff fada 	bl	80026fc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e045      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_OscConfig+0x470>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x444>
 8003162:	e03d      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e038      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000
 8003178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x4ec>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d028      	beq.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d121      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d11a      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d111      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0cc      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b68      	ldr	r3, [pc, #416]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d90c      	bls.n	800322c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b8      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800325c:	4b53      	ldr	r3, [pc, #332]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a52      	ldr	r2, [pc, #328]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	494d      	ldr	r1, [pc, #308]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d044      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d119      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b3f      	ldr	r3, [pc, #252]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e067      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4934      	ldr	r1, [pc, #208]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7ff fa0c 	bl	80026fc <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7ff fa08 	bl	80026fc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e04f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d20c      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e032      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4916      	ldr	r1, [pc, #88]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003376:	f000 f821 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490a      	ldr	r1, [pc, #40]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f96c 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	0800805c 	.word	0x0800805c
 80033b4:	20000014 	.word	0x20000014
 80033b8:	20000018 	.word	0x20000018

080033bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b090      	sub	sp, #64	; 0x40
 80033c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033cc:	2300      	movs	r3, #0
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d4:	4b59      	ldr	r3, [pc, #356]	; (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d00d      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x40>
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	f200 80a1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x16c>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ee:	e09b      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_GetSysClockFreq+0x184>)
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033f4:	e09b      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f6:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033fa:	e098      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4b4f      	ldr	r3, [pc, #316]	; (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d028      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	2200      	movs	r2, #0
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	627a      	str	r2, [r7, #36]	; 0x24
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003424:	2100      	movs	r1, #0
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 8003428:	fb03 f201 	mul.w	r2, r3, r1
 800342c:	2300      	movs	r3, #0
 800342e:	fb00 f303 	mul.w	r3, r0, r3
 8003432:	4413      	add	r3, r2
 8003434:	4a43      	ldr	r2, [pc, #268]	; (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 8003436:	fba0 1202 	umull	r1, r2, r0, r2
 800343a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800343c:	460a      	mov	r2, r1
 800343e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003442:	4413      	add	r3, r2
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	2200      	movs	r2, #0
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	61fa      	str	r2, [r7, #28]
 800344e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003452:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003456:	f7fd fbaf 	bl	8000bb8 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4613      	mov	r3, r2
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003462:	e053      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003464:	4b35      	ldr	r3, [pc, #212]	; (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	2200      	movs	r2, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	617a      	str	r2, [r7, #20]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003476:	f04f 0b00 	mov.w	fp, #0
 800347a:	4652      	mov	r2, sl
 800347c:	465b      	mov	r3, fp
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	0159      	lsls	r1, r3, #5
 8003488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348c:	0150      	lsls	r0, r2, #5
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	ebb2 080a 	subs.w	r8, r2, sl
 8003496:	eb63 090b 	sbc.w	r9, r3, fp
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ae:	ebb2 0408 	subs.w	r4, r2, r8
 80034b2:	eb63 0509 	sbc.w	r5, r3, r9
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	00eb      	lsls	r3, r5, #3
 80034c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c4:	00e2      	lsls	r2, r4, #3
 80034c6:	4614      	mov	r4, r2
 80034c8:	461d      	mov	r5, r3
 80034ca:	eb14 030a 	adds.w	r3, r4, sl
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	eb45 030b 	adc.w	r3, r5, fp
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e2:	4629      	mov	r1, r5
 80034e4:	028b      	lsls	r3, r1, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ec:	4621      	mov	r1, r4
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	2200      	movs	r2, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	60fa      	str	r2, [r7, #12]
 80034fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003500:	f7fd fb5a 	bl	8000bb8 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800351c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetSysClockFreq+0x184>)
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003530:	4618      	mov	r0, r3
 8003532:	3740      	adds	r7, #64	; 0x40
 8003534:	46bd      	mov	sp, r7
 8003536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	017d7840 	.word	0x017d7840

08003548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07b      	b.n	8003652 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d009      	beq.n	8003580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
 8003572:	e005      	b.n	8003580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe fe8c 	bl	80022b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0104 	and.w	r1, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 0210 	and.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b088      	sub	sp, #32
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_SPI_Transmit+0x22>
 8003678:	2302      	movs	r3, #2
 800367a:	e126      	b.n	80038ca <HAL_SPI_Transmit+0x270>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003684:	f7ff f83a 	bl	80026fc <HAL_GetTick>
 8003688:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800369e:	e10b      	b.n	80038b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Transmit+0x52>
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036b0:	e102      	b.n	80038b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2203      	movs	r2, #3
 80036b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f8:	d10f      	bne.n	800371a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003718:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d007      	beq.n	8003738 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003740:	d14b      	bne.n	80037da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0xf6>
 800374a:	8afb      	ldrh	r3, [r7, #22]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d13e      	bne.n	80037ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003774:	e02b      	b.n	80037ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d112      	bne.n	80037aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80037a8:	e011      	b.n	80037ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037aa:	f7fe ffa7 	bl	80026fc <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d803      	bhi.n	80037c2 <HAL_SPI_Transmit+0x168>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d102      	bne.n	80037c8 <HAL_SPI_Transmit+0x16e>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037cc:	e074      	b.n	80038b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ce      	bne.n	8003776 <HAL_SPI_Transmit+0x11c>
 80037d8:	e04c      	b.n	8003874 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Transmit+0x18e>
 80037e2:	8afb      	ldrh	r3, [r7, #22]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d140      	bne.n	800386a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330c      	adds	r3, #12
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800380e:	e02c      	b.n	800386a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d113      	bne.n	8003846 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	86da      	strh	r2, [r3, #54]	; 0x36
 8003844:	e011      	b.n	800386a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003846:	f7fe ff59 	bl	80026fc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d803      	bhi.n	800385e <HAL_SPI_Transmit+0x204>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d102      	bne.n	8003864 <HAL_SPI_Transmit+0x20a>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003868:	e026      	b.n	80038b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1cd      	bne.n	8003810 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fce9 	bl	8004250 <SPI_EndRxTxTransaction>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e000      	b.n	80038b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b088      	sub	sp, #32
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ee:	d112      	bne.n	8003916 <HAL_SPI_Receive+0x44>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10e      	bne.n	8003916 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2204      	movs	r2, #4
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f8f1 	bl	8003af4 <HAL_SPI_TransmitReceive>
 8003912:	4603      	mov	r3, r0
 8003914:	e0ea      	b.n	8003aec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_SPI_Receive+0x52>
 8003920:	2302      	movs	r3, #2
 8003922:	e0e3      	b.n	8003aec <HAL_SPI_Receive+0x21a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392c:	f7fe fee6 	bl	80026fc <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003942:	e0ca      	b.n	8003ada <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_SPI_Receive+0x7e>
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003954:	e0c1      	b.n	8003ada <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2204      	movs	r2, #4
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399c:	d10f      	bne.n	80039be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d007      	beq.n	80039dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d162      	bne.n	8003aaa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039e4:	e02e      	b.n	8003a44 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d115      	bne.n	8003a20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f103 020c 	add.w	r2, r3, #12
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a1e:	e011      	b.n	8003a44 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a20:	f7fe fe6c 	bl	80026fc <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d803      	bhi.n	8003a38 <HAL_SPI_Receive+0x166>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d102      	bne.n	8003a3e <HAL_SPI_Receive+0x16c>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a42:	e04a      	b.n	8003ada <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1cb      	bne.n	80039e6 <HAL_SPI_Receive+0x114>
 8003a4e:	e031      	b.n	8003ab4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d113      	bne.n	8003a86 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a84:	e011      	b.n	8003aaa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a86:	f7fe fe39 	bl	80026fc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d803      	bhi.n	8003a9e <HAL_SPI_Receive+0x1cc>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d102      	bne.n	8003aa4 <HAL_SPI_Receive+0x1d2>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003aa8:	e017      	b.n	8003ada <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1cd      	bne.n	8003a50 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	6839      	ldr	r1, [r7, #0]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fb63 	bl	8004184 <SPI_EndRxTransaction>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
 8003ad6:	e000      	b.n	8003ada <HAL_SPI_Receive+0x208>
  }

error :
 8003ad8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	; 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b02:	2301      	movs	r3, #1
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x26>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e18a      	b.n	8003e30 <HAL_SPI_TransmitReceive+0x33c>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b22:	f7fe fdeb 	bl	80026fc <HAL_GetTick>
 8003b26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b38:	887b      	ldrh	r3, [r7, #2]
 8003b3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d00f      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x70>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4a:	d107      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x68>
 8003b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d003      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b62:	e15b      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x82>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x82>
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b7c:	e14e      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	887a      	ldrh	r2, [r7, #2]
 8003bba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d007      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d178      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x10a>
 8003bf8:	8b7b      	ldrh	r3, [r7, #26]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d166      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c22:	e053      	b.n	8003ccc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11b      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x176>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <HAL_SPI_TransmitReceive+0x176>
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d113      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	1c9a      	adds	r2, r3, #2
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d119      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x1b8>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d014      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	1c9a      	adds	r2, r3, #2
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cac:	f7fe fd26 	bl	80026fc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d807      	bhi.n	8003ccc <HAL_SPI_TransmitReceive+0x1d8>
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d003      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cca:	e0a7      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1a6      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x130>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1a1      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x130>
 8003ce0:	e07c      	b.n	8003ddc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x1fc>
 8003cea:	8b7b      	ldrh	r3, [r7, #26]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d16b      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d16:	e057      	b.n	8003dc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d11c      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x26c>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <HAL_SPI_TransmitReceive+0x26c>
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d114      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d119      	bne.n	8003da2 <HAL_SPI_TransmitReceive+0x2ae>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d014      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003da2:	f7fe fcab 	bl	80026fc <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d803      	bhi.n	8003dba <HAL_SPI_TransmitReceive+0x2c6>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x2cc>
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dc6:	e029      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1a2      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x224>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d19d      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa35 	bl	8004250 <SPI_EndRxTxTransaction>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003df8:	e010      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e000      	b.n	8003e1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3730      	adds	r7, #48	; 0x30
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10f      	bne.n	8003e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
    return;
 8003e7a:	e0d7      	b.n	800402c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_SPI_IRQHandler+0x66>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	09db      	lsrs	r3, r3, #7
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
    return;
 8003e9c:	e0c6      	b.n	800402c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_SPI_IRQHandler+0x8c>
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80b4 	beq.w	800402c <HAL_SPI_IRQHandler+0x1f4>
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80ad 	beq.w	800402c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d023      	beq.n	8003f26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d011      	beq.n	8003f0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	e00b      	b.n	8003f26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]
        return;
 8003f24:	e082      	b.n	800402c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d014      	beq.n	8003f5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00c      	beq.n	8003f82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f043 0208 	orr.w	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04f      	beq.n	800402a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_SPI_IRQHandler+0x17e>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d034      	beq.n	8004020 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0203 	bic.w	r2, r2, #3
 8003fc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d011      	beq.n	8003ff2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_SPI_IRQHandler+0x1fc>)
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fccf 	bl	800297e <HAL_DMA_Abort_IT>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	4a0d      	ldr	r2, [pc, #52]	; (8004034 <HAL_SPI_IRQHandler+0x1fc>)
 8004000:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fcb9 	bl	800297e <HAL_DMA_Abort_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800401e:	e003      	b.n	8004028 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f809 	bl	8004038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004026:	e000      	b.n	800402a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004028:	bf00      	nop
    return;
 800402a:	bf00      	nop
  }
}
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	0800404d 	.word	0x0800404d

08004038 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff ffe6 	bl	8004038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004084:	f7fe fb3a 	bl	80026fc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4413      	add	r3, r2
 8004092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004094:	f7fe fb32 	bl	80026fc <HAL_GetTick>
 8004098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	015b      	lsls	r3, r3, #5
 80040a0:	0d1b      	lsrs	r3, r3, #20
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040aa:	e054      	b.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d050      	beq.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040b4:	f7fe fb22 	bl	80026fc <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d902      	bls.n	80040ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d13d      	bne.n	8004146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e2:	d111      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ec:	d004      	beq.n	80040f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d107      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d10f      	bne.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e017      	b.n	8004176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3b01      	subs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d19b      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000014 	.word	0x20000014

08004184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004198:	d111      	bne.n	80041be <SPI_EndRxTransaction+0x3a>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d004      	beq.n	80041ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ac:	d107      	bne.n	80041be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d12a      	bne.n	800421e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d012      	beq.n	80041f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff ff49 	bl	8004074 <SPI_WaitFlagStateUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02d      	beq.n	8004244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e026      	b.n	8004246 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	2101      	movs	r1, #1
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff ff36 	bl	8004074 <SPI_WaitFlagStateUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01a      	beq.n	8004244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e013      	b.n	8004246 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	2101      	movs	r1, #1
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ff23 	bl	8004074 <SPI_WaitFlagStateUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e000      	b.n	8004246 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <SPI_EndRxTxTransaction+0x7c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <SPI_EndRxTxTransaction+0x80>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0d5b      	lsrs	r3, r3, #21
 8004268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800426c:	fb02 f303 	mul.w	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427a:	d112      	bne.n	80042a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2200      	movs	r2, #0
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fef4 	bl	8004074 <SPI_WaitFlagStateUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e00f      	b.n	80042c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	2b80      	cmp	r3, #128	; 0x80
 80042ba:	d0f2      	beq.n	80042a2 <SPI_EndRxTxTransaction+0x52>
 80042bc:	e000      	b.n	80042c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80042be:	bf00      	nop
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000014 	.word	0x20000014
 80042d0:	165e9f81 	.word	0x165e9f81

080042d4 <atoi>:
 80042d4:	220a      	movs	r2, #10
 80042d6:	2100      	movs	r1, #0
 80042d8:	f000 bd4c 	b.w	8004d74 <strtol>

080042dc <__errno>:
 80042dc:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <__errno+0x8>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000020 	.word	0x20000020

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4d0d      	ldr	r5, [pc, #52]	; (8004320 <__libc_init_array+0x38>)
 80042ec:	4c0d      	ldr	r4, [pc, #52]	; (8004324 <__libc_init_array+0x3c>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	2600      	movs	r6, #0
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	4d0b      	ldr	r5, [pc, #44]	; (8004328 <__libc_init_array+0x40>)
 80042fa:	4c0c      	ldr	r4, [pc, #48]	; (800432c <__libc_init_array+0x44>)
 80042fc:	f002 ff8e 	bl	800721c <_init>
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	2600      	movs	r6, #0
 8004306:	42a6      	cmp	r6, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004310:	4798      	blx	r3
 8004312:	3601      	adds	r6, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f855 3b04 	ldr.w	r3, [r5], #4
 800431a:	4798      	blx	r3
 800431c:	3601      	adds	r6, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	08008454 	.word	0x08008454
 8004324:	08008454 	.word	0x08008454
 8004328:	08008454 	.word	0x08008454
 800432c:	08008458 	.word	0x08008458

08004330 <memcpy>:
 8004330:	440a      	add	r2, r1
 8004332:	4291      	cmp	r1, r2
 8004334:	f100 33ff 	add.w	r3, r0, #4294967295
 8004338:	d100      	bne.n	800433c <memcpy+0xc>
 800433a:	4770      	bx	lr
 800433c:	b510      	push	{r4, lr}
 800433e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004346:	4291      	cmp	r1, r2
 8004348:	d1f9      	bne.n	800433e <memcpy+0xe>
 800434a:	bd10      	pop	{r4, pc}

0800434c <memset>:
 800434c:	4402      	add	r2, r0
 800434e:	4603      	mov	r3, r0
 8004350:	4293      	cmp	r3, r2
 8004352:	d100      	bne.n	8004356 <memset+0xa>
 8004354:	4770      	bx	lr
 8004356:	f803 1b01 	strb.w	r1, [r3], #1
 800435a:	e7f9      	b.n	8004350 <memset+0x4>

0800435c <__cvt>:
 800435c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	ec55 4b10 	vmov	r4, r5, d0
 8004364:	2d00      	cmp	r5, #0
 8004366:	460e      	mov	r6, r1
 8004368:	4619      	mov	r1, r3
 800436a:	462b      	mov	r3, r5
 800436c:	bfbb      	ittet	lt
 800436e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004372:	461d      	movlt	r5, r3
 8004374:	2300      	movge	r3, #0
 8004376:	232d      	movlt	r3, #45	; 0x2d
 8004378:	700b      	strb	r3, [r1, #0]
 800437a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800437c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004380:	4691      	mov	r9, r2
 8004382:	f023 0820 	bic.w	r8, r3, #32
 8004386:	bfbc      	itt	lt
 8004388:	4622      	movlt	r2, r4
 800438a:	4614      	movlt	r4, r2
 800438c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004390:	d005      	beq.n	800439e <__cvt+0x42>
 8004392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004396:	d100      	bne.n	800439a <__cvt+0x3e>
 8004398:	3601      	adds	r6, #1
 800439a:	2102      	movs	r1, #2
 800439c:	e000      	b.n	80043a0 <__cvt+0x44>
 800439e:	2103      	movs	r1, #3
 80043a0:	ab03      	add	r3, sp, #12
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	ab02      	add	r3, sp, #8
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	ec45 4b10 	vmov	d0, r4, r5
 80043ac:	4653      	mov	r3, sl
 80043ae:	4632      	mov	r2, r6
 80043b0:	f000 fd76 	bl	8004ea0 <_dtoa_r>
 80043b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043b8:	4607      	mov	r7, r0
 80043ba:	d102      	bne.n	80043c2 <__cvt+0x66>
 80043bc:	f019 0f01 	tst.w	r9, #1
 80043c0:	d022      	beq.n	8004408 <__cvt+0xac>
 80043c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043c6:	eb07 0906 	add.w	r9, r7, r6
 80043ca:	d110      	bne.n	80043ee <__cvt+0x92>
 80043cc:	783b      	ldrb	r3, [r7, #0]
 80043ce:	2b30      	cmp	r3, #48	; 0x30
 80043d0:	d10a      	bne.n	80043e8 <__cvt+0x8c>
 80043d2:	2200      	movs	r2, #0
 80043d4:	2300      	movs	r3, #0
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fc fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80043de:	b918      	cbnz	r0, 80043e8 <__cvt+0x8c>
 80043e0:	f1c6 0601 	rsb	r6, r6, #1
 80043e4:	f8ca 6000 	str.w	r6, [sl]
 80043e8:	f8da 3000 	ldr.w	r3, [sl]
 80043ec:	4499      	add	r9, r3
 80043ee:	2200      	movs	r2, #0
 80043f0:	2300      	movs	r3, #0
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fc fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80043fa:	b108      	cbz	r0, 8004400 <__cvt+0xa4>
 80043fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004400:	2230      	movs	r2, #48	; 0x30
 8004402:	9b03      	ldr	r3, [sp, #12]
 8004404:	454b      	cmp	r3, r9
 8004406:	d307      	bcc.n	8004418 <__cvt+0xbc>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800440c:	1bdb      	subs	r3, r3, r7
 800440e:	4638      	mov	r0, r7
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	b004      	add	sp, #16
 8004414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004418:	1c59      	adds	r1, r3, #1
 800441a:	9103      	str	r1, [sp, #12]
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e7f0      	b.n	8004402 <__cvt+0xa6>

08004420 <__exponent>:
 8004420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004422:	4603      	mov	r3, r0
 8004424:	2900      	cmp	r1, #0
 8004426:	bfb8      	it	lt
 8004428:	4249      	neglt	r1, r1
 800442a:	f803 2b02 	strb.w	r2, [r3], #2
 800442e:	bfb4      	ite	lt
 8004430:	222d      	movlt	r2, #45	; 0x2d
 8004432:	222b      	movge	r2, #43	; 0x2b
 8004434:	2909      	cmp	r1, #9
 8004436:	7042      	strb	r2, [r0, #1]
 8004438:	dd2a      	ble.n	8004490 <__exponent+0x70>
 800443a:	f10d 0407 	add.w	r4, sp, #7
 800443e:	46a4      	mov	ip, r4
 8004440:	270a      	movs	r7, #10
 8004442:	46a6      	mov	lr, r4
 8004444:	460a      	mov	r2, r1
 8004446:	fb91 f6f7 	sdiv	r6, r1, r7
 800444a:	fb07 1516 	mls	r5, r7, r6, r1
 800444e:	3530      	adds	r5, #48	; 0x30
 8004450:	2a63      	cmp	r2, #99	; 0x63
 8004452:	f104 34ff 	add.w	r4, r4, #4294967295
 8004456:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800445a:	4631      	mov	r1, r6
 800445c:	dcf1      	bgt.n	8004442 <__exponent+0x22>
 800445e:	3130      	adds	r1, #48	; 0x30
 8004460:	f1ae 0502 	sub.w	r5, lr, #2
 8004464:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004468:	1c44      	adds	r4, r0, #1
 800446a:	4629      	mov	r1, r5
 800446c:	4561      	cmp	r1, ip
 800446e:	d30a      	bcc.n	8004486 <__exponent+0x66>
 8004470:	f10d 0209 	add.w	r2, sp, #9
 8004474:	eba2 020e 	sub.w	r2, r2, lr
 8004478:	4565      	cmp	r5, ip
 800447a:	bf88      	it	hi
 800447c:	2200      	movhi	r2, #0
 800447e:	4413      	add	r3, r2
 8004480:	1a18      	subs	r0, r3, r0
 8004482:	b003      	add	sp, #12
 8004484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800448a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800448e:	e7ed      	b.n	800446c <__exponent+0x4c>
 8004490:	2330      	movs	r3, #48	; 0x30
 8004492:	3130      	adds	r1, #48	; 0x30
 8004494:	7083      	strb	r3, [r0, #2]
 8004496:	70c1      	strb	r1, [r0, #3]
 8004498:	1d03      	adds	r3, r0, #4
 800449a:	e7f1      	b.n	8004480 <__exponent+0x60>

0800449c <_printf_float>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	ed2d 8b02 	vpush	{d8}
 80044a4:	b08d      	sub	sp, #52	; 0x34
 80044a6:	460c      	mov	r4, r1
 80044a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80044ac:	4616      	mov	r6, r2
 80044ae:	461f      	mov	r7, r3
 80044b0:	4605      	mov	r5, r0
 80044b2:	f001 fae3 	bl	8005a7c <_localeconv_r>
 80044b6:	f8d0 a000 	ldr.w	sl, [r0]
 80044ba:	4650      	mov	r0, sl
 80044bc:	f7fb fe90 	bl	80001e0 <strlen>
 80044c0:	2300      	movs	r3, #0
 80044c2:	930a      	str	r3, [sp, #40]	; 0x28
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	f8d8 3000 	ldr.w	r3, [r8]
 80044cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80044d0:	3307      	adds	r3, #7
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	f103 0208 	add.w	r2, r3, #8
 80044da:	f8c8 2000 	str.w	r2, [r8]
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80044ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80044f4:	ee08 0a10 	vmov	s16, r0
 80044f8:	4b9f      	ldr	r3, [pc, #636]	; (8004778 <_printf_float+0x2dc>)
 80044fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	f7fc fb1b 	bl	8000b3c <__aeabi_dcmpun>
 8004506:	bb88      	cbnz	r0, 800456c <_printf_float+0xd0>
 8004508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800450c:	4b9a      	ldr	r3, [pc, #616]	; (8004778 <_printf_float+0x2dc>)
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	f7fc faf5 	bl	8000b00 <__aeabi_dcmple>
 8004516:	bb48      	cbnz	r0, 800456c <_printf_float+0xd0>
 8004518:	2200      	movs	r2, #0
 800451a:	2300      	movs	r3, #0
 800451c:	4640      	mov	r0, r8
 800451e:	4649      	mov	r1, r9
 8004520:	f7fc fae4 	bl	8000aec <__aeabi_dcmplt>
 8004524:	b110      	cbz	r0, 800452c <_printf_float+0x90>
 8004526:	232d      	movs	r3, #45	; 0x2d
 8004528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452c:	4b93      	ldr	r3, [pc, #588]	; (800477c <_printf_float+0x2e0>)
 800452e:	4894      	ldr	r0, [pc, #592]	; (8004780 <_printf_float+0x2e4>)
 8004530:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004534:	bf94      	ite	ls
 8004536:	4698      	movls	r8, r3
 8004538:	4680      	movhi	r8, r0
 800453a:	2303      	movs	r3, #3
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	9b05      	ldr	r3, [sp, #20]
 8004540:	f023 0204 	bic.w	r2, r3, #4
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	f04f 0900 	mov.w	r9, #0
 800454a:	9700      	str	r7, [sp, #0]
 800454c:	4633      	mov	r3, r6
 800454e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004550:	4621      	mov	r1, r4
 8004552:	4628      	mov	r0, r5
 8004554:	f000 f9d8 	bl	8004908 <_printf_common>
 8004558:	3001      	adds	r0, #1
 800455a:	f040 8090 	bne.w	800467e <_printf_float+0x1e2>
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	b00d      	add	sp, #52	; 0x34
 8004564:	ecbd 8b02 	vpop	{d8}
 8004568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456c:	4642      	mov	r2, r8
 800456e:	464b      	mov	r3, r9
 8004570:	4640      	mov	r0, r8
 8004572:	4649      	mov	r1, r9
 8004574:	f7fc fae2 	bl	8000b3c <__aeabi_dcmpun>
 8004578:	b140      	cbz	r0, 800458c <_printf_float+0xf0>
 800457a:	464b      	mov	r3, r9
 800457c:	2b00      	cmp	r3, #0
 800457e:	bfbc      	itt	lt
 8004580:	232d      	movlt	r3, #45	; 0x2d
 8004582:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004586:	487f      	ldr	r0, [pc, #508]	; (8004784 <_printf_float+0x2e8>)
 8004588:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <_printf_float+0x2ec>)
 800458a:	e7d1      	b.n	8004530 <_printf_float+0x94>
 800458c:	6863      	ldr	r3, [r4, #4]
 800458e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004592:	9206      	str	r2, [sp, #24]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	d13f      	bne.n	8004618 <_printf_float+0x17c>
 8004598:	2306      	movs	r3, #6
 800459a:	6063      	str	r3, [r4, #4]
 800459c:	9b05      	ldr	r3, [sp, #20]
 800459e:	6861      	ldr	r1, [r4, #4]
 80045a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80045a4:	2300      	movs	r3, #0
 80045a6:	9303      	str	r3, [sp, #12]
 80045a8:	ab0a      	add	r3, sp, #40	; 0x28
 80045aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80045ae:	ab09      	add	r3, sp, #36	; 0x24
 80045b0:	ec49 8b10 	vmov	d0, r8, r9
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6022      	str	r2, [r4, #0]
 80045b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045bc:	4628      	mov	r0, r5
 80045be:	f7ff fecd 	bl	800435c <__cvt>
 80045c2:	9b06      	ldr	r3, [sp, #24]
 80045c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045c6:	2b47      	cmp	r3, #71	; 0x47
 80045c8:	4680      	mov	r8, r0
 80045ca:	d108      	bne.n	80045de <_printf_float+0x142>
 80045cc:	1cc8      	adds	r0, r1, #3
 80045ce:	db02      	blt.n	80045d6 <_printf_float+0x13a>
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	4299      	cmp	r1, r3
 80045d4:	dd41      	ble.n	800465a <_printf_float+0x1be>
 80045d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80045da:	fa5f fb8b 	uxtb.w	fp, fp
 80045de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045e2:	d820      	bhi.n	8004626 <_printf_float+0x18a>
 80045e4:	3901      	subs	r1, #1
 80045e6:	465a      	mov	r2, fp
 80045e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045ec:	9109      	str	r1, [sp, #36]	; 0x24
 80045ee:	f7ff ff17 	bl	8004420 <__exponent>
 80045f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045f4:	1813      	adds	r3, r2, r0
 80045f6:	2a01      	cmp	r2, #1
 80045f8:	4681      	mov	r9, r0
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	dc02      	bgt.n	8004604 <_printf_float+0x168>
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	07d2      	lsls	r2, r2, #31
 8004602:	d501      	bpl.n	8004608 <_printf_float+0x16c>
 8004604:	3301      	adds	r3, #1
 8004606:	6123      	str	r3, [r4, #16]
 8004608:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800460c:	2b00      	cmp	r3, #0
 800460e:	d09c      	beq.n	800454a <_printf_float+0xae>
 8004610:	232d      	movs	r3, #45	; 0x2d
 8004612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004616:	e798      	b.n	800454a <_printf_float+0xae>
 8004618:	9a06      	ldr	r2, [sp, #24]
 800461a:	2a47      	cmp	r2, #71	; 0x47
 800461c:	d1be      	bne.n	800459c <_printf_float+0x100>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1bc      	bne.n	800459c <_printf_float+0x100>
 8004622:	2301      	movs	r3, #1
 8004624:	e7b9      	b.n	800459a <_printf_float+0xfe>
 8004626:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800462a:	d118      	bne.n	800465e <_printf_float+0x1c2>
 800462c:	2900      	cmp	r1, #0
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	dd0b      	ble.n	800464a <_printf_float+0x1ae>
 8004632:	6121      	str	r1, [r4, #16]
 8004634:	b913      	cbnz	r3, 800463c <_printf_float+0x1a0>
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	07d0      	lsls	r0, r2, #31
 800463a:	d502      	bpl.n	8004642 <_printf_float+0x1a6>
 800463c:	3301      	adds	r3, #1
 800463e:	440b      	add	r3, r1
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	65a1      	str	r1, [r4, #88]	; 0x58
 8004644:	f04f 0900 	mov.w	r9, #0
 8004648:	e7de      	b.n	8004608 <_printf_float+0x16c>
 800464a:	b913      	cbnz	r3, 8004652 <_printf_float+0x1b6>
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	07d2      	lsls	r2, r2, #31
 8004650:	d501      	bpl.n	8004656 <_printf_float+0x1ba>
 8004652:	3302      	adds	r3, #2
 8004654:	e7f4      	b.n	8004640 <_printf_float+0x1a4>
 8004656:	2301      	movs	r3, #1
 8004658:	e7f2      	b.n	8004640 <_printf_float+0x1a4>
 800465a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800465e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004660:	4299      	cmp	r1, r3
 8004662:	db05      	blt.n	8004670 <_printf_float+0x1d4>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	6121      	str	r1, [r4, #16]
 8004668:	07d8      	lsls	r0, r3, #31
 800466a:	d5ea      	bpl.n	8004642 <_printf_float+0x1a6>
 800466c:	1c4b      	adds	r3, r1, #1
 800466e:	e7e7      	b.n	8004640 <_printf_float+0x1a4>
 8004670:	2900      	cmp	r1, #0
 8004672:	bfd4      	ite	le
 8004674:	f1c1 0202 	rsble	r2, r1, #2
 8004678:	2201      	movgt	r2, #1
 800467a:	4413      	add	r3, r2
 800467c:	e7e0      	b.n	8004640 <_printf_float+0x1a4>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	055a      	lsls	r2, r3, #21
 8004682:	d407      	bmi.n	8004694 <_printf_float+0x1f8>
 8004684:	6923      	ldr	r3, [r4, #16]
 8004686:	4642      	mov	r2, r8
 8004688:	4631      	mov	r1, r6
 800468a:	4628      	mov	r0, r5
 800468c:	47b8      	blx	r7
 800468e:	3001      	adds	r0, #1
 8004690:	d12c      	bne.n	80046ec <_printf_float+0x250>
 8004692:	e764      	b.n	800455e <_printf_float+0xc2>
 8004694:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004698:	f240 80e0 	bls.w	800485c <_printf_float+0x3c0>
 800469c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046a0:	2200      	movs	r2, #0
 80046a2:	2300      	movs	r3, #0
 80046a4:	f7fc fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d034      	beq.n	8004716 <_printf_float+0x27a>
 80046ac:	4a37      	ldr	r2, [pc, #220]	; (800478c <_printf_float+0x2f0>)
 80046ae:	2301      	movs	r3, #1
 80046b0:	4631      	mov	r1, r6
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af51 	beq.w	800455e <_printf_float+0xc2>
 80046bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046c0:	429a      	cmp	r2, r3
 80046c2:	db02      	blt.n	80046ca <_printf_float+0x22e>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	07d8      	lsls	r0, r3, #31
 80046c8:	d510      	bpl.n	80046ec <_printf_float+0x250>
 80046ca:	ee18 3a10 	vmov	r3, s16
 80046ce:	4652      	mov	r2, sl
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f af41 	beq.w	800455e <_printf_float+0xc2>
 80046dc:	f04f 0800 	mov.w	r8, #0
 80046e0:	f104 091a 	add.w	r9, r4, #26
 80046e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4543      	cmp	r3, r8
 80046ea:	dc09      	bgt.n	8004700 <_printf_float+0x264>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	079b      	lsls	r3, r3, #30
 80046f0:	f100 8105 	bmi.w	80048fe <_printf_float+0x462>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046f8:	4298      	cmp	r0, r3
 80046fa:	bfb8      	it	lt
 80046fc:	4618      	movlt	r0, r3
 80046fe:	e730      	b.n	8004562 <_printf_float+0xc6>
 8004700:	2301      	movs	r3, #1
 8004702:	464a      	mov	r2, r9
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af27 	beq.w	800455e <_printf_float+0xc2>
 8004710:	f108 0801 	add.w	r8, r8, #1
 8004714:	e7e6      	b.n	80046e4 <_printf_float+0x248>
 8004716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	dc39      	bgt.n	8004790 <_printf_float+0x2f4>
 800471c:	4a1b      	ldr	r2, [pc, #108]	; (800478c <_printf_float+0x2f0>)
 800471e:	2301      	movs	r3, #1
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f af19 	beq.w	800455e <_printf_float+0xc2>
 800472c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004730:	4313      	orrs	r3, r2
 8004732:	d102      	bne.n	800473a <_printf_float+0x29e>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	07d9      	lsls	r1, r3, #31
 8004738:	d5d8      	bpl.n	80046ec <_printf_float+0x250>
 800473a:	ee18 3a10 	vmov	r3, s16
 800473e:	4652      	mov	r2, sl
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f af09 	beq.w	800455e <_printf_float+0xc2>
 800474c:	f04f 0900 	mov.w	r9, #0
 8004750:	f104 0a1a 	add.w	sl, r4, #26
 8004754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004756:	425b      	negs	r3, r3
 8004758:	454b      	cmp	r3, r9
 800475a:	dc01      	bgt.n	8004760 <_printf_float+0x2c4>
 800475c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800475e:	e792      	b.n	8004686 <_printf_float+0x1ea>
 8004760:	2301      	movs	r3, #1
 8004762:	4652      	mov	r2, sl
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f aef7 	beq.w	800455e <_printf_float+0xc2>
 8004770:	f109 0901 	add.w	r9, r9, #1
 8004774:	e7ee      	b.n	8004754 <_printf_float+0x2b8>
 8004776:	bf00      	nop
 8004778:	7fefffff 	.word	0x7fefffff
 800477c:	08008070 	.word	0x08008070
 8004780:	08008074 	.word	0x08008074
 8004784:	0800807c 	.word	0x0800807c
 8004788:	08008078 	.word	0x08008078
 800478c:	08008080 	.word	0x08008080
 8004790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004794:	429a      	cmp	r2, r3
 8004796:	bfa8      	it	ge
 8004798:	461a      	movge	r2, r3
 800479a:	2a00      	cmp	r2, #0
 800479c:	4691      	mov	r9, r2
 800479e:	dc37      	bgt.n	8004810 <_printf_float+0x374>
 80047a0:	f04f 0b00 	mov.w	fp, #0
 80047a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047a8:	f104 021a 	add.w	r2, r4, #26
 80047ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047ae:	9305      	str	r3, [sp, #20]
 80047b0:	eba3 0309 	sub.w	r3, r3, r9
 80047b4:	455b      	cmp	r3, fp
 80047b6:	dc33      	bgt.n	8004820 <_printf_float+0x384>
 80047b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047bc:	429a      	cmp	r2, r3
 80047be:	db3b      	blt.n	8004838 <_printf_float+0x39c>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07da      	lsls	r2, r3, #31
 80047c4:	d438      	bmi.n	8004838 <_printf_float+0x39c>
 80047c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c8:	9a05      	ldr	r2, [sp, #20]
 80047ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047cc:	1a9a      	subs	r2, r3, r2
 80047ce:	eba3 0901 	sub.w	r9, r3, r1
 80047d2:	4591      	cmp	r9, r2
 80047d4:	bfa8      	it	ge
 80047d6:	4691      	movge	r9, r2
 80047d8:	f1b9 0f00 	cmp.w	r9, #0
 80047dc:	dc35      	bgt.n	800484a <_printf_float+0x3ae>
 80047de:	f04f 0800 	mov.w	r8, #0
 80047e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e6:	f104 0a1a 	add.w	sl, r4, #26
 80047ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	eba3 0309 	sub.w	r3, r3, r9
 80047f4:	4543      	cmp	r3, r8
 80047f6:	f77f af79 	ble.w	80046ec <_printf_float+0x250>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4652      	mov	r2, sl
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f aeaa 	beq.w	800455e <_printf_float+0xc2>
 800480a:	f108 0801 	add.w	r8, r8, #1
 800480e:	e7ec      	b.n	80047ea <_printf_float+0x34e>
 8004810:	4613      	mov	r3, r2
 8004812:	4631      	mov	r1, r6
 8004814:	4642      	mov	r2, r8
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	d1c0      	bne.n	80047a0 <_printf_float+0x304>
 800481e:	e69e      	b.n	800455e <_printf_float+0xc2>
 8004820:	2301      	movs	r3, #1
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	9205      	str	r2, [sp, #20]
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	f43f ae97 	beq.w	800455e <_printf_float+0xc2>
 8004830:	9a05      	ldr	r2, [sp, #20]
 8004832:	f10b 0b01 	add.w	fp, fp, #1
 8004836:	e7b9      	b.n	80047ac <_printf_float+0x310>
 8004838:	ee18 3a10 	vmov	r3, s16
 800483c:	4652      	mov	r2, sl
 800483e:	4631      	mov	r1, r6
 8004840:	4628      	mov	r0, r5
 8004842:	47b8      	blx	r7
 8004844:	3001      	adds	r0, #1
 8004846:	d1be      	bne.n	80047c6 <_printf_float+0x32a>
 8004848:	e689      	b.n	800455e <_printf_float+0xc2>
 800484a:	9a05      	ldr	r2, [sp, #20]
 800484c:	464b      	mov	r3, r9
 800484e:	4442      	add	r2, r8
 8004850:	4631      	mov	r1, r6
 8004852:	4628      	mov	r0, r5
 8004854:	47b8      	blx	r7
 8004856:	3001      	adds	r0, #1
 8004858:	d1c1      	bne.n	80047de <_printf_float+0x342>
 800485a:	e680      	b.n	800455e <_printf_float+0xc2>
 800485c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800485e:	2a01      	cmp	r2, #1
 8004860:	dc01      	bgt.n	8004866 <_printf_float+0x3ca>
 8004862:	07db      	lsls	r3, r3, #31
 8004864:	d538      	bpl.n	80048d8 <_printf_float+0x43c>
 8004866:	2301      	movs	r3, #1
 8004868:	4642      	mov	r2, r8
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f ae74 	beq.w	800455e <_printf_float+0xc2>
 8004876:	ee18 3a10 	vmov	r3, s16
 800487a:	4652      	mov	r2, sl
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	f43f ae6b 	beq.w	800455e <_printf_float+0xc2>
 8004888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	f7fc f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8004894:	b9d8      	cbnz	r0, 80048ce <_printf_float+0x432>
 8004896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004898:	f108 0201 	add.w	r2, r8, #1
 800489c:	3b01      	subs	r3, #1
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	d10e      	bne.n	80048c6 <_printf_float+0x42a>
 80048a8:	e659      	b.n	800455e <_printf_float+0xc2>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4652      	mov	r2, sl
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b8      	blx	r7
 80048b4:	3001      	adds	r0, #1
 80048b6:	f43f ae52 	beq.w	800455e <_printf_float+0xc2>
 80048ba:	f108 0801 	add.w	r8, r8, #1
 80048be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c0:	3b01      	subs	r3, #1
 80048c2:	4543      	cmp	r3, r8
 80048c4:	dcf1      	bgt.n	80048aa <_printf_float+0x40e>
 80048c6:	464b      	mov	r3, r9
 80048c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048cc:	e6dc      	b.n	8004688 <_printf_float+0x1ec>
 80048ce:	f04f 0800 	mov.w	r8, #0
 80048d2:	f104 0a1a 	add.w	sl, r4, #26
 80048d6:	e7f2      	b.n	80048be <_printf_float+0x422>
 80048d8:	2301      	movs	r3, #1
 80048da:	4642      	mov	r2, r8
 80048dc:	e7df      	b.n	800489e <_printf_float+0x402>
 80048de:	2301      	movs	r3, #1
 80048e0:	464a      	mov	r2, r9
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f ae38 	beq.w	800455e <_printf_float+0xc2>
 80048ee:	f108 0801 	add.w	r8, r8, #1
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048f6:	1a5b      	subs	r3, r3, r1
 80048f8:	4543      	cmp	r3, r8
 80048fa:	dcf0      	bgt.n	80048de <_printf_float+0x442>
 80048fc:	e6fa      	b.n	80046f4 <_printf_float+0x258>
 80048fe:	f04f 0800 	mov.w	r8, #0
 8004902:	f104 0919 	add.w	r9, r4, #25
 8004906:	e7f4      	b.n	80048f2 <_printf_float+0x456>

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4699      	mov	r9, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004924:	4607      	mov	r7, r0
 8004926:	460c      	mov	r4, r1
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc26      	bgt.n	800499e <_printf_common+0x96>
 8004950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004954:	1e13      	subs	r3, r2, #0
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d42b      	bmi.n	80049b8 <_printf_common+0xb0>
 8004960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d01e      	beq.n	80049ac <_printf_common+0xa4>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	68e5      	ldr	r5, [r4, #12]
 8004972:	6832      	ldr	r2, [r6, #0]
 8004974:	f003 0306 	and.w	r3, r3, #6
 8004978:	2b04      	cmp	r3, #4
 800497a:	bf08      	it	eq
 800497c:	1aad      	subeq	r5, r5, r2
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	bf0c      	ite	eq
 8004984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004988:	2500      	movne	r5, #0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfc4      	itt	gt
 800498e:	1a9b      	subgt	r3, r3, r2
 8004990:	18ed      	addgt	r5, r5, r3
 8004992:	2600      	movs	r6, #0
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xa8>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4649      	mov	r1, r9
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xac>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c6      	b.n	8004946 <_printf_common+0x3e>
 80049b8:	18e1      	adds	r1, r4, r3
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	2030      	movs	r0, #48	; 0x30
 80049be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c2:	4422      	add	r2, r4
 80049c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049cc:	3302      	adds	r3, #2
 80049ce:	e7c7      	b.n	8004960 <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa4>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x8e>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	7e0f      	ldrb	r7, [r1, #24]
 80049ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ec:	2f78      	cmp	r7, #120	; 0x78
 80049ee:	4691      	mov	r9, r2
 80049f0:	4680      	mov	r8, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	469a      	mov	sl, r3
 80049f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	; 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d8 	beq.w	8004bb6 <_printf_i+0x1d2>
 8004a06:	2f58      	cmp	r7, #88	; 0x58
 8004a08:	f000 80a3 	beq.w	8004b52 <_printf_i+0x16e>
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a101      	add	r1, pc, #4	; (adr r1, 8004a24 <_printf_i+0x40>)
 8004a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b9d 	.word	0x08004b9d
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004b7f 	.word	0x08004b7f
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bbf 	.word	0x08004bbf
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b87 	.word	0x08004b87
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	602a      	str	r2, [r5, #0]
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a3      	b.n	8004bd8 <_printf_i+0x1f4>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	f101 0304 	add.w	r3, r1, #4
 8004a9a:	d50a      	bpl.n	8004ab2 <_printf_i+0xce>
 8004a9c:	680e      	ldr	r6, [r1, #0]
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	da03      	bge.n	8004aac <_printf_i+0xc8>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	4276      	negs	r6, r6
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	485e      	ldr	r0, [pc, #376]	; (8004c28 <_printf_i+0x244>)
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e019      	b.n	8004ae6 <_printf_i+0x102>
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aba:	bf18      	it	ne
 8004abc:	b236      	sxthne	r6, r6
 8004abe:	e7ef      	b.n	8004aa0 <_printf_i+0xbc>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0601      	lsls	r1, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xec>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xf2>
 8004ad0:	0646      	lsls	r6, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe8>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_printf_i+0x244>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90e      	cbnz	r6, 8004afc <_printf_i+0x118>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d04d      	beq.n	8004b98 <_printf_i+0x1b4>
 8004afc:	4615      	mov	r5, r2
 8004afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b02:	fb03 6711 	mls	r7, r3, r1, r6
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460e      	mov	r6, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x11a>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x14c>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07de      	lsls	r6, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x14c>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b30:	1b52      	subs	r2, r2, r5
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee2 	bl	8004908 <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14c      	bne.n	8004be2 <_printf_i+0x1fe>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	4835      	ldr	r0, [pc, #212]	; (8004c28 <_printf_i+0x244>)
 8004b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b58:	6829      	ldr	r1, [r5, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b60:	6029      	str	r1, [r5, #0]
 8004b62:	061d      	lsls	r5, r3, #24
 8004b64:	d514      	bpl.n	8004b90 <_printf_i+0x1ac>
 8004b66:	07df      	lsls	r7, r3, #31
 8004b68:	bf44      	itt	mi
 8004b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6e:	6023      	strmi	r3, [r4, #0]
 8004b70:	b91e      	cbnz	r6, 8004b7a <_printf_i+0x196>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e7b0      	b.n	8004ae0 <_printf_i+0xfc>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2378      	movs	r3, #120	; 0x78
 8004b88:	4828      	ldr	r0, [pc, #160]	; (8004c2c <_printf_i+0x248>)
 8004b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8e:	e7e3      	b.n	8004b58 <_printf_i+0x174>
 8004b90:	0659      	lsls	r1, r3, #25
 8004b92:	bf48      	it	mi
 8004b94:	b2b6      	uxthmi	r6, r6
 8004b96:	e7e6      	b.n	8004b66 <_printf_i+0x182>
 8004b98:	4615      	mov	r5, r2
 8004b9a:	e7bb      	b.n	8004b14 <_printf_i+0x130>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6826      	ldr	r6, [r4, #0]
 8004ba0:	6961      	ldr	r1, [r4, #20]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6028      	str	r0, [r5, #0]
 8004ba6:	0635      	lsls	r5, r6, #24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0x1cc>
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0x1d2>
 8004bb0:	0670      	lsls	r0, r6, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0x1c8>
 8004bb4:	8019      	strh	r1, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	4615      	mov	r5, r2
 8004bbc:	e7ba      	b.n	8004b34 <_printf_i+0x150>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7fb fb10 	bl	80001f0 <memchr>
 8004bd0:	b108      	cbz	r0, 8004bd6 <_printf_i+0x1f2>
 8004bd2:	1b40      	subs	r0, r0, r5
 8004bd4:	6060      	str	r0, [r4, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	e7a8      	b.n	8004b34 <_printf_i+0x150>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ab      	beq.n	8004b48 <_printf_i+0x164>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d413      	bmi.n	8004c1e <_printf_i+0x23a>
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	bfb8      	it	lt
 8004bfe:	4618      	movlt	r0, r3
 8004c00:	e7a4      	b.n	8004b4c <_printf_i+0x168>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d09b      	beq.n	8004b48 <_printf_i+0x164>
 8004c10:	3501      	adds	r5, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dcf2      	bgt.n	8004c02 <_printf_i+0x21e>
 8004c1c:	e7eb      	b.n	8004bf6 <_printf_i+0x212>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	f104 0619 	add.w	r6, r4, #25
 8004c24:	e7f5      	b.n	8004c12 <_printf_i+0x22e>
 8004c26:	bf00      	nop
 8004c28:	08008082 	.word	0x08008082
 8004c2c:	08008093 	.word	0x08008093

08004c30 <siprintf>:
 8004c30:	b40e      	push	{r1, r2, r3}
 8004c32:	b500      	push	{lr}
 8004c34:	b09c      	sub	sp, #112	; 0x70
 8004c36:	ab1d      	add	r3, sp, #116	; 0x74
 8004c38:	9002      	str	r0, [sp, #8]
 8004c3a:	9006      	str	r0, [sp, #24]
 8004c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c40:	4809      	ldr	r0, [pc, #36]	; (8004c68 <siprintf+0x38>)
 8004c42:	9107      	str	r1, [sp, #28]
 8004c44:	9104      	str	r1, [sp, #16]
 8004c46:	4909      	ldr	r1, [pc, #36]	; (8004c6c <siprintf+0x3c>)
 8004c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4c:	9105      	str	r1, [sp, #20]
 8004c4e:	6800      	ldr	r0, [r0, #0]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	a902      	add	r1, sp, #8
 8004c54:	f001 fbf4 	bl	8006440 <_svfiprintf_r>
 8004c58:	9b02      	ldr	r3, [sp, #8]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	b01c      	add	sp, #112	; 0x70
 8004c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c64:	b003      	add	sp, #12
 8004c66:	4770      	bx	lr
 8004c68:	20000020 	.word	0x20000020
 8004c6c:	ffff0208 	.word	0xffff0208

08004c70 <_strtol_l.constprop.0>:
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c76:	d001      	beq.n	8004c7c <_strtol_l.constprop.0+0xc>
 8004c78:	2b24      	cmp	r3, #36	; 0x24
 8004c7a:	d906      	bls.n	8004c8a <_strtol_l.constprop.0+0x1a>
 8004c7c:	f7ff fb2e 	bl	80042dc <__errno>
 8004c80:	2316      	movs	r3, #22
 8004c82:	6003      	str	r3, [r0, #0]
 8004c84:	2000      	movs	r0, #0
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004d70 <_strtol_l.constprop.0+0x100>
 8004c8e:	460d      	mov	r5, r1
 8004c90:	462e      	mov	r6, r5
 8004c92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004c9a:	f017 0708 	ands.w	r7, r7, #8
 8004c9e:	d1f7      	bne.n	8004c90 <_strtol_l.constprop.0+0x20>
 8004ca0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ca2:	d132      	bne.n	8004d0a <_strtol_l.constprop.0+0x9a>
 8004ca4:	782c      	ldrb	r4, [r5, #0]
 8004ca6:	2701      	movs	r7, #1
 8004ca8:	1cb5      	adds	r5, r6, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d05b      	beq.n	8004d66 <_strtol_l.constprop.0+0xf6>
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d109      	bne.n	8004cc6 <_strtol_l.constprop.0+0x56>
 8004cb2:	2c30      	cmp	r4, #48	; 0x30
 8004cb4:	d107      	bne.n	8004cc6 <_strtol_l.constprop.0+0x56>
 8004cb6:	782c      	ldrb	r4, [r5, #0]
 8004cb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004cbc:	2c58      	cmp	r4, #88	; 0x58
 8004cbe:	d14d      	bne.n	8004d5c <_strtol_l.constprop.0+0xec>
 8004cc0:	786c      	ldrb	r4, [r5, #1]
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	3502      	adds	r5, #2
 8004cc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004cca:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cce:	f04f 0c00 	mov.w	ip, #0
 8004cd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8004cd6:	4666      	mov	r6, ip
 8004cd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8004cdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004ce0:	f1be 0f09 	cmp.w	lr, #9
 8004ce4:	d816      	bhi.n	8004d14 <_strtol_l.constprop.0+0xa4>
 8004ce6:	4674      	mov	r4, lr
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	dd24      	ble.n	8004d36 <_strtol_l.constprop.0+0xc6>
 8004cec:	f1bc 0f00 	cmp.w	ip, #0
 8004cf0:	db1e      	blt.n	8004d30 <_strtol_l.constprop.0+0xc0>
 8004cf2:	45b1      	cmp	r9, r6
 8004cf4:	d31c      	bcc.n	8004d30 <_strtol_l.constprop.0+0xc0>
 8004cf6:	d101      	bne.n	8004cfc <_strtol_l.constprop.0+0x8c>
 8004cf8:	45a2      	cmp	sl, r4
 8004cfa:	db19      	blt.n	8004d30 <_strtol_l.constprop.0+0xc0>
 8004cfc:	fb06 4603 	mla	r6, r6, r3, r4
 8004d00:	f04f 0c01 	mov.w	ip, #1
 8004d04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d08:	e7e8      	b.n	8004cdc <_strtol_l.constprop.0+0x6c>
 8004d0a:	2c2b      	cmp	r4, #43	; 0x2b
 8004d0c:	bf04      	itt	eq
 8004d0e:	782c      	ldrbeq	r4, [r5, #0]
 8004d10:	1cb5      	addeq	r5, r6, #2
 8004d12:	e7ca      	b.n	8004caa <_strtol_l.constprop.0+0x3a>
 8004d14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004d18:	f1be 0f19 	cmp.w	lr, #25
 8004d1c:	d801      	bhi.n	8004d22 <_strtol_l.constprop.0+0xb2>
 8004d1e:	3c37      	subs	r4, #55	; 0x37
 8004d20:	e7e2      	b.n	8004ce8 <_strtol_l.constprop.0+0x78>
 8004d22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004d26:	f1be 0f19 	cmp.w	lr, #25
 8004d2a:	d804      	bhi.n	8004d36 <_strtol_l.constprop.0+0xc6>
 8004d2c:	3c57      	subs	r4, #87	; 0x57
 8004d2e:	e7db      	b.n	8004ce8 <_strtol_l.constprop.0+0x78>
 8004d30:	f04f 3cff 	mov.w	ip, #4294967295
 8004d34:	e7e6      	b.n	8004d04 <_strtol_l.constprop.0+0x94>
 8004d36:	f1bc 0f00 	cmp.w	ip, #0
 8004d3a:	da05      	bge.n	8004d48 <_strtol_l.constprop.0+0xd8>
 8004d3c:	2322      	movs	r3, #34	; 0x22
 8004d3e:	6003      	str	r3, [r0, #0]
 8004d40:	4646      	mov	r6, r8
 8004d42:	b942      	cbnz	r2, 8004d56 <_strtol_l.constprop.0+0xe6>
 8004d44:	4630      	mov	r0, r6
 8004d46:	e79e      	b.n	8004c86 <_strtol_l.constprop.0+0x16>
 8004d48:	b107      	cbz	r7, 8004d4c <_strtol_l.constprop.0+0xdc>
 8004d4a:	4276      	negs	r6, r6
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	d0f9      	beq.n	8004d44 <_strtol_l.constprop.0+0xd4>
 8004d50:	f1bc 0f00 	cmp.w	ip, #0
 8004d54:	d000      	beq.n	8004d58 <_strtol_l.constprop.0+0xe8>
 8004d56:	1e69      	subs	r1, r5, #1
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	e7f3      	b.n	8004d44 <_strtol_l.constprop.0+0xd4>
 8004d5c:	2430      	movs	r4, #48	; 0x30
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1b1      	bne.n	8004cc6 <_strtol_l.constprop.0+0x56>
 8004d62:	2308      	movs	r3, #8
 8004d64:	e7af      	b.n	8004cc6 <_strtol_l.constprop.0+0x56>
 8004d66:	2c30      	cmp	r4, #48	; 0x30
 8004d68:	d0a5      	beq.n	8004cb6 <_strtol_l.constprop.0+0x46>
 8004d6a:	230a      	movs	r3, #10
 8004d6c:	e7ab      	b.n	8004cc6 <_strtol_l.constprop.0+0x56>
 8004d6e:	bf00      	nop
 8004d70:	080080a5 	.word	0x080080a5

08004d74 <strtol>:
 8004d74:	4613      	mov	r3, r2
 8004d76:	460a      	mov	r2, r1
 8004d78:	4601      	mov	r1, r0
 8004d7a:	4802      	ldr	r0, [pc, #8]	; (8004d84 <strtol+0x10>)
 8004d7c:	6800      	ldr	r0, [r0, #0]
 8004d7e:	f7ff bf77 	b.w	8004c70 <_strtol_l.constprop.0>
 8004d82:	bf00      	nop
 8004d84:	20000020 	.word	0x20000020

08004d88 <quorem>:
 8004d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	6903      	ldr	r3, [r0, #16]
 8004d8e:	690c      	ldr	r4, [r1, #16]
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	4607      	mov	r7, r0
 8004d94:	f2c0 8081 	blt.w	8004e9a <quorem+0x112>
 8004d98:	3c01      	subs	r4, #1
 8004d9a:	f101 0814 	add.w	r8, r1, #20
 8004d9e:	f100 0514 	add.w	r5, r0, #20
 8004da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db0:	3301      	adds	r3, #1
 8004db2:	429a      	cmp	r2, r3
 8004db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dc0:	d331      	bcc.n	8004e26 <quorem+0x9e>
 8004dc2:	f04f 0e00 	mov.w	lr, #0
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	46ac      	mov	ip, r5
 8004dca:	46f2      	mov	sl, lr
 8004dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dd0:	b293      	uxth	r3, r2
 8004dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8004dd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8004de0:	f8dc a000 	ldr.w	sl, [ip]
 8004de4:	0c12      	lsrs	r2, r2, #16
 8004de6:	fa13 f38a 	uxtah	r3, r3, sl
 8004dea:	fb06 e202 	mla	r2, r6, r2, lr
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	9b00      	ldr	r3, [sp, #0]
 8004df2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004df6:	b292      	uxth	r2, r2
 8004df8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e00:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e04:	4581      	cmp	r9, r0
 8004e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8004e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e12:	d2db      	bcs.n	8004dcc <quorem+0x44>
 8004e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e18:	b92b      	cbnz	r3, 8004e26 <quorem+0x9e>
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	429d      	cmp	r5, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	d32e      	bcc.n	8004e82 <quorem+0xfa>
 8004e24:	613c      	str	r4, [r7, #16]
 8004e26:	4638      	mov	r0, r7
 8004e28:	f001 f8b6 	bl	8005f98 <__mcmp>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	db24      	blt.n	8004e7a <quorem+0xf2>
 8004e30:	3601      	adds	r6, #1
 8004e32:	4628      	mov	r0, r5
 8004e34:	f04f 0c00 	mov.w	ip, #0
 8004e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8004e40:	b293      	uxth	r3, r2
 8004e42:	ebac 0303 	sub.w	r3, ip, r3
 8004e46:	0c12      	lsrs	r2, r2, #16
 8004e48:	fa13 f38e 	uxtah	r3, r3, lr
 8004e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e5a:	45c1      	cmp	r9, r8
 8004e5c:	f840 3b04 	str.w	r3, [r0], #4
 8004e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e64:	d2e8      	bcs.n	8004e38 <quorem+0xb0>
 8004e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e6e:	b922      	cbnz	r2, 8004e7a <quorem+0xf2>
 8004e70:	3b04      	subs	r3, #4
 8004e72:	429d      	cmp	r5, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	d30a      	bcc.n	8004e8e <quorem+0x106>
 8004e78:	613c      	str	r4, [r7, #16]
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	b003      	add	sp, #12
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	3b04      	subs	r3, #4
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	d1cc      	bne.n	8004e24 <quorem+0x9c>
 8004e8a:	3c01      	subs	r4, #1
 8004e8c:	e7c7      	b.n	8004e1e <quorem+0x96>
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	d1f0      	bne.n	8004e78 <quorem+0xf0>
 8004e96:	3c01      	subs	r4, #1
 8004e98:	e7eb      	b.n	8004e72 <quorem+0xea>
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e7ee      	b.n	8004e7c <quorem+0xf4>
	...

08004ea0 <_dtoa_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	ed2d 8b04 	vpush	{d8-d9}
 8004ea8:	ec57 6b10 	vmov	r6, r7, d0
 8004eac:	b093      	sub	sp, #76	; 0x4c
 8004eae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004eb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004eb4:	9106      	str	r1, [sp, #24]
 8004eb6:	ee10 aa10 	vmov	sl, s0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8004ec0:	46bb      	mov	fp, r7
 8004ec2:	b975      	cbnz	r5, 8004ee2 <_dtoa_r+0x42>
 8004ec4:	2010      	movs	r0, #16
 8004ec6:	f000 fddd 	bl	8005a84 <malloc>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6260      	str	r0, [r4, #36]	; 0x24
 8004ece:	b920      	cbnz	r0, 8004eda <_dtoa_r+0x3a>
 8004ed0:	4ba7      	ldr	r3, [pc, #668]	; (8005170 <_dtoa_r+0x2d0>)
 8004ed2:	21ea      	movs	r1, #234	; 0xea
 8004ed4:	48a7      	ldr	r0, [pc, #668]	; (8005174 <_dtoa_r+0x2d4>)
 8004ed6:	f001 fbc3 	bl	8006660 <__assert_func>
 8004eda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ede:	6005      	str	r5, [r0, #0]
 8004ee0:	60c5      	str	r5, [r0, #12]
 8004ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee4:	6819      	ldr	r1, [r3, #0]
 8004ee6:	b151      	cbz	r1, 8004efe <_dtoa_r+0x5e>
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	604a      	str	r2, [r1, #4]
 8004eec:	2301      	movs	r3, #1
 8004eee:	4093      	lsls	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f000 fe0e 	bl	8005b14 <_Bfree>
 8004ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	1e3b      	subs	r3, r7, #0
 8004f00:	bfaa      	itet	ge
 8004f02:	2300      	movge	r3, #0
 8004f04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004f08:	f8c8 3000 	strge.w	r3, [r8]
 8004f0c:	4b9a      	ldr	r3, [pc, #616]	; (8005178 <_dtoa_r+0x2d8>)
 8004f0e:	bfbc      	itt	lt
 8004f10:	2201      	movlt	r2, #1
 8004f12:	f8c8 2000 	strlt.w	r2, [r8]
 8004f16:	ea33 030b 	bics.w	r3, r3, fp
 8004f1a:	d11b      	bne.n	8004f54 <_dtoa_r+0xb4>
 8004f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f28:	4333      	orrs	r3, r6
 8004f2a:	f000 8592 	beq.w	8005a52 <_dtoa_r+0xbb2>
 8004f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f30:	b963      	cbnz	r3, 8004f4c <_dtoa_r+0xac>
 8004f32:	4b92      	ldr	r3, [pc, #584]	; (800517c <_dtoa_r+0x2dc>)
 8004f34:	e022      	b.n	8004f7c <_dtoa_r+0xdc>
 8004f36:	4b92      	ldr	r3, [pc, #584]	; (8005180 <_dtoa_r+0x2e0>)
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	9801      	ldr	r0, [sp, #4]
 8004f42:	b013      	add	sp, #76	; 0x4c
 8004f44:	ecbd 8b04 	vpop	{d8-d9}
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	4b8b      	ldr	r3, [pc, #556]	; (800517c <_dtoa_r+0x2dc>)
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	3303      	adds	r3, #3
 8004f52:	e7f3      	b.n	8004f3c <_dtoa_r+0x9c>
 8004f54:	2200      	movs	r2, #0
 8004f56:	2300      	movs	r3, #0
 8004f58:	4650      	mov	r0, sl
 8004f5a:	4659      	mov	r1, fp
 8004f5c:	f7fb fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f60:	ec4b ab19 	vmov	d9, sl, fp
 8004f64:	4680      	mov	r8, r0
 8004f66:	b158      	cbz	r0, 8004f80 <_dtoa_r+0xe0>
 8004f68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 856b 	beq.w	8005a4c <_dtoa_r+0xbac>
 8004f76:	4883      	ldr	r0, [pc, #524]	; (8005184 <_dtoa_r+0x2e4>)
 8004f78:	6018      	str	r0, [r3, #0]
 8004f7a:	1e43      	subs	r3, r0, #1
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	e7df      	b.n	8004f40 <_dtoa_r+0xa0>
 8004f80:	ec4b ab10 	vmov	d0, sl, fp
 8004f84:	aa10      	add	r2, sp, #64	; 0x40
 8004f86:	a911      	add	r1, sp, #68	; 0x44
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f001 f8ab 	bl	80060e4 <__d2b>
 8004f8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004f92:	ee08 0a10 	vmov	s16, r0
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	f000 8084 	beq.w	80050a4 <_dtoa_r+0x204>
 8004f9c:	ee19 3a90 	vmov	r3, s19
 8004fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004fa8:	4656      	mov	r6, sl
 8004faa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004fae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004fb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004fb6:	4b74      	ldr	r3, [pc, #464]	; (8005188 <_dtoa_r+0x2e8>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f7fb f96b 	bl	8000298 <__aeabi_dsub>
 8004fc2:	a365      	add	r3, pc, #404	; (adr r3, 8005158 <_dtoa_r+0x2b8>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f7fb fb1e 	bl	8000608 <__aeabi_dmul>
 8004fcc:	a364      	add	r3, pc, #400	; (adr r3, 8005160 <_dtoa_r+0x2c0>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f7fb f963 	bl	800029c <__adddf3>
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	4628      	mov	r0, r5
 8004fda:	460f      	mov	r7, r1
 8004fdc:	f7fb faaa 	bl	8000534 <__aeabi_i2d>
 8004fe0:	a361      	add	r3, pc, #388	; (adr r3, 8005168 <_dtoa_r+0x2c8>)
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f7fb fb0f 	bl	8000608 <__aeabi_dmul>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb f953 	bl	800029c <__adddf3>
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	460f      	mov	r7, r1
 8004ffa:	f7fb fdb5 	bl	8000b68 <__aeabi_d2iz>
 8004ffe:	2200      	movs	r2, #0
 8005000:	9000      	str	r0, [sp, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	4630      	mov	r0, r6
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb fd70 	bl	8000aec <__aeabi_dcmplt>
 800500c:	b150      	cbz	r0, 8005024 <_dtoa_r+0x184>
 800500e:	9800      	ldr	r0, [sp, #0]
 8005010:	f7fb fa90 	bl	8000534 <__aeabi_i2d>
 8005014:	4632      	mov	r2, r6
 8005016:	463b      	mov	r3, r7
 8005018:	f7fb fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800501c:	b910      	cbnz	r0, 8005024 <_dtoa_r+0x184>
 800501e:	9b00      	ldr	r3, [sp, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	9b00      	ldr	r3, [sp, #0]
 8005026:	2b16      	cmp	r3, #22
 8005028:	d85a      	bhi.n	80050e0 <_dtoa_r+0x240>
 800502a:	9a00      	ldr	r2, [sp, #0]
 800502c:	4b57      	ldr	r3, [pc, #348]	; (800518c <_dtoa_r+0x2ec>)
 800502e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	ec51 0b19 	vmov	r0, r1, d9
 800503a:	f7fb fd57 	bl	8000aec <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	d050      	beq.n	80050e4 <_dtoa_r+0x244>
 8005042:	9b00      	ldr	r3, [sp, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	930b      	str	r3, [sp, #44]	; 0x2c
 800504c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800504e:	1b5d      	subs	r5, r3, r5
 8005050:	1e6b      	subs	r3, r5, #1
 8005052:	9305      	str	r3, [sp, #20]
 8005054:	bf45      	ittet	mi
 8005056:	f1c5 0301 	rsbmi	r3, r5, #1
 800505a:	9304      	strmi	r3, [sp, #16]
 800505c:	2300      	movpl	r3, #0
 800505e:	2300      	movmi	r3, #0
 8005060:	bf4c      	ite	mi
 8005062:	9305      	strmi	r3, [sp, #20]
 8005064:	9304      	strpl	r3, [sp, #16]
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db3d      	blt.n	80050e8 <_dtoa_r+0x248>
 800506c:	9b05      	ldr	r3, [sp, #20]
 800506e:	9a00      	ldr	r2, [sp, #0]
 8005070:	920a      	str	r2, [sp, #40]	; 0x28
 8005072:	4413      	add	r3, r2
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	2300      	movs	r3, #0
 8005078:	9307      	str	r3, [sp, #28]
 800507a:	9b06      	ldr	r3, [sp, #24]
 800507c:	2b09      	cmp	r3, #9
 800507e:	f200 8089 	bhi.w	8005194 <_dtoa_r+0x2f4>
 8005082:	2b05      	cmp	r3, #5
 8005084:	bfc4      	itt	gt
 8005086:	3b04      	subgt	r3, #4
 8005088:	9306      	strgt	r3, [sp, #24]
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	f1a3 0302 	sub.w	r3, r3, #2
 8005090:	bfcc      	ite	gt
 8005092:	2500      	movgt	r5, #0
 8005094:	2501      	movle	r5, #1
 8005096:	2b03      	cmp	r3, #3
 8005098:	f200 8087 	bhi.w	80051aa <_dtoa_r+0x30a>
 800509c:	e8df f003 	tbb	[pc, r3]
 80050a0:	59383a2d 	.word	0x59383a2d
 80050a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80050a8:	441d      	add	r5, r3
 80050aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	bfc1      	itttt	gt
 80050b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80050ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80050be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80050c2:	bfda      	itte	le
 80050c4:	f1c3 0320 	rsble	r3, r3, #32
 80050c8:	fa06 f003 	lslle.w	r0, r6, r3
 80050cc:	4318      	orrgt	r0, r3
 80050ce:	f7fb fa21 	bl	8000514 <__aeabi_ui2d>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4606      	mov	r6, r0
 80050d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80050da:	3d01      	subs	r5, #1
 80050dc:	930e      	str	r3, [sp, #56]	; 0x38
 80050de:	e76a      	b.n	8004fb6 <_dtoa_r+0x116>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e7b2      	b.n	800504a <_dtoa_r+0x1aa>
 80050e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80050e6:	e7b1      	b.n	800504c <_dtoa_r+0x1ac>
 80050e8:	9b04      	ldr	r3, [sp, #16]
 80050ea:	9a00      	ldr	r2, [sp, #0]
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	4253      	negs	r3, r2
 80050f2:	9307      	str	r3, [sp, #28]
 80050f4:	2300      	movs	r3, #0
 80050f6:	930a      	str	r3, [sp, #40]	; 0x28
 80050f8:	e7bf      	b.n	800507a <_dtoa_r+0x1da>
 80050fa:	2300      	movs	r3, #0
 80050fc:	9308      	str	r3, [sp, #32]
 80050fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	dc55      	bgt.n	80051b0 <_dtoa_r+0x310>
 8005104:	2301      	movs	r3, #1
 8005106:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800510a:	461a      	mov	r2, r3
 800510c:	9209      	str	r2, [sp, #36]	; 0x24
 800510e:	e00c      	b.n	800512a <_dtoa_r+0x28a>
 8005110:	2301      	movs	r3, #1
 8005112:	e7f3      	b.n	80050fc <_dtoa_r+0x25c>
 8005114:	2300      	movs	r3, #0
 8005116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005118:	9308      	str	r3, [sp, #32]
 800511a:	9b00      	ldr	r3, [sp, #0]
 800511c:	4413      	add	r3, r2
 800511e:	9302      	str	r3, [sp, #8]
 8005120:	3301      	adds	r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	9303      	str	r3, [sp, #12]
 8005126:	bfb8      	it	lt
 8005128:	2301      	movlt	r3, #1
 800512a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800512c:	2200      	movs	r2, #0
 800512e:	6042      	str	r2, [r0, #4]
 8005130:	2204      	movs	r2, #4
 8005132:	f102 0614 	add.w	r6, r2, #20
 8005136:	429e      	cmp	r6, r3
 8005138:	6841      	ldr	r1, [r0, #4]
 800513a:	d93d      	bls.n	80051b8 <_dtoa_r+0x318>
 800513c:	4620      	mov	r0, r4
 800513e:	f000 fca9 	bl	8005a94 <_Balloc>
 8005142:	9001      	str	r0, [sp, #4]
 8005144:	2800      	cmp	r0, #0
 8005146:	d13b      	bne.n	80051c0 <_dtoa_r+0x320>
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <_dtoa_r+0x2f0>)
 800514a:	4602      	mov	r2, r0
 800514c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005150:	e6c0      	b.n	8004ed4 <_dtoa_r+0x34>
 8005152:	2301      	movs	r3, #1
 8005154:	e7df      	b.n	8005116 <_dtoa_r+0x276>
 8005156:	bf00      	nop
 8005158:	636f4361 	.word	0x636f4361
 800515c:	3fd287a7 	.word	0x3fd287a7
 8005160:	8b60c8b3 	.word	0x8b60c8b3
 8005164:	3fc68a28 	.word	0x3fc68a28
 8005168:	509f79fb 	.word	0x509f79fb
 800516c:	3fd34413 	.word	0x3fd34413
 8005170:	080081b2 	.word	0x080081b2
 8005174:	080081c9 	.word	0x080081c9
 8005178:	7ff00000 	.word	0x7ff00000
 800517c:	080081ae 	.word	0x080081ae
 8005180:	080081a5 	.word	0x080081a5
 8005184:	08008081 	.word	0x08008081
 8005188:	3ff80000 	.word	0x3ff80000
 800518c:	080082c0 	.word	0x080082c0
 8005190:	08008224 	.word	0x08008224
 8005194:	2501      	movs	r5, #1
 8005196:	2300      	movs	r3, #0
 8005198:	9306      	str	r3, [sp, #24]
 800519a:	9508      	str	r5, [sp, #32]
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2312      	movs	r3, #18
 80051a8:	e7b0      	b.n	800510c <_dtoa_r+0x26c>
 80051aa:	2301      	movs	r3, #1
 80051ac:	9308      	str	r3, [sp, #32]
 80051ae:	e7f5      	b.n	800519c <_dtoa_r+0x2fc>
 80051b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051b6:	e7b8      	b.n	800512a <_dtoa_r+0x28a>
 80051b8:	3101      	adds	r1, #1
 80051ba:	6041      	str	r1, [r0, #4]
 80051bc:	0052      	lsls	r2, r2, #1
 80051be:	e7b8      	b.n	8005132 <_dtoa_r+0x292>
 80051c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c2:	9a01      	ldr	r2, [sp, #4]
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	2b0e      	cmp	r3, #14
 80051ca:	f200 809d 	bhi.w	8005308 <_dtoa_r+0x468>
 80051ce:	2d00      	cmp	r5, #0
 80051d0:	f000 809a 	beq.w	8005308 <_dtoa_r+0x468>
 80051d4:	9b00      	ldr	r3, [sp, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	dd32      	ble.n	8005240 <_dtoa_r+0x3a0>
 80051da:	4ab7      	ldr	r2, [pc, #732]	; (80054b8 <_dtoa_r+0x618>)
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051e8:	9b00      	ldr	r3, [sp, #0]
 80051ea:	05d8      	lsls	r0, r3, #23
 80051ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80051f0:	d516      	bpl.n	8005220 <_dtoa_r+0x380>
 80051f2:	4bb2      	ldr	r3, [pc, #712]	; (80054bc <_dtoa_r+0x61c>)
 80051f4:	ec51 0b19 	vmov	r0, r1, d9
 80051f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051fc:	f7fb fb2e 	bl	800085c <__aeabi_ddiv>
 8005200:	f007 070f 	and.w	r7, r7, #15
 8005204:	4682      	mov	sl, r0
 8005206:	468b      	mov	fp, r1
 8005208:	2503      	movs	r5, #3
 800520a:	4eac      	ldr	r6, [pc, #688]	; (80054bc <_dtoa_r+0x61c>)
 800520c:	b957      	cbnz	r7, 8005224 <_dtoa_r+0x384>
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	4650      	mov	r0, sl
 8005214:	4659      	mov	r1, fp
 8005216:	f7fb fb21 	bl	800085c <__aeabi_ddiv>
 800521a:	4682      	mov	sl, r0
 800521c:	468b      	mov	fp, r1
 800521e:	e028      	b.n	8005272 <_dtoa_r+0x3d2>
 8005220:	2502      	movs	r5, #2
 8005222:	e7f2      	b.n	800520a <_dtoa_r+0x36a>
 8005224:	07f9      	lsls	r1, r7, #31
 8005226:	d508      	bpl.n	800523a <_dtoa_r+0x39a>
 8005228:	4640      	mov	r0, r8
 800522a:	4649      	mov	r1, r9
 800522c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005230:	f7fb f9ea 	bl	8000608 <__aeabi_dmul>
 8005234:	3501      	adds	r5, #1
 8005236:	4680      	mov	r8, r0
 8005238:	4689      	mov	r9, r1
 800523a:	107f      	asrs	r7, r7, #1
 800523c:	3608      	adds	r6, #8
 800523e:	e7e5      	b.n	800520c <_dtoa_r+0x36c>
 8005240:	f000 809b 	beq.w	800537a <_dtoa_r+0x4da>
 8005244:	9b00      	ldr	r3, [sp, #0]
 8005246:	4f9d      	ldr	r7, [pc, #628]	; (80054bc <_dtoa_r+0x61c>)
 8005248:	425e      	negs	r6, r3
 800524a:	4b9b      	ldr	r3, [pc, #620]	; (80054b8 <_dtoa_r+0x618>)
 800524c:	f006 020f 	and.w	r2, r6, #15
 8005250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	ec51 0b19 	vmov	r0, r1, d9
 800525c:	f7fb f9d4 	bl	8000608 <__aeabi_dmul>
 8005260:	1136      	asrs	r6, r6, #4
 8005262:	4682      	mov	sl, r0
 8005264:	468b      	mov	fp, r1
 8005266:	2300      	movs	r3, #0
 8005268:	2502      	movs	r5, #2
 800526a:	2e00      	cmp	r6, #0
 800526c:	d17a      	bne.n	8005364 <_dtoa_r+0x4c4>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1d3      	bne.n	800521a <_dtoa_r+0x37a>
 8005272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8082 	beq.w	800537e <_dtoa_r+0x4de>
 800527a:	4b91      	ldr	r3, [pc, #580]	; (80054c0 <_dtoa_r+0x620>)
 800527c:	2200      	movs	r2, #0
 800527e:	4650      	mov	r0, sl
 8005280:	4659      	mov	r1, fp
 8005282:	f7fb fc33 	bl	8000aec <__aeabi_dcmplt>
 8005286:	2800      	cmp	r0, #0
 8005288:	d079      	beq.n	800537e <_dtoa_r+0x4de>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d076      	beq.n	800537e <_dtoa_r+0x4de>
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	dd36      	ble.n	8005304 <_dtoa_r+0x464>
 8005296:	9b00      	ldr	r3, [sp, #0]
 8005298:	4650      	mov	r0, sl
 800529a:	4659      	mov	r1, fp
 800529c:	1e5f      	subs	r7, r3, #1
 800529e:	2200      	movs	r2, #0
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <_dtoa_r+0x624>)
 80052a2:	f7fb f9b1 	bl	8000608 <__aeabi_dmul>
 80052a6:	9e02      	ldr	r6, [sp, #8]
 80052a8:	4682      	mov	sl, r0
 80052aa:	468b      	mov	fp, r1
 80052ac:	3501      	adds	r5, #1
 80052ae:	4628      	mov	r0, r5
 80052b0:	f7fb f940 	bl	8000534 <__aeabi_i2d>
 80052b4:	4652      	mov	r2, sl
 80052b6:	465b      	mov	r3, fp
 80052b8:	f7fb f9a6 	bl	8000608 <__aeabi_dmul>
 80052bc:	4b82      	ldr	r3, [pc, #520]	; (80054c8 <_dtoa_r+0x628>)
 80052be:	2200      	movs	r2, #0
 80052c0:	f7fa ffec 	bl	800029c <__adddf3>
 80052c4:	46d0      	mov	r8, sl
 80052c6:	46d9      	mov	r9, fp
 80052c8:	4682      	mov	sl, r0
 80052ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d158      	bne.n	8005384 <_dtoa_r+0x4e4>
 80052d2:	4b7e      	ldr	r3, [pc, #504]	; (80054cc <_dtoa_r+0x62c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	4640      	mov	r0, r8
 80052d8:	4649      	mov	r1, r9
 80052da:	f7fa ffdd 	bl	8000298 <__aeabi_dsub>
 80052de:	4652      	mov	r2, sl
 80052e0:	465b      	mov	r3, fp
 80052e2:	4680      	mov	r8, r0
 80052e4:	4689      	mov	r9, r1
 80052e6:	f7fb fc1f 	bl	8000b28 <__aeabi_dcmpgt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	f040 8295 	bne.w	800581a <_dtoa_r+0x97a>
 80052f0:	4652      	mov	r2, sl
 80052f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb fbf7 	bl	8000aec <__aeabi_dcmplt>
 80052fe:	2800      	cmp	r0, #0
 8005300:	f040 8289 	bne.w	8005816 <_dtoa_r+0x976>
 8005304:	ec5b ab19 	vmov	sl, fp, d9
 8005308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800530a:	2b00      	cmp	r3, #0
 800530c:	f2c0 8148 	blt.w	80055a0 <_dtoa_r+0x700>
 8005310:	9a00      	ldr	r2, [sp, #0]
 8005312:	2a0e      	cmp	r2, #14
 8005314:	f300 8144 	bgt.w	80055a0 <_dtoa_r+0x700>
 8005318:	4b67      	ldr	r3, [pc, #412]	; (80054b8 <_dtoa_r+0x618>)
 800531a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800531e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	f280 80d5 	bge.w	80054d4 <_dtoa_r+0x634>
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f300 80d1 	bgt.w	80054d4 <_dtoa_r+0x634>
 8005332:	f040 826f 	bne.w	8005814 <_dtoa_r+0x974>
 8005336:	4b65      	ldr	r3, [pc, #404]	; (80054cc <_dtoa_r+0x62c>)
 8005338:	2200      	movs	r2, #0
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fb f963 	bl	8000608 <__aeabi_dmul>
 8005342:	4652      	mov	r2, sl
 8005344:	465b      	mov	r3, fp
 8005346:	f7fb fbe5 	bl	8000b14 <__aeabi_dcmpge>
 800534a:	9e03      	ldr	r6, [sp, #12]
 800534c:	4637      	mov	r7, r6
 800534e:	2800      	cmp	r0, #0
 8005350:	f040 8245 	bne.w	80057de <_dtoa_r+0x93e>
 8005354:	9d01      	ldr	r5, [sp, #4]
 8005356:	2331      	movs	r3, #49	; 0x31
 8005358:	f805 3b01 	strb.w	r3, [r5], #1
 800535c:	9b00      	ldr	r3, [sp, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	e240      	b.n	80057e6 <_dtoa_r+0x946>
 8005364:	07f2      	lsls	r2, r6, #31
 8005366:	d505      	bpl.n	8005374 <_dtoa_r+0x4d4>
 8005368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800536c:	f7fb f94c 	bl	8000608 <__aeabi_dmul>
 8005370:	3501      	adds	r5, #1
 8005372:	2301      	movs	r3, #1
 8005374:	1076      	asrs	r6, r6, #1
 8005376:	3708      	adds	r7, #8
 8005378:	e777      	b.n	800526a <_dtoa_r+0x3ca>
 800537a:	2502      	movs	r5, #2
 800537c:	e779      	b.n	8005272 <_dtoa_r+0x3d2>
 800537e:	9f00      	ldr	r7, [sp, #0]
 8005380:	9e03      	ldr	r6, [sp, #12]
 8005382:	e794      	b.n	80052ae <_dtoa_r+0x40e>
 8005384:	9901      	ldr	r1, [sp, #4]
 8005386:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <_dtoa_r+0x618>)
 8005388:	4431      	add	r1, r6
 800538a:	910d      	str	r1, [sp, #52]	; 0x34
 800538c:	9908      	ldr	r1, [sp, #32]
 800538e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005396:	2900      	cmp	r1, #0
 8005398:	d043      	beq.n	8005422 <_dtoa_r+0x582>
 800539a:	494d      	ldr	r1, [pc, #308]	; (80054d0 <_dtoa_r+0x630>)
 800539c:	2000      	movs	r0, #0
 800539e:	f7fb fa5d 	bl	800085c <__aeabi_ddiv>
 80053a2:	4652      	mov	r2, sl
 80053a4:	465b      	mov	r3, fp
 80053a6:	f7fa ff77 	bl	8000298 <__aeabi_dsub>
 80053aa:	9d01      	ldr	r5, [sp, #4]
 80053ac:	4682      	mov	sl, r0
 80053ae:	468b      	mov	fp, r1
 80053b0:	4649      	mov	r1, r9
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7fb fbd8 	bl	8000b68 <__aeabi_d2iz>
 80053b8:	4606      	mov	r6, r0
 80053ba:	f7fb f8bb 	bl	8000534 <__aeabi_i2d>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fa ff67 	bl	8000298 <__aeabi_dsub>
 80053ca:	3630      	adds	r6, #48	; 0x30
 80053cc:	f805 6b01 	strb.w	r6, [r5], #1
 80053d0:	4652      	mov	r2, sl
 80053d2:	465b      	mov	r3, fp
 80053d4:	4680      	mov	r8, r0
 80053d6:	4689      	mov	r9, r1
 80053d8:	f7fb fb88 	bl	8000aec <__aeabi_dcmplt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d163      	bne.n	80054a8 <_dtoa_r+0x608>
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	4936      	ldr	r1, [pc, #216]	; (80054c0 <_dtoa_r+0x620>)
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fa ff56 	bl	8000298 <__aeabi_dsub>
 80053ec:	4652      	mov	r2, sl
 80053ee:	465b      	mov	r3, fp
 80053f0:	f7fb fb7c 	bl	8000aec <__aeabi_dcmplt>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 80b5 	bne.w	8005564 <_dtoa_r+0x6c4>
 80053fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053fc:	429d      	cmp	r5, r3
 80053fe:	d081      	beq.n	8005304 <_dtoa_r+0x464>
 8005400:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <_dtoa_r+0x624>)
 8005402:	2200      	movs	r2, #0
 8005404:	4650      	mov	r0, sl
 8005406:	4659      	mov	r1, fp
 8005408:	f7fb f8fe 	bl	8000608 <__aeabi_dmul>
 800540c:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <_dtoa_r+0x624>)
 800540e:	4682      	mov	sl, r0
 8005410:	468b      	mov	fp, r1
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	2200      	movs	r2, #0
 8005418:	f7fb f8f6 	bl	8000608 <__aeabi_dmul>
 800541c:	4680      	mov	r8, r0
 800541e:	4689      	mov	r9, r1
 8005420:	e7c6      	b.n	80053b0 <_dtoa_r+0x510>
 8005422:	4650      	mov	r0, sl
 8005424:	4659      	mov	r1, fp
 8005426:	f7fb f8ef 	bl	8000608 <__aeabi_dmul>
 800542a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800542c:	9d01      	ldr	r5, [sp, #4]
 800542e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005430:	4682      	mov	sl, r0
 8005432:	468b      	mov	fp, r1
 8005434:	4649      	mov	r1, r9
 8005436:	4640      	mov	r0, r8
 8005438:	f7fb fb96 	bl	8000b68 <__aeabi_d2iz>
 800543c:	4606      	mov	r6, r0
 800543e:	f7fb f879 	bl	8000534 <__aeabi_i2d>
 8005442:	3630      	adds	r6, #48	; 0x30
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4640      	mov	r0, r8
 800544a:	4649      	mov	r1, r9
 800544c:	f7fa ff24 	bl	8000298 <__aeabi_dsub>
 8005450:	f805 6b01 	strb.w	r6, [r5], #1
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	429d      	cmp	r5, r3
 8005458:	4680      	mov	r8, r0
 800545a:	4689      	mov	r9, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	d124      	bne.n	80054ac <_dtoa_r+0x60c>
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <_dtoa_r+0x630>)
 8005464:	4650      	mov	r0, sl
 8005466:	4659      	mov	r1, fp
 8005468:	f7fa ff18 	bl	800029c <__adddf3>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4640      	mov	r0, r8
 8005472:	4649      	mov	r1, r9
 8005474:	f7fb fb58 	bl	8000b28 <__aeabi_dcmpgt>
 8005478:	2800      	cmp	r0, #0
 800547a:	d173      	bne.n	8005564 <_dtoa_r+0x6c4>
 800547c:	4652      	mov	r2, sl
 800547e:	465b      	mov	r3, fp
 8005480:	4913      	ldr	r1, [pc, #76]	; (80054d0 <_dtoa_r+0x630>)
 8005482:	2000      	movs	r0, #0
 8005484:	f7fa ff08 	bl	8000298 <__aeabi_dsub>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb2c 	bl	8000aec <__aeabi_dcmplt>
 8005494:	2800      	cmp	r0, #0
 8005496:	f43f af35 	beq.w	8005304 <_dtoa_r+0x464>
 800549a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800549c:	1e6b      	subs	r3, r5, #1
 800549e:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054a4:	2b30      	cmp	r3, #48	; 0x30
 80054a6:	d0f8      	beq.n	800549a <_dtoa_r+0x5fa>
 80054a8:	9700      	str	r7, [sp, #0]
 80054aa:	e049      	b.n	8005540 <_dtoa_r+0x6a0>
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_dtoa_r+0x624>)
 80054ae:	f7fb f8ab 	bl	8000608 <__aeabi_dmul>
 80054b2:	4680      	mov	r8, r0
 80054b4:	4689      	mov	r9, r1
 80054b6:	e7bd      	b.n	8005434 <_dtoa_r+0x594>
 80054b8:	080082c0 	.word	0x080082c0
 80054bc:	08008298 	.word	0x08008298
 80054c0:	3ff00000 	.word	0x3ff00000
 80054c4:	40240000 	.word	0x40240000
 80054c8:	401c0000 	.word	0x401c0000
 80054cc:	40140000 	.word	0x40140000
 80054d0:	3fe00000 	.word	0x3fe00000
 80054d4:	9d01      	ldr	r5, [sp, #4]
 80054d6:	4656      	mov	r6, sl
 80054d8:	465f      	mov	r7, fp
 80054da:	4642      	mov	r2, r8
 80054dc:	464b      	mov	r3, r9
 80054de:	4630      	mov	r0, r6
 80054e0:	4639      	mov	r1, r7
 80054e2:	f7fb f9bb 	bl	800085c <__aeabi_ddiv>
 80054e6:	f7fb fb3f 	bl	8000b68 <__aeabi_d2iz>
 80054ea:	4682      	mov	sl, r0
 80054ec:	f7fb f822 	bl	8000534 <__aeabi_i2d>
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	f7fb f888 	bl	8000608 <__aeabi_dmul>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005504:	f7fa fec8 	bl	8000298 <__aeabi_dsub>
 8005508:	f805 6b01 	strb.w	r6, [r5], #1
 800550c:	9e01      	ldr	r6, [sp, #4]
 800550e:	9f03      	ldr	r7, [sp, #12]
 8005510:	1bae      	subs	r6, r5, r6
 8005512:	42b7      	cmp	r7, r6
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	d135      	bne.n	8005586 <_dtoa_r+0x6e6>
 800551a:	f7fa febf 	bl	800029c <__adddf3>
 800551e:	4642      	mov	r2, r8
 8005520:	464b      	mov	r3, r9
 8005522:	4606      	mov	r6, r0
 8005524:	460f      	mov	r7, r1
 8005526:	f7fb faff 	bl	8000b28 <__aeabi_dcmpgt>
 800552a:	b9d0      	cbnz	r0, 8005562 <_dtoa_r+0x6c2>
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fb fad0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005538:	b110      	cbz	r0, 8005540 <_dtoa_r+0x6a0>
 800553a:	f01a 0f01 	tst.w	sl, #1
 800553e:	d110      	bne.n	8005562 <_dtoa_r+0x6c2>
 8005540:	4620      	mov	r0, r4
 8005542:	ee18 1a10 	vmov	r1, s16
 8005546:	f000 fae5 	bl	8005b14 <_Bfree>
 800554a:	2300      	movs	r3, #0
 800554c:	9800      	ldr	r0, [sp, #0]
 800554e:	702b      	strb	r3, [r5, #0]
 8005550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005552:	3001      	adds	r0, #1
 8005554:	6018      	str	r0, [r3, #0]
 8005556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005558:	2b00      	cmp	r3, #0
 800555a:	f43f acf1 	beq.w	8004f40 <_dtoa_r+0xa0>
 800555e:	601d      	str	r5, [r3, #0]
 8005560:	e4ee      	b.n	8004f40 <_dtoa_r+0xa0>
 8005562:	9f00      	ldr	r7, [sp, #0]
 8005564:	462b      	mov	r3, r5
 8005566:	461d      	mov	r5, r3
 8005568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800556c:	2a39      	cmp	r2, #57	; 0x39
 800556e:	d106      	bne.n	800557e <_dtoa_r+0x6de>
 8005570:	9a01      	ldr	r2, [sp, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d1f7      	bne.n	8005566 <_dtoa_r+0x6c6>
 8005576:	9901      	ldr	r1, [sp, #4]
 8005578:	2230      	movs	r2, #48	; 0x30
 800557a:	3701      	adds	r7, #1
 800557c:	700a      	strb	r2, [r1, #0]
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	3201      	adds	r2, #1
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e790      	b.n	80054a8 <_dtoa_r+0x608>
 8005586:	4ba6      	ldr	r3, [pc, #664]	; (8005820 <_dtoa_r+0x980>)
 8005588:	2200      	movs	r2, #0
 800558a:	f7fb f83d 	bl	8000608 <__aeabi_dmul>
 800558e:	2200      	movs	r2, #0
 8005590:	2300      	movs	r3, #0
 8005592:	4606      	mov	r6, r0
 8005594:	460f      	mov	r7, r1
 8005596:	f7fb fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800559a:	2800      	cmp	r0, #0
 800559c:	d09d      	beq.n	80054da <_dtoa_r+0x63a>
 800559e:	e7cf      	b.n	8005540 <_dtoa_r+0x6a0>
 80055a0:	9a08      	ldr	r2, [sp, #32]
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	f000 80d7 	beq.w	8005756 <_dtoa_r+0x8b6>
 80055a8:	9a06      	ldr	r2, [sp, #24]
 80055aa:	2a01      	cmp	r2, #1
 80055ac:	f300 80ba 	bgt.w	8005724 <_dtoa_r+0x884>
 80055b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	f000 80b2 	beq.w	800571c <_dtoa_r+0x87c>
 80055b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055bc:	9e07      	ldr	r6, [sp, #28]
 80055be:	9d04      	ldr	r5, [sp, #16]
 80055c0:	9a04      	ldr	r2, [sp, #16]
 80055c2:	441a      	add	r2, r3
 80055c4:	9204      	str	r2, [sp, #16]
 80055c6:	9a05      	ldr	r2, [sp, #20]
 80055c8:	2101      	movs	r1, #1
 80055ca:	441a      	add	r2, r3
 80055cc:	4620      	mov	r0, r4
 80055ce:	9205      	str	r2, [sp, #20]
 80055d0:	f000 fb58 	bl	8005c84 <__i2b>
 80055d4:	4607      	mov	r7, r0
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	dd0c      	ble.n	80055f4 <_dtoa_r+0x754>
 80055da:	9b05      	ldr	r3, [sp, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dd09      	ble.n	80055f4 <_dtoa_r+0x754>
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	9a04      	ldr	r2, [sp, #16]
 80055e4:	bfa8      	it	ge
 80055e6:	462b      	movge	r3, r5
 80055e8:	1ad2      	subs	r2, r2, r3
 80055ea:	9204      	str	r2, [sp, #16]
 80055ec:	9a05      	ldr	r2, [sp, #20]
 80055ee:	1aed      	subs	r5, r5, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	b31b      	cbz	r3, 8005640 <_dtoa_r+0x7a0>
 80055f8:	9b08      	ldr	r3, [sp, #32]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80af 	beq.w	800575e <_dtoa_r+0x8be>
 8005600:	2e00      	cmp	r6, #0
 8005602:	dd13      	ble.n	800562c <_dtoa_r+0x78c>
 8005604:	4639      	mov	r1, r7
 8005606:	4632      	mov	r2, r6
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fbfb 	bl	8005e04 <__pow5mult>
 800560e:	ee18 2a10 	vmov	r2, s16
 8005612:	4601      	mov	r1, r0
 8005614:	4607      	mov	r7, r0
 8005616:	4620      	mov	r0, r4
 8005618:	f000 fb4a 	bl	8005cb0 <__multiply>
 800561c:	ee18 1a10 	vmov	r1, s16
 8005620:	4680      	mov	r8, r0
 8005622:	4620      	mov	r0, r4
 8005624:	f000 fa76 	bl	8005b14 <_Bfree>
 8005628:	ee08 8a10 	vmov	s16, r8
 800562c:	9b07      	ldr	r3, [sp, #28]
 800562e:	1b9a      	subs	r2, r3, r6
 8005630:	d006      	beq.n	8005640 <_dtoa_r+0x7a0>
 8005632:	ee18 1a10 	vmov	r1, s16
 8005636:	4620      	mov	r0, r4
 8005638:	f000 fbe4 	bl	8005e04 <__pow5mult>
 800563c:	ee08 0a10 	vmov	s16, r0
 8005640:	2101      	movs	r1, #1
 8005642:	4620      	mov	r0, r4
 8005644:	f000 fb1e 	bl	8005c84 <__i2b>
 8005648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	4606      	mov	r6, r0
 800564e:	f340 8088 	ble.w	8005762 <_dtoa_r+0x8c2>
 8005652:	461a      	mov	r2, r3
 8005654:	4601      	mov	r1, r0
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fbd4 	bl	8005e04 <__pow5mult>
 800565c:	9b06      	ldr	r3, [sp, #24]
 800565e:	2b01      	cmp	r3, #1
 8005660:	4606      	mov	r6, r0
 8005662:	f340 8081 	ble.w	8005768 <_dtoa_r+0x8c8>
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	6933      	ldr	r3, [r6, #16]
 800566c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005670:	6918      	ldr	r0, [r3, #16]
 8005672:	f000 fab7 	bl	8005be4 <__hi0bits>
 8005676:	f1c0 0020 	rsb	r0, r0, #32
 800567a:	9b05      	ldr	r3, [sp, #20]
 800567c:	4418      	add	r0, r3
 800567e:	f010 001f 	ands.w	r0, r0, #31
 8005682:	f000 8092 	beq.w	80057aa <_dtoa_r+0x90a>
 8005686:	f1c0 0320 	rsb	r3, r0, #32
 800568a:	2b04      	cmp	r3, #4
 800568c:	f340 808a 	ble.w	80057a4 <_dtoa_r+0x904>
 8005690:	f1c0 001c 	rsb	r0, r0, #28
 8005694:	9b04      	ldr	r3, [sp, #16]
 8005696:	4403      	add	r3, r0
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	9b05      	ldr	r3, [sp, #20]
 800569c:	4403      	add	r3, r0
 800569e:	4405      	add	r5, r0
 80056a0:	9305      	str	r3, [sp, #20]
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd07      	ble.n	80056b8 <_dtoa_r+0x818>
 80056a8:	ee18 1a10 	vmov	r1, s16
 80056ac:	461a      	mov	r2, r3
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 fc02 	bl	8005eb8 <__lshift>
 80056b4:	ee08 0a10 	vmov	s16, r0
 80056b8:	9b05      	ldr	r3, [sp, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	dd05      	ble.n	80056ca <_dtoa_r+0x82a>
 80056be:	4631      	mov	r1, r6
 80056c0:	461a      	mov	r2, r3
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fbf8 	bl	8005eb8 <__lshift>
 80056c8:	4606      	mov	r6, r0
 80056ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d06e      	beq.n	80057ae <_dtoa_r+0x90e>
 80056d0:	ee18 0a10 	vmov	r0, s16
 80056d4:	4631      	mov	r1, r6
 80056d6:	f000 fc5f 	bl	8005f98 <__mcmp>
 80056da:	2800      	cmp	r0, #0
 80056dc:	da67      	bge.n	80057ae <_dtoa_r+0x90e>
 80056de:	9b00      	ldr	r3, [sp, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	ee18 1a10 	vmov	r1, s16
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	220a      	movs	r2, #10
 80056ea:	2300      	movs	r3, #0
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fa33 	bl	8005b58 <__multadd>
 80056f2:	9b08      	ldr	r3, [sp, #32]
 80056f4:	ee08 0a10 	vmov	s16, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 81b1 	beq.w	8005a60 <_dtoa_r+0xbc0>
 80056fe:	2300      	movs	r3, #0
 8005700:	4639      	mov	r1, r7
 8005702:	220a      	movs	r2, #10
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fa27 	bl	8005b58 <__multadd>
 800570a:	9b02      	ldr	r3, [sp, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	4607      	mov	r7, r0
 8005710:	f300 808e 	bgt.w	8005830 <_dtoa_r+0x990>
 8005714:	9b06      	ldr	r3, [sp, #24]
 8005716:	2b02      	cmp	r3, #2
 8005718:	dc51      	bgt.n	80057be <_dtoa_r+0x91e>
 800571a:	e089      	b.n	8005830 <_dtoa_r+0x990>
 800571c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800571e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005722:	e74b      	b.n	80055bc <_dtoa_r+0x71c>
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	1e5e      	subs	r6, r3, #1
 8005728:	9b07      	ldr	r3, [sp, #28]
 800572a:	42b3      	cmp	r3, r6
 800572c:	bfbf      	itttt	lt
 800572e:	9b07      	ldrlt	r3, [sp, #28]
 8005730:	9607      	strlt	r6, [sp, #28]
 8005732:	1af2      	sublt	r2, r6, r3
 8005734:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005736:	bfb6      	itet	lt
 8005738:	189b      	addlt	r3, r3, r2
 800573a:	1b9e      	subge	r6, r3, r6
 800573c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	bfb8      	it	lt
 8005742:	2600      	movlt	r6, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	bfb7      	itett	lt
 8005748:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800574c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005750:	1a9d      	sublt	r5, r3, r2
 8005752:	2300      	movlt	r3, #0
 8005754:	e734      	b.n	80055c0 <_dtoa_r+0x720>
 8005756:	9e07      	ldr	r6, [sp, #28]
 8005758:	9d04      	ldr	r5, [sp, #16]
 800575a:	9f08      	ldr	r7, [sp, #32]
 800575c:	e73b      	b.n	80055d6 <_dtoa_r+0x736>
 800575e:	9a07      	ldr	r2, [sp, #28]
 8005760:	e767      	b.n	8005632 <_dtoa_r+0x792>
 8005762:	9b06      	ldr	r3, [sp, #24]
 8005764:	2b01      	cmp	r3, #1
 8005766:	dc18      	bgt.n	800579a <_dtoa_r+0x8fa>
 8005768:	f1ba 0f00 	cmp.w	sl, #0
 800576c:	d115      	bne.n	800579a <_dtoa_r+0x8fa>
 800576e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005772:	b993      	cbnz	r3, 800579a <_dtoa_r+0x8fa>
 8005774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005778:	0d1b      	lsrs	r3, r3, #20
 800577a:	051b      	lsls	r3, r3, #20
 800577c:	b183      	cbz	r3, 80057a0 <_dtoa_r+0x900>
 800577e:	9b04      	ldr	r3, [sp, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	9b05      	ldr	r3, [sp, #20]
 8005786:	3301      	adds	r3, #1
 8005788:	9305      	str	r3, [sp, #20]
 800578a:	f04f 0801 	mov.w	r8, #1
 800578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	f47f af6a 	bne.w	800566a <_dtoa_r+0x7ca>
 8005796:	2001      	movs	r0, #1
 8005798:	e76f      	b.n	800567a <_dtoa_r+0x7da>
 800579a:	f04f 0800 	mov.w	r8, #0
 800579e:	e7f6      	b.n	800578e <_dtoa_r+0x8ee>
 80057a0:	4698      	mov	r8, r3
 80057a2:	e7f4      	b.n	800578e <_dtoa_r+0x8ee>
 80057a4:	f43f af7d 	beq.w	80056a2 <_dtoa_r+0x802>
 80057a8:	4618      	mov	r0, r3
 80057aa:	301c      	adds	r0, #28
 80057ac:	e772      	b.n	8005694 <_dtoa_r+0x7f4>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dc37      	bgt.n	8005824 <_dtoa_r+0x984>
 80057b4:	9b06      	ldr	r3, [sp, #24]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	dd34      	ble.n	8005824 <_dtoa_r+0x984>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	b96b      	cbnz	r3, 80057de <_dtoa_r+0x93e>
 80057c2:	4631      	mov	r1, r6
 80057c4:	2205      	movs	r2, #5
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 f9c6 	bl	8005b58 <__multadd>
 80057cc:	4601      	mov	r1, r0
 80057ce:	4606      	mov	r6, r0
 80057d0:	ee18 0a10 	vmov	r0, s16
 80057d4:	f000 fbe0 	bl	8005f98 <__mcmp>
 80057d8:	2800      	cmp	r0, #0
 80057da:	f73f adbb 	bgt.w	8005354 <_dtoa_r+0x4b4>
 80057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e0:	9d01      	ldr	r5, [sp, #4]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	4631      	mov	r1, r6
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 f991 	bl	8005b14 <_Bfree>
 80057f2:	2f00      	cmp	r7, #0
 80057f4:	f43f aea4 	beq.w	8005540 <_dtoa_r+0x6a0>
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	d005      	beq.n	800580a <_dtoa_r+0x96a>
 80057fe:	45b8      	cmp	r8, r7
 8005800:	d003      	beq.n	800580a <_dtoa_r+0x96a>
 8005802:	4641      	mov	r1, r8
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f985 	bl	8005b14 <_Bfree>
 800580a:	4639      	mov	r1, r7
 800580c:	4620      	mov	r0, r4
 800580e:	f000 f981 	bl	8005b14 <_Bfree>
 8005812:	e695      	b.n	8005540 <_dtoa_r+0x6a0>
 8005814:	2600      	movs	r6, #0
 8005816:	4637      	mov	r7, r6
 8005818:	e7e1      	b.n	80057de <_dtoa_r+0x93e>
 800581a:	9700      	str	r7, [sp, #0]
 800581c:	4637      	mov	r7, r6
 800581e:	e599      	b.n	8005354 <_dtoa_r+0x4b4>
 8005820:	40240000 	.word	0x40240000
 8005824:	9b08      	ldr	r3, [sp, #32]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80ca 	beq.w	80059c0 <_dtoa_r+0xb20>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	9302      	str	r3, [sp, #8]
 8005830:	2d00      	cmp	r5, #0
 8005832:	dd05      	ble.n	8005840 <_dtoa_r+0x9a0>
 8005834:	4639      	mov	r1, r7
 8005836:	462a      	mov	r2, r5
 8005838:	4620      	mov	r0, r4
 800583a:	f000 fb3d 	bl	8005eb8 <__lshift>
 800583e:	4607      	mov	r7, r0
 8005840:	f1b8 0f00 	cmp.w	r8, #0
 8005844:	d05b      	beq.n	80058fe <_dtoa_r+0xa5e>
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4620      	mov	r0, r4
 800584a:	f000 f923 	bl	8005a94 <_Balloc>
 800584e:	4605      	mov	r5, r0
 8005850:	b928      	cbnz	r0, 800585e <_dtoa_r+0x9be>
 8005852:	4b87      	ldr	r3, [pc, #540]	; (8005a70 <_dtoa_r+0xbd0>)
 8005854:	4602      	mov	r2, r0
 8005856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800585a:	f7ff bb3b 	b.w	8004ed4 <_dtoa_r+0x34>
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	3202      	adds	r2, #2
 8005862:	0092      	lsls	r2, r2, #2
 8005864:	f107 010c 	add.w	r1, r7, #12
 8005868:	300c      	adds	r0, #12
 800586a:	f7fe fd61 	bl	8004330 <memcpy>
 800586e:	2201      	movs	r2, #1
 8005870:	4629      	mov	r1, r5
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fb20 	bl	8005eb8 <__lshift>
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	f103 0901 	add.w	r9, r3, #1
 800587e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005882:	4413      	add	r3, r2
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	f00a 0301 	and.w	r3, sl, #1
 800588a:	46b8      	mov	r8, r7
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	4607      	mov	r7, r0
 8005890:	4631      	mov	r1, r6
 8005892:	ee18 0a10 	vmov	r0, s16
 8005896:	f7ff fa77 	bl	8004d88 <quorem>
 800589a:	4641      	mov	r1, r8
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80058a2:	ee18 0a10 	vmov	r0, s16
 80058a6:	f000 fb77 	bl	8005f98 <__mcmp>
 80058aa:	463a      	mov	r2, r7
 80058ac:	9003      	str	r0, [sp, #12]
 80058ae:	4631      	mov	r1, r6
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 fb8d 	bl	8005fd0 <__mdiff>
 80058b6:	68c2      	ldr	r2, [r0, #12]
 80058b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80058bc:	4605      	mov	r5, r0
 80058be:	bb02      	cbnz	r2, 8005902 <_dtoa_r+0xa62>
 80058c0:	4601      	mov	r1, r0
 80058c2:	ee18 0a10 	vmov	r0, s16
 80058c6:	f000 fb67 	bl	8005f98 <__mcmp>
 80058ca:	4602      	mov	r2, r0
 80058cc:	4629      	mov	r1, r5
 80058ce:	4620      	mov	r0, r4
 80058d0:	9207      	str	r2, [sp, #28]
 80058d2:	f000 f91f 	bl	8005b14 <_Bfree>
 80058d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80058da:	ea43 0102 	orr.w	r1, r3, r2
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	464d      	mov	r5, r9
 80058e4:	d10f      	bne.n	8005906 <_dtoa_r+0xa66>
 80058e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058ea:	d02a      	beq.n	8005942 <_dtoa_r+0xaa2>
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd02      	ble.n	80058f8 <_dtoa_r+0xa58>
 80058f2:	9b02      	ldr	r3, [sp, #8]
 80058f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80058f8:	f88b a000 	strb.w	sl, [fp]
 80058fc:	e775      	b.n	80057ea <_dtoa_r+0x94a>
 80058fe:	4638      	mov	r0, r7
 8005900:	e7ba      	b.n	8005878 <_dtoa_r+0x9d8>
 8005902:	2201      	movs	r2, #1
 8005904:	e7e2      	b.n	80058cc <_dtoa_r+0xa2c>
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	db04      	blt.n	8005916 <_dtoa_r+0xa76>
 800590c:	9906      	ldr	r1, [sp, #24]
 800590e:	430b      	orrs	r3, r1
 8005910:	9904      	ldr	r1, [sp, #16]
 8005912:	430b      	orrs	r3, r1
 8005914:	d122      	bne.n	800595c <_dtoa_r+0xabc>
 8005916:	2a00      	cmp	r2, #0
 8005918:	ddee      	ble.n	80058f8 <_dtoa_r+0xa58>
 800591a:	ee18 1a10 	vmov	r1, s16
 800591e:	2201      	movs	r2, #1
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fac9 	bl	8005eb8 <__lshift>
 8005926:	4631      	mov	r1, r6
 8005928:	ee08 0a10 	vmov	s16, r0
 800592c:	f000 fb34 	bl	8005f98 <__mcmp>
 8005930:	2800      	cmp	r0, #0
 8005932:	dc03      	bgt.n	800593c <_dtoa_r+0xa9c>
 8005934:	d1e0      	bne.n	80058f8 <_dtoa_r+0xa58>
 8005936:	f01a 0f01 	tst.w	sl, #1
 800593a:	d0dd      	beq.n	80058f8 <_dtoa_r+0xa58>
 800593c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005940:	d1d7      	bne.n	80058f2 <_dtoa_r+0xa52>
 8005942:	2339      	movs	r3, #57	; 0x39
 8005944:	f88b 3000 	strb.w	r3, [fp]
 8005948:	462b      	mov	r3, r5
 800594a:	461d      	mov	r5, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005952:	2a39      	cmp	r2, #57	; 0x39
 8005954:	d071      	beq.n	8005a3a <_dtoa_r+0xb9a>
 8005956:	3201      	adds	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e746      	b.n	80057ea <_dtoa_r+0x94a>
 800595c:	2a00      	cmp	r2, #0
 800595e:	dd07      	ble.n	8005970 <_dtoa_r+0xad0>
 8005960:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005964:	d0ed      	beq.n	8005942 <_dtoa_r+0xaa2>
 8005966:	f10a 0301 	add.w	r3, sl, #1
 800596a:	f88b 3000 	strb.w	r3, [fp]
 800596e:	e73c      	b.n	80057ea <_dtoa_r+0x94a>
 8005970:	9b05      	ldr	r3, [sp, #20]
 8005972:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005976:	4599      	cmp	r9, r3
 8005978:	d047      	beq.n	8005a0a <_dtoa_r+0xb6a>
 800597a:	ee18 1a10 	vmov	r1, s16
 800597e:	2300      	movs	r3, #0
 8005980:	220a      	movs	r2, #10
 8005982:	4620      	mov	r0, r4
 8005984:	f000 f8e8 	bl	8005b58 <__multadd>
 8005988:	45b8      	cmp	r8, r7
 800598a:	ee08 0a10 	vmov	s16, r0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	f04f 020a 	mov.w	r2, #10
 8005996:	4641      	mov	r1, r8
 8005998:	4620      	mov	r0, r4
 800599a:	d106      	bne.n	80059aa <_dtoa_r+0xb0a>
 800599c:	f000 f8dc 	bl	8005b58 <__multadd>
 80059a0:	4680      	mov	r8, r0
 80059a2:	4607      	mov	r7, r0
 80059a4:	f109 0901 	add.w	r9, r9, #1
 80059a8:	e772      	b.n	8005890 <_dtoa_r+0x9f0>
 80059aa:	f000 f8d5 	bl	8005b58 <__multadd>
 80059ae:	4639      	mov	r1, r7
 80059b0:	4680      	mov	r8, r0
 80059b2:	2300      	movs	r3, #0
 80059b4:	220a      	movs	r2, #10
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 f8ce 	bl	8005b58 <__multadd>
 80059bc:	4607      	mov	r7, r0
 80059be:	e7f1      	b.n	80059a4 <_dtoa_r+0xb04>
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	9d01      	ldr	r5, [sp, #4]
 80059c6:	ee18 0a10 	vmov	r0, s16
 80059ca:	4631      	mov	r1, r6
 80059cc:	f7ff f9dc 	bl	8004d88 <quorem>
 80059d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80059d4:	9b01      	ldr	r3, [sp, #4]
 80059d6:	f805 ab01 	strb.w	sl, [r5], #1
 80059da:	1aea      	subs	r2, r5, r3
 80059dc:	9b02      	ldr	r3, [sp, #8]
 80059de:	4293      	cmp	r3, r2
 80059e0:	dd09      	ble.n	80059f6 <_dtoa_r+0xb56>
 80059e2:	ee18 1a10 	vmov	r1, s16
 80059e6:	2300      	movs	r3, #0
 80059e8:	220a      	movs	r2, #10
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 f8b4 	bl	8005b58 <__multadd>
 80059f0:	ee08 0a10 	vmov	s16, r0
 80059f4:	e7e7      	b.n	80059c6 <_dtoa_r+0xb26>
 80059f6:	9b02      	ldr	r3, [sp, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfc8      	it	gt
 80059fc:	461d      	movgt	r5, r3
 80059fe:	9b01      	ldr	r3, [sp, #4]
 8005a00:	bfd8      	it	le
 8005a02:	2501      	movle	r5, #1
 8005a04:	441d      	add	r5, r3
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	ee18 1a10 	vmov	r1, s16
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 fa51 	bl	8005eb8 <__lshift>
 8005a16:	4631      	mov	r1, r6
 8005a18:	ee08 0a10 	vmov	s16, r0
 8005a1c:	f000 fabc 	bl	8005f98 <__mcmp>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	dc91      	bgt.n	8005948 <_dtoa_r+0xaa8>
 8005a24:	d102      	bne.n	8005a2c <_dtoa_r+0xb8c>
 8005a26:	f01a 0f01 	tst.w	sl, #1
 8005a2a:	d18d      	bne.n	8005948 <_dtoa_r+0xaa8>
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	461d      	mov	r5, r3
 8005a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a34:	2a30      	cmp	r2, #48	; 0x30
 8005a36:	d0fa      	beq.n	8005a2e <_dtoa_r+0xb8e>
 8005a38:	e6d7      	b.n	80057ea <_dtoa_r+0x94a>
 8005a3a:	9a01      	ldr	r2, [sp, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d184      	bne.n	800594a <_dtoa_r+0xaaa>
 8005a40:	9b00      	ldr	r3, [sp, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2331      	movs	r3, #49	; 0x31
 8005a48:	7013      	strb	r3, [r2, #0]
 8005a4a:	e6ce      	b.n	80057ea <_dtoa_r+0x94a>
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <_dtoa_r+0xbd4>)
 8005a4e:	f7ff ba95 	b.w	8004f7c <_dtoa_r+0xdc>
 8005a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f47f aa6e 	bne.w	8004f36 <_dtoa_r+0x96>
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <_dtoa_r+0xbd8>)
 8005a5c:	f7ff ba8e 	b.w	8004f7c <_dtoa_r+0xdc>
 8005a60:	9b02      	ldr	r3, [sp, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dcae      	bgt.n	80059c4 <_dtoa_r+0xb24>
 8005a66:	9b06      	ldr	r3, [sp, #24]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	f73f aea8 	bgt.w	80057be <_dtoa_r+0x91e>
 8005a6e:	e7a9      	b.n	80059c4 <_dtoa_r+0xb24>
 8005a70:	08008224 	.word	0x08008224
 8005a74:	08008080 	.word	0x08008080
 8005a78:	080081a5 	.word	0x080081a5

08005a7c <_localeconv_r>:
 8005a7c:	4800      	ldr	r0, [pc, #0]	; (8005a80 <_localeconv_r+0x4>)
 8005a7e:	4770      	bx	lr
 8005a80:	20000174 	.word	0x20000174

08005a84 <malloc>:
 8005a84:	4b02      	ldr	r3, [pc, #8]	; (8005a90 <malloc+0xc>)
 8005a86:	4601      	mov	r1, r0
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	f000 bc09 	b.w	80062a0 <_malloc_r>
 8005a8e:	bf00      	nop
 8005a90:	20000020 	.word	0x20000020

08005a94 <_Balloc>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	b976      	cbnz	r6, 8005abc <_Balloc+0x28>
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff fff0 	bl	8005a84 <malloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6260      	str	r0, [r4, #36]	; 0x24
 8005aa8:	b920      	cbnz	r0, 8005ab4 <_Balloc+0x20>
 8005aaa:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <_Balloc+0x78>)
 8005aac:	4818      	ldr	r0, [pc, #96]	; (8005b10 <_Balloc+0x7c>)
 8005aae:	2166      	movs	r1, #102	; 0x66
 8005ab0:	f000 fdd6 	bl	8006660 <__assert_func>
 8005ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab8:	6006      	str	r6, [r0, #0]
 8005aba:	60c6      	str	r6, [r0, #12]
 8005abc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005abe:	68f3      	ldr	r3, [r6, #12]
 8005ac0:	b183      	cbz	r3, 8005ae4 <_Balloc+0x50>
 8005ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aca:	b9b8      	cbnz	r0, 8005afc <_Balloc+0x68>
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f605 	lsl.w	r6, r1, r5
 8005ad2:	1d72      	adds	r2, r6, #5
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 fb60 	bl	800619c <_calloc_r>
 8005adc:	b160      	cbz	r0, 8005af8 <_Balloc+0x64>
 8005ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ae2:	e00e      	b.n	8005b02 <_Balloc+0x6e>
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fb57 	bl	800619c <_calloc_r>
 8005aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af0:	60f0      	str	r0, [r6, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e4      	bne.n	8005ac2 <_Balloc+0x2e>
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b02:	2300      	movs	r3, #0
 8005b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b08:	e7f7      	b.n	8005afa <_Balloc+0x66>
 8005b0a:	bf00      	nop
 8005b0c:	080081b2 	.word	0x080081b2
 8005b10:	08008235 	.word	0x08008235

08005b14 <_Bfree>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b976      	cbnz	r6, 8005b3c <_Bfree+0x28>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f7ff ffb0 	bl	8005a84 <malloc>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6268      	str	r0, [r5, #36]	; 0x24
 8005b28:	b920      	cbnz	r0, 8005b34 <_Bfree+0x20>
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <_Bfree+0x3c>)
 8005b2c:	4809      	ldr	r0, [pc, #36]	; (8005b54 <_Bfree+0x40>)
 8005b2e:	218a      	movs	r1, #138	; 0x8a
 8005b30:	f000 fd96 	bl	8006660 <__assert_func>
 8005b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b38:	6006      	str	r6, [r0, #0]
 8005b3a:	60c6      	str	r6, [r0, #12]
 8005b3c:	b13c      	cbz	r4, 8005b4e <_Bfree+0x3a>
 8005b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b48:	6021      	str	r1, [r4, #0]
 8005b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	080081b2 	.word	0x080081b2
 8005b54:	08008235 	.word	0x08008235

08005b58 <__multadd>:
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	690d      	ldr	r5, [r1, #16]
 8005b5e:	4607      	mov	r7, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	461e      	mov	r6, r3
 8005b64:	f101 0c14 	add.w	ip, r1, #20
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	fb02 6101 	mla	r1, r2, r1, r6
 8005b74:	0c1e      	lsrs	r6, r3, #16
 8005b76:	0c0b      	lsrs	r3, r1, #16
 8005b78:	fb02 3306 	mla	r3, r2, r6, r3
 8005b7c:	b289      	uxth	r1, r1
 8005b7e:	3001      	adds	r0, #1
 8005b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b84:	4285      	cmp	r5, r0
 8005b86:	f84c 1b04 	str.w	r1, [ip], #4
 8005b8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b8e:	dcec      	bgt.n	8005b6a <__multadd+0x12>
 8005b90:	b30e      	cbz	r6, 8005bd6 <__multadd+0x7e>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc19      	bgt.n	8005bcc <__multadd+0x74>
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	f7ff ff79 	bl	8005a94 <_Balloc>
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__multadd+0x5a>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <__multadd+0x84>)
 8005baa:	480d      	ldr	r0, [pc, #52]	; (8005be0 <__multadd+0x88>)
 8005bac:	21b5      	movs	r1, #181	; 0xb5
 8005bae:	f000 fd57 	bl	8006660 <__assert_func>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	f104 010c 	add.w	r1, r4, #12
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f7fe fbb7 	bl	8004330 <memcpy>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ffa5 	bl	8005b14 <_Bfree>
 8005bca:	4644      	mov	r4, r8
 8005bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	615e      	str	r6, [r3, #20]
 8005bd4:	6125      	str	r5, [r4, #16]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	08008224 	.word	0x08008224
 8005be0:	08008235 	.word	0x08008235

08005be4 <__hi0bits>:
 8005be4:	0c03      	lsrs	r3, r0, #16
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	b9d3      	cbnz	r3, 8005c20 <__hi0bits+0x3c>
 8005bea:	0400      	lsls	r0, r0, #16
 8005bec:	2310      	movs	r3, #16
 8005bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bf2:	bf04      	itt	eq
 8005bf4:	0200      	lsleq	r0, r0, #8
 8005bf6:	3308      	addeq	r3, #8
 8005bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bfc:	bf04      	itt	eq
 8005bfe:	0100      	lsleq	r0, r0, #4
 8005c00:	3304      	addeq	r3, #4
 8005c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c06:	bf04      	itt	eq
 8005c08:	0080      	lsleq	r0, r0, #2
 8005c0a:	3302      	addeq	r3, #2
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	db05      	blt.n	8005c1c <__hi0bits+0x38>
 8005c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c14:	f103 0301 	add.w	r3, r3, #1
 8005c18:	bf08      	it	eq
 8005c1a:	2320      	moveq	r3, #32
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	4770      	bx	lr
 8005c20:	2300      	movs	r3, #0
 8005c22:	e7e4      	b.n	8005bee <__hi0bits+0xa>

08005c24 <__lo0bits>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	f013 0207 	ands.w	r2, r3, #7
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	d00b      	beq.n	8005c46 <__lo0bits+0x22>
 8005c2e:	07da      	lsls	r2, r3, #31
 8005c30:	d423      	bmi.n	8005c7a <__lo0bits+0x56>
 8005c32:	0798      	lsls	r0, r3, #30
 8005c34:	bf49      	itett	mi
 8005c36:	085b      	lsrmi	r3, r3, #1
 8005c38:	089b      	lsrpl	r3, r3, #2
 8005c3a:	2001      	movmi	r0, #1
 8005c3c:	600b      	strmi	r3, [r1, #0]
 8005c3e:	bf5c      	itt	pl
 8005c40:	600b      	strpl	r3, [r1, #0]
 8005c42:	2002      	movpl	r0, #2
 8005c44:	4770      	bx	lr
 8005c46:	b298      	uxth	r0, r3
 8005c48:	b9a8      	cbnz	r0, 8005c76 <__lo0bits+0x52>
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	b90a      	cbnz	r2, 8005c56 <__lo0bits+0x32>
 8005c52:	3008      	adds	r0, #8
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	071a      	lsls	r2, r3, #28
 8005c58:	bf04      	itt	eq
 8005c5a:	091b      	lsreq	r3, r3, #4
 8005c5c:	3004      	addeq	r0, #4
 8005c5e:	079a      	lsls	r2, r3, #30
 8005c60:	bf04      	itt	eq
 8005c62:	089b      	lsreq	r3, r3, #2
 8005c64:	3002      	addeq	r0, #2
 8005c66:	07da      	lsls	r2, r3, #31
 8005c68:	d403      	bmi.n	8005c72 <__lo0bits+0x4e>
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f100 0001 	add.w	r0, r0, #1
 8005c70:	d005      	beq.n	8005c7e <__lo0bits+0x5a>
 8005c72:	600b      	str	r3, [r1, #0]
 8005c74:	4770      	bx	lr
 8005c76:	4610      	mov	r0, r2
 8005c78:	e7e9      	b.n	8005c4e <__lo0bits+0x2a>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	4770      	bx	lr
 8005c7e:	2020      	movs	r0, #32
 8005c80:	4770      	bx	lr
	...

08005c84 <__i2b>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	2101      	movs	r1, #1
 8005c8a:	f7ff ff03 	bl	8005a94 <_Balloc>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	b928      	cbnz	r0, 8005c9e <__i2b+0x1a>
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <__i2b+0x24>)
 8005c94:	4805      	ldr	r0, [pc, #20]	; (8005cac <__i2b+0x28>)
 8005c96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c9a:	f000 fce1 	bl	8006660 <__assert_func>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6144      	str	r4, [r0, #20]
 8005ca2:	6103      	str	r3, [r0, #16]
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	bf00      	nop
 8005ca8:	08008224 	.word	0x08008224
 8005cac:	08008235 	.word	0x08008235

08005cb0 <__multiply>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4691      	mov	r9, r2
 8005cb6:	690a      	ldr	r2, [r1, #16]
 8005cb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bfb8      	it	lt
 8005cc0:	460b      	movlt	r3, r1
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	bfbc      	itt	lt
 8005cc6:	464c      	movlt	r4, r9
 8005cc8:	4699      	movlt	r9, r3
 8005cca:	6927      	ldr	r7, [r4, #16]
 8005ccc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	6861      	ldr	r1, [r4, #4]
 8005cd4:	eb07 060a 	add.w	r6, r7, sl
 8005cd8:	42b3      	cmp	r3, r6
 8005cda:	b085      	sub	sp, #20
 8005cdc:	bfb8      	it	lt
 8005cde:	3101      	addlt	r1, #1
 8005ce0:	f7ff fed8 	bl	8005a94 <_Balloc>
 8005ce4:	b930      	cbnz	r0, 8005cf4 <__multiply+0x44>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b44      	ldr	r3, [pc, #272]	; (8005dfc <__multiply+0x14c>)
 8005cea:	4845      	ldr	r0, [pc, #276]	; (8005e00 <__multiply+0x150>)
 8005cec:	f240 115d 	movw	r1, #349	; 0x15d
 8005cf0:	f000 fcb6 	bl	8006660 <__assert_func>
 8005cf4:	f100 0514 	add.w	r5, r0, #20
 8005cf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4543      	cmp	r3, r8
 8005d02:	d321      	bcc.n	8005d48 <__multiply+0x98>
 8005d04:	f104 0314 	add.w	r3, r4, #20
 8005d08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d0c:	f109 0314 	add.w	r3, r9, #20
 8005d10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d14:	9202      	str	r2, [sp, #8]
 8005d16:	1b3a      	subs	r2, r7, r4
 8005d18:	3a15      	subs	r2, #21
 8005d1a:	f022 0203 	bic.w	r2, r2, #3
 8005d1e:	3204      	adds	r2, #4
 8005d20:	f104 0115 	add.w	r1, r4, #21
 8005d24:	428f      	cmp	r7, r1
 8005d26:	bf38      	it	cc
 8005d28:	2204      	movcc	r2, #4
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	9a02      	ldr	r2, [sp, #8]
 8005d2e:	9303      	str	r3, [sp, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d80c      	bhi.n	8005d4e <__multiply+0x9e>
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	dd03      	ble.n	8005d40 <__multiply+0x90>
 8005d38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05a      	beq.n	8005df6 <__multiply+0x146>
 8005d40:	6106      	str	r6, [r0, #16]
 8005d42:	b005      	add	sp, #20
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	f843 2b04 	str.w	r2, [r3], #4
 8005d4c:	e7d8      	b.n	8005d00 <__multiply+0x50>
 8005d4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d52:	f1ba 0f00 	cmp.w	sl, #0
 8005d56:	d024      	beq.n	8005da2 <__multiply+0xf2>
 8005d58:	f104 0e14 	add.w	lr, r4, #20
 8005d5c:	46a9      	mov	r9, r5
 8005d5e:	f04f 0c00 	mov.w	ip, #0
 8005d62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d66:	f8d9 1000 	ldr.w	r1, [r9]
 8005d6a:	fa1f fb82 	uxth.w	fp, r2
 8005d6e:	b289      	uxth	r1, r1
 8005d70:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d78:	f8d9 2000 	ldr.w	r2, [r9]
 8005d7c:	4461      	add	r1, ip
 8005d7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d82:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d8a:	b289      	uxth	r1, r1
 8005d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d90:	4577      	cmp	r7, lr
 8005d92:	f849 1b04 	str.w	r1, [r9], #4
 8005d96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d9a:	d8e2      	bhi.n	8005d62 <__multiply+0xb2>
 8005d9c:	9a01      	ldr	r2, [sp, #4]
 8005d9e:	f845 c002 	str.w	ip, [r5, r2]
 8005da2:	9a03      	ldr	r2, [sp, #12]
 8005da4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005da8:	3304      	adds	r3, #4
 8005daa:	f1b9 0f00 	cmp.w	r9, #0
 8005dae:	d020      	beq.n	8005df2 <__multiply+0x142>
 8005db0:	6829      	ldr	r1, [r5, #0]
 8005db2:	f104 0c14 	add.w	ip, r4, #20
 8005db6:	46ae      	mov	lr, r5
 8005db8:	f04f 0a00 	mov.w	sl, #0
 8005dbc:	f8bc b000 	ldrh.w	fp, [ip]
 8005dc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dc4:	fb09 220b 	mla	r2, r9, fp, r2
 8005dc8:	4492      	add	sl, r2
 8005dca:	b289      	uxth	r1, r1
 8005dcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005dd0:	f84e 1b04 	str.w	r1, [lr], #4
 8005dd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005dd8:	f8be 1000 	ldrh.w	r1, [lr]
 8005ddc:	0c12      	lsrs	r2, r2, #16
 8005dde:	fb09 1102 	mla	r1, r9, r2, r1
 8005de2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005de6:	4567      	cmp	r7, ip
 8005de8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dec:	d8e6      	bhi.n	8005dbc <__multiply+0x10c>
 8005dee:	9a01      	ldr	r2, [sp, #4]
 8005df0:	50a9      	str	r1, [r5, r2]
 8005df2:	3504      	adds	r5, #4
 8005df4:	e79a      	b.n	8005d2c <__multiply+0x7c>
 8005df6:	3e01      	subs	r6, #1
 8005df8:	e79c      	b.n	8005d34 <__multiply+0x84>
 8005dfa:	bf00      	nop
 8005dfc:	08008224 	.word	0x08008224
 8005e00:	08008235 	.word	0x08008235

08005e04 <__pow5mult>:
 8005e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e08:	4615      	mov	r5, r2
 8005e0a:	f012 0203 	ands.w	r2, r2, #3
 8005e0e:	4606      	mov	r6, r0
 8005e10:	460f      	mov	r7, r1
 8005e12:	d007      	beq.n	8005e24 <__pow5mult+0x20>
 8005e14:	4c25      	ldr	r4, [pc, #148]	; (8005eac <__pow5mult+0xa8>)
 8005e16:	3a01      	subs	r2, #1
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e1e:	f7ff fe9b 	bl	8005b58 <__multadd>
 8005e22:	4607      	mov	r7, r0
 8005e24:	10ad      	asrs	r5, r5, #2
 8005e26:	d03d      	beq.n	8005ea4 <__pow5mult+0xa0>
 8005e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e2a:	b97c      	cbnz	r4, 8005e4c <__pow5mult+0x48>
 8005e2c:	2010      	movs	r0, #16
 8005e2e:	f7ff fe29 	bl	8005a84 <malloc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	6270      	str	r0, [r6, #36]	; 0x24
 8005e36:	b928      	cbnz	r0, 8005e44 <__pow5mult+0x40>
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <__pow5mult+0xac>)
 8005e3a:	481e      	ldr	r0, [pc, #120]	; (8005eb4 <__pow5mult+0xb0>)
 8005e3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e40:	f000 fc0e 	bl	8006660 <__assert_func>
 8005e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e48:	6004      	str	r4, [r0, #0]
 8005e4a:	60c4      	str	r4, [r0, #12]
 8005e4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e54:	b94c      	cbnz	r4, 8005e6a <__pow5mult+0x66>
 8005e56:	f240 2171 	movw	r1, #625	; 0x271
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7ff ff12 	bl	8005c84 <__i2b>
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e66:	4604      	mov	r4, r0
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	f04f 0900 	mov.w	r9, #0
 8005e6e:	07eb      	lsls	r3, r5, #31
 8005e70:	d50a      	bpl.n	8005e88 <__pow5mult+0x84>
 8005e72:	4639      	mov	r1, r7
 8005e74:	4622      	mov	r2, r4
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff ff1a 	bl	8005cb0 <__multiply>
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4680      	mov	r8, r0
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff fe47 	bl	8005b14 <_Bfree>
 8005e86:	4647      	mov	r7, r8
 8005e88:	106d      	asrs	r5, r5, #1
 8005e8a:	d00b      	beq.n	8005ea4 <__pow5mult+0xa0>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	b938      	cbnz	r0, 8005ea0 <__pow5mult+0x9c>
 8005e90:	4622      	mov	r2, r4
 8005e92:	4621      	mov	r1, r4
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff ff0b 	bl	8005cb0 <__multiply>
 8005e9a:	6020      	str	r0, [r4, #0]
 8005e9c:	f8c0 9000 	str.w	r9, [r0]
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	e7e4      	b.n	8005e6e <__pow5mult+0x6a>
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	bf00      	nop
 8005eac:	08008388 	.word	0x08008388
 8005eb0:	080081b2 	.word	0x080081b2
 8005eb4:	08008235 	.word	0x08008235

08005eb8 <__lshift>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	6849      	ldr	r1, [r1, #4]
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	4607      	mov	r7, r0
 8005eca:	4691      	mov	r9, r2
 8005ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ed0:	f108 0601 	add.w	r6, r8, #1
 8005ed4:	42b3      	cmp	r3, r6
 8005ed6:	db0b      	blt.n	8005ef0 <__lshift+0x38>
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff fddb 	bl	8005a94 <_Balloc>
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b948      	cbnz	r0, 8005ef6 <__lshift+0x3e>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <__lshift+0xd8>)
 8005ee6:	482b      	ldr	r0, [pc, #172]	; (8005f94 <__lshift+0xdc>)
 8005ee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005eec:	f000 fbb8 	bl	8006660 <__assert_func>
 8005ef0:	3101      	adds	r1, #1
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__lshift+0x1c>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f100 0114 	add.w	r1, r0, #20
 8005efc:	f100 0210 	add.w	r2, r0, #16
 8005f00:	4618      	mov	r0, r3
 8005f02:	4553      	cmp	r3, sl
 8005f04:	db37      	blt.n	8005f76 <__lshift+0xbe>
 8005f06:	6920      	ldr	r0, [r4, #16]
 8005f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f0c:	f104 0314 	add.w	r3, r4, #20
 8005f10:	f019 091f 	ands.w	r9, r9, #31
 8005f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f1c:	d02f      	beq.n	8005f7e <__lshift+0xc6>
 8005f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f22:	468a      	mov	sl, r1
 8005f24:	f04f 0c00 	mov.w	ip, #0
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	fa02 f209 	lsl.w	r2, r2, r9
 8005f2e:	ea42 020c 	orr.w	r2, r2, ip
 8005f32:	f84a 2b04 	str.w	r2, [sl], #4
 8005f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f40:	d8f2      	bhi.n	8005f28 <__lshift+0x70>
 8005f42:	1b03      	subs	r3, r0, r4
 8005f44:	3b15      	subs	r3, #21
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	f104 0215 	add.w	r2, r4, #21
 8005f50:	4290      	cmp	r0, r2
 8005f52:	bf38      	it	cc
 8005f54:	2304      	movcc	r3, #4
 8005f56:	f841 c003 	str.w	ip, [r1, r3]
 8005f5a:	f1bc 0f00 	cmp.w	ip, #0
 8005f5e:	d001      	beq.n	8005f64 <__lshift+0xac>
 8005f60:	f108 0602 	add.w	r6, r8, #2
 8005f64:	3e01      	subs	r6, #1
 8005f66:	4638      	mov	r0, r7
 8005f68:	612e      	str	r6, [r5, #16]
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	f7ff fdd2 	bl	8005b14 <_Bfree>
 8005f70:	4628      	mov	r0, r5
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	e7c1      	b.n	8005f02 <__lshift+0x4a>
 8005f7e:	3904      	subs	r1, #4
 8005f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f88:	4298      	cmp	r0, r3
 8005f8a:	d8f9      	bhi.n	8005f80 <__lshift+0xc8>
 8005f8c:	e7ea      	b.n	8005f64 <__lshift+0xac>
 8005f8e:	bf00      	nop
 8005f90:	08008224 	.word	0x08008224
 8005f94:	08008235 	.word	0x08008235

08005f98 <__mcmp>:
 8005f98:	b530      	push	{r4, r5, lr}
 8005f9a:	6902      	ldr	r2, [r0, #16]
 8005f9c:	690c      	ldr	r4, [r1, #16]
 8005f9e:	1b12      	subs	r2, r2, r4
 8005fa0:	d10e      	bne.n	8005fc0 <__mcmp+0x28>
 8005fa2:	f100 0314 	add.w	r3, r0, #20
 8005fa6:	3114      	adds	r1, #20
 8005fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d003      	beq.n	8005fc4 <__mcmp+0x2c>
 8005fbc:	d305      	bcc.n	8005fca <__mcmp+0x32>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	bd30      	pop	{r4, r5, pc}
 8005fc4:	4283      	cmp	r3, r0
 8005fc6:	d3f3      	bcc.n	8005fb0 <__mcmp+0x18>
 8005fc8:	e7fa      	b.n	8005fc0 <__mcmp+0x28>
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	e7f7      	b.n	8005fc0 <__mcmp+0x28>

08005fd0 <__mdiff>:
 8005fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4690      	mov	r8, r2
 8005fde:	f7ff ffdb 	bl	8005f98 <__mcmp>
 8005fe2:	1e05      	subs	r5, r0, #0
 8005fe4:	d110      	bne.n	8006008 <__mdiff+0x38>
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff fd53 	bl	8005a94 <_Balloc>
 8005fee:	b930      	cbnz	r0, 8005ffe <__mdiff+0x2e>
 8005ff0:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <__mdiff+0x10c>)
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	f240 2132 	movw	r1, #562	; 0x232
 8005ff8:	4839      	ldr	r0, [pc, #228]	; (80060e0 <__mdiff+0x110>)
 8005ffa:	f000 fb31 	bl	8006660 <__assert_func>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	bfa4      	itt	ge
 800600a:	4643      	movge	r3, r8
 800600c:	46a0      	movge	r8, r4
 800600e:	4630      	mov	r0, r6
 8006010:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006014:	bfa6      	itte	ge
 8006016:	461c      	movge	r4, r3
 8006018:	2500      	movge	r5, #0
 800601a:	2501      	movlt	r5, #1
 800601c:	f7ff fd3a 	bl	8005a94 <_Balloc>
 8006020:	b920      	cbnz	r0, 800602c <__mdiff+0x5c>
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <__mdiff+0x10c>)
 8006024:	4602      	mov	r2, r0
 8006026:	f44f 7110 	mov.w	r1, #576	; 0x240
 800602a:	e7e5      	b.n	8005ff8 <__mdiff+0x28>
 800602c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006030:	6926      	ldr	r6, [r4, #16]
 8006032:	60c5      	str	r5, [r0, #12]
 8006034:	f104 0914 	add.w	r9, r4, #20
 8006038:	f108 0514 	add.w	r5, r8, #20
 800603c:	f100 0e14 	add.w	lr, r0, #20
 8006040:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006044:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006048:	f108 0210 	add.w	r2, r8, #16
 800604c:	46f2      	mov	sl, lr
 800604e:	2100      	movs	r1, #0
 8006050:	f859 3b04 	ldr.w	r3, [r9], #4
 8006054:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006058:	fa1f f883 	uxth.w	r8, r3
 800605c:	fa11 f18b 	uxtah	r1, r1, fp
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	eba1 0808 	sub.w	r8, r1, r8
 8006066:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800606a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800606e:	fa1f f888 	uxth.w	r8, r8
 8006072:	1419      	asrs	r1, r3, #16
 8006074:	454e      	cmp	r6, r9
 8006076:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800607a:	f84a 3b04 	str.w	r3, [sl], #4
 800607e:	d8e7      	bhi.n	8006050 <__mdiff+0x80>
 8006080:	1b33      	subs	r3, r6, r4
 8006082:	3b15      	subs	r3, #21
 8006084:	f023 0303 	bic.w	r3, r3, #3
 8006088:	3304      	adds	r3, #4
 800608a:	3415      	adds	r4, #21
 800608c:	42a6      	cmp	r6, r4
 800608e:	bf38      	it	cc
 8006090:	2304      	movcc	r3, #4
 8006092:	441d      	add	r5, r3
 8006094:	4473      	add	r3, lr
 8006096:	469e      	mov	lr, r3
 8006098:	462e      	mov	r6, r5
 800609a:	4566      	cmp	r6, ip
 800609c:	d30e      	bcc.n	80060bc <__mdiff+0xec>
 800609e:	f10c 0203 	add.w	r2, ip, #3
 80060a2:	1b52      	subs	r2, r2, r5
 80060a4:	f022 0203 	bic.w	r2, r2, #3
 80060a8:	3d03      	subs	r5, #3
 80060aa:	45ac      	cmp	ip, r5
 80060ac:	bf38      	it	cc
 80060ae:	2200      	movcc	r2, #0
 80060b0:	441a      	add	r2, r3
 80060b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80060b6:	b17b      	cbz	r3, 80060d8 <__mdiff+0x108>
 80060b8:	6107      	str	r7, [r0, #16]
 80060ba:	e7a3      	b.n	8006004 <__mdiff+0x34>
 80060bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80060c0:	fa11 f288 	uxtah	r2, r1, r8
 80060c4:	1414      	asrs	r4, r2, #16
 80060c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060ca:	b292      	uxth	r2, r2
 80060cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060d0:	f84e 2b04 	str.w	r2, [lr], #4
 80060d4:	1421      	asrs	r1, r4, #16
 80060d6:	e7e0      	b.n	800609a <__mdiff+0xca>
 80060d8:	3f01      	subs	r7, #1
 80060da:	e7ea      	b.n	80060b2 <__mdiff+0xe2>
 80060dc:	08008224 	.word	0x08008224
 80060e0:	08008235 	.word	0x08008235

080060e4 <__d2b>:
 80060e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	4689      	mov	r9, r1
 80060ea:	2101      	movs	r1, #1
 80060ec:	ec57 6b10 	vmov	r6, r7, d0
 80060f0:	4690      	mov	r8, r2
 80060f2:	f7ff fccf 	bl	8005a94 <_Balloc>
 80060f6:	4604      	mov	r4, r0
 80060f8:	b930      	cbnz	r0, 8006108 <__d2b+0x24>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <__d2b+0xb0>)
 80060fe:	4826      	ldr	r0, [pc, #152]	; (8006198 <__d2b+0xb4>)
 8006100:	f240 310a 	movw	r1, #778	; 0x30a
 8006104:	f000 faac 	bl	8006660 <__assert_func>
 8006108:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800610c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006110:	bb35      	cbnz	r5, 8006160 <__d2b+0x7c>
 8006112:	2e00      	cmp	r6, #0
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	d028      	beq.n	800616a <__d2b+0x86>
 8006118:	4668      	mov	r0, sp
 800611a:	9600      	str	r6, [sp, #0]
 800611c:	f7ff fd82 	bl	8005c24 <__lo0bits>
 8006120:	9900      	ldr	r1, [sp, #0]
 8006122:	b300      	cbz	r0, 8006166 <__d2b+0x82>
 8006124:	9a01      	ldr	r2, [sp, #4]
 8006126:	f1c0 0320 	rsb	r3, r0, #32
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	430b      	orrs	r3, r1
 8006130:	40c2      	lsrs	r2, r0
 8006132:	6163      	str	r3, [r4, #20]
 8006134:	9201      	str	r2, [sp, #4]
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	61a3      	str	r3, [r4, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2202      	movne	r2, #2
 8006140:	2201      	moveq	r2, #1
 8006142:	6122      	str	r2, [r4, #16]
 8006144:	b1d5      	cbz	r5, 800617c <__d2b+0x98>
 8006146:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800614a:	4405      	add	r5, r0
 800614c:	f8c9 5000 	str.w	r5, [r9]
 8006150:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006154:	f8c8 0000 	str.w	r0, [r8]
 8006158:	4620      	mov	r0, r4
 800615a:	b003      	add	sp, #12
 800615c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006164:	e7d5      	b.n	8006112 <__d2b+0x2e>
 8006166:	6161      	str	r1, [r4, #20]
 8006168:	e7e5      	b.n	8006136 <__d2b+0x52>
 800616a:	a801      	add	r0, sp, #4
 800616c:	f7ff fd5a 	bl	8005c24 <__lo0bits>
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	6163      	str	r3, [r4, #20]
 8006174:	2201      	movs	r2, #1
 8006176:	6122      	str	r2, [r4, #16]
 8006178:	3020      	adds	r0, #32
 800617a:	e7e3      	b.n	8006144 <__d2b+0x60>
 800617c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006184:	f8c9 0000 	str.w	r0, [r9]
 8006188:	6918      	ldr	r0, [r3, #16]
 800618a:	f7ff fd2b 	bl	8005be4 <__hi0bits>
 800618e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006192:	e7df      	b.n	8006154 <__d2b+0x70>
 8006194:	08008224 	.word	0x08008224
 8006198:	08008235 	.word	0x08008235

0800619c <_calloc_r>:
 800619c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800619e:	fba1 2402 	umull	r2, r4, r1, r2
 80061a2:	b94c      	cbnz	r4, 80061b8 <_calloc_r+0x1c>
 80061a4:	4611      	mov	r1, r2
 80061a6:	9201      	str	r2, [sp, #4]
 80061a8:	f000 f87a 	bl	80062a0 <_malloc_r>
 80061ac:	9a01      	ldr	r2, [sp, #4]
 80061ae:	4605      	mov	r5, r0
 80061b0:	b930      	cbnz	r0, 80061c0 <_calloc_r+0x24>
 80061b2:	4628      	mov	r0, r5
 80061b4:	b003      	add	sp, #12
 80061b6:	bd30      	pop	{r4, r5, pc}
 80061b8:	220c      	movs	r2, #12
 80061ba:	6002      	str	r2, [r0, #0]
 80061bc:	2500      	movs	r5, #0
 80061be:	e7f8      	b.n	80061b2 <_calloc_r+0x16>
 80061c0:	4621      	mov	r1, r4
 80061c2:	f7fe f8c3 	bl	800434c <memset>
 80061c6:	e7f4      	b.n	80061b2 <_calloc_r+0x16>

080061c8 <_free_r>:
 80061c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ca:	2900      	cmp	r1, #0
 80061cc:	d044      	beq.n	8006258 <_free_r+0x90>
 80061ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d2:	9001      	str	r0, [sp, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f1a1 0404 	sub.w	r4, r1, #4
 80061da:	bfb8      	it	lt
 80061dc:	18e4      	addlt	r4, r4, r3
 80061de:	f000 fa9b 	bl	8006718 <__malloc_lock>
 80061e2:	4a1e      	ldr	r2, [pc, #120]	; (800625c <_free_r+0x94>)
 80061e4:	9801      	ldr	r0, [sp, #4]
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	b933      	cbnz	r3, 80061f8 <_free_r+0x30>
 80061ea:	6063      	str	r3, [r4, #4]
 80061ec:	6014      	str	r4, [r2, #0]
 80061ee:	b003      	add	sp, #12
 80061f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f4:	f000 ba96 	b.w	8006724 <__malloc_unlock>
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d908      	bls.n	800620e <_free_r+0x46>
 80061fc:	6825      	ldr	r5, [r4, #0]
 80061fe:	1961      	adds	r1, r4, r5
 8006200:	428b      	cmp	r3, r1
 8006202:	bf01      	itttt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	1949      	addeq	r1, r1, r5
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	e7ed      	b.n	80061ea <_free_r+0x22>
 800620e:	461a      	mov	r2, r3
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	b10b      	cbz	r3, 8006218 <_free_r+0x50>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d9fa      	bls.n	800620e <_free_r+0x46>
 8006218:	6811      	ldr	r1, [r2, #0]
 800621a:	1855      	adds	r5, r2, r1
 800621c:	42a5      	cmp	r5, r4
 800621e:	d10b      	bne.n	8006238 <_free_r+0x70>
 8006220:	6824      	ldr	r4, [r4, #0]
 8006222:	4421      	add	r1, r4
 8006224:	1854      	adds	r4, r2, r1
 8006226:	42a3      	cmp	r3, r4
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	d1e0      	bne.n	80061ee <_free_r+0x26>
 800622c:	681c      	ldr	r4, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	6053      	str	r3, [r2, #4]
 8006232:	4421      	add	r1, r4
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	e7da      	b.n	80061ee <_free_r+0x26>
 8006238:	d902      	bls.n	8006240 <_free_r+0x78>
 800623a:	230c      	movs	r3, #12
 800623c:	6003      	str	r3, [r0, #0]
 800623e:	e7d6      	b.n	80061ee <_free_r+0x26>
 8006240:	6825      	ldr	r5, [r4, #0]
 8006242:	1961      	adds	r1, r4, r5
 8006244:	428b      	cmp	r3, r1
 8006246:	bf04      	itt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	6063      	str	r3, [r4, #4]
 800624e:	bf04      	itt	eq
 8006250:	1949      	addeq	r1, r1, r5
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	6054      	str	r4, [r2, #4]
 8006256:	e7ca      	b.n	80061ee <_free_r+0x26>
 8006258:	b003      	add	sp, #12
 800625a:	bd30      	pop	{r4, r5, pc}
 800625c:	2000037c 	.word	0x2000037c

08006260 <sbrk_aligned>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4e0e      	ldr	r6, [pc, #56]	; (800629c <sbrk_aligned+0x3c>)
 8006264:	460c      	mov	r4, r1
 8006266:	6831      	ldr	r1, [r6, #0]
 8006268:	4605      	mov	r5, r0
 800626a:	b911      	cbnz	r1, 8006272 <sbrk_aligned+0x12>
 800626c:	f000 f9e8 	bl	8006640 <_sbrk_r>
 8006270:	6030      	str	r0, [r6, #0]
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f9e3 	bl	8006640 <_sbrk_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d00a      	beq.n	8006294 <sbrk_aligned+0x34>
 800627e:	1cc4      	adds	r4, r0, #3
 8006280:	f024 0403 	bic.w	r4, r4, #3
 8006284:	42a0      	cmp	r0, r4
 8006286:	d007      	beq.n	8006298 <sbrk_aligned+0x38>
 8006288:	1a21      	subs	r1, r4, r0
 800628a:	4628      	mov	r0, r5
 800628c:	f000 f9d8 	bl	8006640 <_sbrk_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d101      	bne.n	8006298 <sbrk_aligned+0x38>
 8006294:	f04f 34ff 	mov.w	r4, #4294967295
 8006298:	4620      	mov	r0, r4
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	20000380 	.word	0x20000380

080062a0 <_malloc_r>:
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	1ccd      	adds	r5, r1, #3
 80062a6:	f025 0503 	bic.w	r5, r5, #3
 80062aa:	3508      	adds	r5, #8
 80062ac:	2d0c      	cmp	r5, #12
 80062ae:	bf38      	it	cc
 80062b0:	250c      	movcc	r5, #12
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	4607      	mov	r7, r0
 80062b6:	db01      	blt.n	80062bc <_malloc_r+0x1c>
 80062b8:	42a9      	cmp	r1, r5
 80062ba:	d905      	bls.n	80062c8 <_malloc_r+0x28>
 80062bc:	230c      	movs	r3, #12
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	2600      	movs	r6, #0
 80062c2:	4630      	mov	r0, r6
 80062c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c8:	4e2e      	ldr	r6, [pc, #184]	; (8006384 <_malloc_r+0xe4>)
 80062ca:	f000 fa25 	bl	8006718 <__malloc_lock>
 80062ce:	6833      	ldr	r3, [r6, #0]
 80062d0:	461c      	mov	r4, r3
 80062d2:	bb34      	cbnz	r4, 8006322 <_malloc_r+0x82>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ffc2 	bl	8006260 <sbrk_aligned>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	4604      	mov	r4, r0
 80062e0:	d14d      	bne.n	800637e <_malloc_r+0xde>
 80062e2:	6834      	ldr	r4, [r6, #0]
 80062e4:	4626      	mov	r6, r4
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	d140      	bne.n	800636c <_malloc_r+0xcc>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	4631      	mov	r1, r6
 80062ee:	4638      	mov	r0, r7
 80062f0:	eb04 0803 	add.w	r8, r4, r3
 80062f4:	f000 f9a4 	bl	8006640 <_sbrk_r>
 80062f8:	4580      	cmp	r8, r0
 80062fa:	d13a      	bne.n	8006372 <_malloc_r+0xd2>
 80062fc:	6821      	ldr	r1, [r4, #0]
 80062fe:	3503      	adds	r5, #3
 8006300:	1a6d      	subs	r5, r5, r1
 8006302:	f025 0503 	bic.w	r5, r5, #3
 8006306:	3508      	adds	r5, #8
 8006308:	2d0c      	cmp	r5, #12
 800630a:	bf38      	it	cc
 800630c:	250c      	movcc	r5, #12
 800630e:	4629      	mov	r1, r5
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff ffa5 	bl	8006260 <sbrk_aligned>
 8006316:	3001      	adds	r0, #1
 8006318:	d02b      	beq.n	8006372 <_malloc_r+0xd2>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	442b      	add	r3, r5
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	e00e      	b.n	8006340 <_malloc_r+0xa0>
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	1b52      	subs	r2, r2, r5
 8006326:	d41e      	bmi.n	8006366 <_malloc_r+0xc6>
 8006328:	2a0b      	cmp	r2, #11
 800632a:	d916      	bls.n	800635a <_malloc_r+0xba>
 800632c:	1961      	adds	r1, r4, r5
 800632e:	42a3      	cmp	r3, r4
 8006330:	6025      	str	r5, [r4, #0]
 8006332:	bf18      	it	ne
 8006334:	6059      	strne	r1, [r3, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	bf08      	it	eq
 800633a:	6031      	streq	r1, [r6, #0]
 800633c:	5162      	str	r2, [r4, r5]
 800633e:	604b      	str	r3, [r1, #4]
 8006340:	4638      	mov	r0, r7
 8006342:	f104 060b 	add.w	r6, r4, #11
 8006346:	f000 f9ed 	bl	8006724 <__malloc_unlock>
 800634a:	f026 0607 	bic.w	r6, r6, #7
 800634e:	1d23      	adds	r3, r4, #4
 8006350:	1af2      	subs	r2, r6, r3
 8006352:	d0b6      	beq.n	80062c2 <_malloc_r+0x22>
 8006354:	1b9b      	subs	r3, r3, r6
 8006356:	50a3      	str	r3, [r4, r2]
 8006358:	e7b3      	b.n	80062c2 <_malloc_r+0x22>
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	42a3      	cmp	r3, r4
 800635e:	bf0c      	ite	eq
 8006360:	6032      	streq	r2, [r6, #0]
 8006362:	605a      	strne	r2, [r3, #4]
 8006364:	e7ec      	b.n	8006340 <_malloc_r+0xa0>
 8006366:	4623      	mov	r3, r4
 8006368:	6864      	ldr	r4, [r4, #4]
 800636a:	e7b2      	b.n	80062d2 <_malloc_r+0x32>
 800636c:	4634      	mov	r4, r6
 800636e:	6876      	ldr	r6, [r6, #4]
 8006370:	e7b9      	b.n	80062e6 <_malloc_r+0x46>
 8006372:	230c      	movs	r3, #12
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4638      	mov	r0, r7
 8006378:	f000 f9d4 	bl	8006724 <__malloc_unlock>
 800637c:	e7a1      	b.n	80062c2 <_malloc_r+0x22>
 800637e:	6025      	str	r5, [r4, #0]
 8006380:	e7de      	b.n	8006340 <_malloc_r+0xa0>
 8006382:	bf00      	nop
 8006384:	2000037c 	.word	0x2000037c

08006388 <__ssputs_r>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	688e      	ldr	r6, [r1, #8]
 800638e:	429e      	cmp	r6, r3
 8006390:	4682      	mov	sl, r0
 8006392:	460c      	mov	r4, r1
 8006394:	4690      	mov	r8, r2
 8006396:	461f      	mov	r7, r3
 8006398:	d838      	bhi.n	800640c <__ssputs_r+0x84>
 800639a:	898a      	ldrh	r2, [r1, #12]
 800639c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063a0:	d032      	beq.n	8006408 <__ssputs_r+0x80>
 80063a2:	6825      	ldr	r5, [r4, #0]
 80063a4:	6909      	ldr	r1, [r1, #16]
 80063a6:	eba5 0901 	sub.w	r9, r5, r1
 80063aa:	6965      	ldr	r5, [r4, #20]
 80063ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063b4:	3301      	adds	r3, #1
 80063b6:	444b      	add	r3, r9
 80063b8:	106d      	asrs	r5, r5, #1
 80063ba:	429d      	cmp	r5, r3
 80063bc:	bf38      	it	cc
 80063be:	461d      	movcc	r5, r3
 80063c0:	0553      	lsls	r3, r2, #21
 80063c2:	d531      	bpl.n	8006428 <__ssputs_r+0xa0>
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7ff ff6b 	bl	80062a0 <_malloc_r>
 80063ca:	4606      	mov	r6, r0
 80063cc:	b950      	cbnz	r0, 80063e4 <__ssputs_r+0x5c>
 80063ce:	230c      	movs	r3, #12
 80063d0:	f8ca 3000 	str.w	r3, [sl]
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e4:	6921      	ldr	r1, [r4, #16]
 80063e6:	464a      	mov	r2, r9
 80063e8:	f7fd ffa2 	bl	8004330 <memcpy>
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	6126      	str	r6, [r4, #16]
 80063fa:	6165      	str	r5, [r4, #20]
 80063fc:	444e      	add	r6, r9
 80063fe:	eba5 0509 	sub.w	r5, r5, r9
 8006402:	6026      	str	r6, [r4, #0]
 8006404:	60a5      	str	r5, [r4, #8]
 8006406:	463e      	mov	r6, r7
 8006408:	42be      	cmp	r6, r7
 800640a:	d900      	bls.n	800640e <__ssputs_r+0x86>
 800640c:	463e      	mov	r6, r7
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	4632      	mov	r2, r6
 8006412:	4641      	mov	r1, r8
 8006414:	f000 f966 	bl	80066e4 <memmove>
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	1b9b      	subs	r3, r3, r6
 800641c:	60a3      	str	r3, [r4, #8]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	4433      	add	r3, r6
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	2000      	movs	r0, #0
 8006426:	e7db      	b.n	80063e0 <__ssputs_r+0x58>
 8006428:	462a      	mov	r2, r5
 800642a:	f000 f981 	bl	8006730 <_realloc_r>
 800642e:	4606      	mov	r6, r0
 8006430:	2800      	cmp	r0, #0
 8006432:	d1e1      	bne.n	80063f8 <__ssputs_r+0x70>
 8006434:	6921      	ldr	r1, [r4, #16]
 8006436:	4650      	mov	r0, sl
 8006438:	f7ff fec6 	bl	80061c8 <_free_r>
 800643c:	e7c7      	b.n	80063ce <__ssputs_r+0x46>
	...

08006440 <_svfiprintf_r>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	4698      	mov	r8, r3
 8006446:	898b      	ldrh	r3, [r1, #12]
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	b09d      	sub	sp, #116	; 0x74
 800644c:	4607      	mov	r7, r0
 800644e:	460d      	mov	r5, r1
 8006450:	4614      	mov	r4, r2
 8006452:	d50e      	bpl.n	8006472 <_svfiprintf_r+0x32>
 8006454:	690b      	ldr	r3, [r1, #16]
 8006456:	b963      	cbnz	r3, 8006472 <_svfiprintf_r+0x32>
 8006458:	2140      	movs	r1, #64	; 0x40
 800645a:	f7ff ff21 	bl	80062a0 <_malloc_r>
 800645e:	6028      	str	r0, [r5, #0]
 8006460:	6128      	str	r0, [r5, #16]
 8006462:	b920      	cbnz	r0, 800646e <_svfiprintf_r+0x2e>
 8006464:	230c      	movs	r3, #12
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	e0d1      	b.n	8006612 <_svfiprintf_r+0x1d2>
 800646e:	2340      	movs	r3, #64	; 0x40
 8006470:	616b      	str	r3, [r5, #20]
 8006472:	2300      	movs	r3, #0
 8006474:	9309      	str	r3, [sp, #36]	; 0x24
 8006476:	2320      	movs	r3, #32
 8006478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800647c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006480:	2330      	movs	r3, #48	; 0x30
 8006482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800662c <_svfiprintf_r+0x1ec>
 8006486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648a:	f04f 0901 	mov.w	r9, #1
 800648e:	4623      	mov	r3, r4
 8006490:	469a      	mov	sl, r3
 8006492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006496:	b10a      	cbz	r2, 800649c <_svfiprintf_r+0x5c>
 8006498:	2a25      	cmp	r2, #37	; 0x25
 800649a:	d1f9      	bne.n	8006490 <_svfiprintf_r+0x50>
 800649c:	ebba 0b04 	subs.w	fp, sl, r4
 80064a0:	d00b      	beq.n	80064ba <_svfiprintf_r+0x7a>
 80064a2:	465b      	mov	r3, fp
 80064a4:	4622      	mov	r2, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff ff6d 	bl	8006388 <__ssputs_r>
 80064ae:	3001      	adds	r0, #1
 80064b0:	f000 80aa 	beq.w	8006608 <_svfiprintf_r+0x1c8>
 80064b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b6:	445a      	add	r2, fp
 80064b8:	9209      	str	r2, [sp, #36]	; 0x24
 80064ba:	f89a 3000 	ldrb.w	r3, [sl]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80a2 	beq.w	8006608 <_svfiprintf_r+0x1c8>
 80064c4:	2300      	movs	r3, #0
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ce:	f10a 0a01 	add.w	sl, sl, #1
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	9307      	str	r3, [sp, #28]
 80064d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064da:	931a      	str	r3, [sp, #104]	; 0x68
 80064dc:	4654      	mov	r4, sl
 80064de:	2205      	movs	r2, #5
 80064e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e4:	4851      	ldr	r0, [pc, #324]	; (800662c <_svfiprintf_r+0x1ec>)
 80064e6:	f7f9 fe83 	bl	80001f0 <memchr>
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	b9d8      	cbnz	r0, 8006526 <_svfiprintf_r+0xe6>
 80064ee:	06d0      	lsls	r0, r2, #27
 80064f0:	bf44      	itt	mi
 80064f2:	2320      	movmi	r3, #32
 80064f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064f8:	0711      	lsls	r1, r2, #28
 80064fa:	bf44      	itt	mi
 80064fc:	232b      	movmi	r3, #43	; 0x2b
 80064fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006502:	f89a 3000 	ldrb.w	r3, [sl]
 8006506:	2b2a      	cmp	r3, #42	; 0x2a
 8006508:	d015      	beq.n	8006536 <_svfiprintf_r+0xf6>
 800650a:	9a07      	ldr	r2, [sp, #28]
 800650c:	4654      	mov	r4, sl
 800650e:	2000      	movs	r0, #0
 8006510:	f04f 0c0a 	mov.w	ip, #10
 8006514:	4621      	mov	r1, r4
 8006516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651a:	3b30      	subs	r3, #48	; 0x30
 800651c:	2b09      	cmp	r3, #9
 800651e:	d94e      	bls.n	80065be <_svfiprintf_r+0x17e>
 8006520:	b1b0      	cbz	r0, 8006550 <_svfiprintf_r+0x110>
 8006522:	9207      	str	r2, [sp, #28]
 8006524:	e014      	b.n	8006550 <_svfiprintf_r+0x110>
 8006526:	eba0 0308 	sub.w	r3, r0, r8
 800652a:	fa09 f303 	lsl.w	r3, r9, r3
 800652e:	4313      	orrs	r3, r2
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	46a2      	mov	sl, r4
 8006534:	e7d2      	b.n	80064dc <_svfiprintf_r+0x9c>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	9103      	str	r1, [sp, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	bfbb      	ittet	lt
 8006542:	425b      	neglt	r3, r3
 8006544:	f042 0202 	orrlt.w	r2, r2, #2
 8006548:	9307      	strge	r3, [sp, #28]
 800654a:	9307      	strlt	r3, [sp, #28]
 800654c:	bfb8      	it	lt
 800654e:	9204      	strlt	r2, [sp, #16]
 8006550:	7823      	ldrb	r3, [r4, #0]
 8006552:	2b2e      	cmp	r3, #46	; 0x2e
 8006554:	d10c      	bne.n	8006570 <_svfiprintf_r+0x130>
 8006556:	7863      	ldrb	r3, [r4, #1]
 8006558:	2b2a      	cmp	r3, #42	; 0x2a
 800655a:	d135      	bne.n	80065c8 <_svfiprintf_r+0x188>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	9203      	str	r2, [sp, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfb8      	it	lt
 8006568:	f04f 33ff 	movlt.w	r3, #4294967295
 800656c:	3402      	adds	r4, #2
 800656e:	9305      	str	r3, [sp, #20]
 8006570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800663c <_svfiprintf_r+0x1fc>
 8006574:	7821      	ldrb	r1, [r4, #0]
 8006576:	2203      	movs	r2, #3
 8006578:	4650      	mov	r0, sl
 800657a:	f7f9 fe39 	bl	80001f0 <memchr>
 800657e:	b140      	cbz	r0, 8006592 <_svfiprintf_r+0x152>
 8006580:	2340      	movs	r3, #64	; 0x40
 8006582:	eba0 000a 	sub.w	r0, r0, sl
 8006586:	fa03 f000 	lsl.w	r0, r3, r0
 800658a:	9b04      	ldr	r3, [sp, #16]
 800658c:	4303      	orrs	r3, r0
 800658e:	3401      	adds	r4, #1
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006596:	4826      	ldr	r0, [pc, #152]	; (8006630 <_svfiprintf_r+0x1f0>)
 8006598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659c:	2206      	movs	r2, #6
 800659e:	f7f9 fe27 	bl	80001f0 <memchr>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d038      	beq.n	8006618 <_svfiprintf_r+0x1d8>
 80065a6:	4b23      	ldr	r3, [pc, #140]	; (8006634 <_svfiprintf_r+0x1f4>)
 80065a8:	bb1b      	cbnz	r3, 80065f2 <_svfiprintf_r+0x1b2>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	3307      	adds	r3, #7
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	3308      	adds	r3, #8
 80065b4:	9303      	str	r3, [sp, #12]
 80065b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b8:	4433      	add	r3, r6
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	e767      	b.n	800648e <_svfiprintf_r+0x4e>
 80065be:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c2:	460c      	mov	r4, r1
 80065c4:	2001      	movs	r0, #1
 80065c6:	e7a5      	b.n	8006514 <_svfiprintf_r+0xd4>
 80065c8:	2300      	movs	r3, #0
 80065ca:	3401      	adds	r4, #1
 80065cc:	9305      	str	r3, [sp, #20]
 80065ce:	4619      	mov	r1, r3
 80065d0:	f04f 0c0a 	mov.w	ip, #10
 80065d4:	4620      	mov	r0, r4
 80065d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065da:	3a30      	subs	r2, #48	; 0x30
 80065dc:	2a09      	cmp	r2, #9
 80065de:	d903      	bls.n	80065e8 <_svfiprintf_r+0x1a8>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0c5      	beq.n	8006570 <_svfiprintf_r+0x130>
 80065e4:	9105      	str	r1, [sp, #20]
 80065e6:	e7c3      	b.n	8006570 <_svfiprintf_r+0x130>
 80065e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ec:	4604      	mov	r4, r0
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7f0      	b.n	80065d4 <_svfiprintf_r+0x194>
 80065f2:	ab03      	add	r3, sp, #12
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	462a      	mov	r2, r5
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <_svfiprintf_r+0x1f8>)
 80065fa:	a904      	add	r1, sp, #16
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7fd ff4d 	bl	800449c <_printf_float>
 8006602:	1c42      	adds	r2, r0, #1
 8006604:	4606      	mov	r6, r0
 8006606:	d1d6      	bne.n	80065b6 <_svfiprintf_r+0x176>
 8006608:	89ab      	ldrh	r3, [r5, #12]
 800660a:	065b      	lsls	r3, r3, #25
 800660c:	f53f af2c 	bmi.w	8006468 <_svfiprintf_r+0x28>
 8006610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006612:	b01d      	add	sp, #116	; 0x74
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	462a      	mov	r2, r5
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <_svfiprintf_r+0x1f8>)
 8006620:	a904      	add	r1, sp, #16
 8006622:	4638      	mov	r0, r7
 8006624:	f7fe f9de 	bl	80049e4 <_printf_i>
 8006628:	e7eb      	b.n	8006602 <_svfiprintf_r+0x1c2>
 800662a:	bf00      	nop
 800662c:	08008394 	.word	0x08008394
 8006630:	0800839e 	.word	0x0800839e
 8006634:	0800449d 	.word	0x0800449d
 8006638:	08006389 	.word	0x08006389
 800663c:	0800839a 	.word	0x0800839a

08006640 <_sbrk_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4d06      	ldr	r5, [pc, #24]	; (800665c <_sbrk_r+0x1c>)
 8006644:	2300      	movs	r3, #0
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	f7fb ff7e 	bl	800254c <_sbrk>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_sbrk_r+0x1a>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_sbrk_r+0x1a>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	20000384 	.word	0x20000384

08006660 <__assert_func>:
 8006660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006662:	4614      	mov	r4, r2
 8006664:	461a      	mov	r2, r3
 8006666:	4b09      	ldr	r3, [pc, #36]	; (800668c <__assert_func+0x2c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4605      	mov	r5, r0
 800666c:	68d8      	ldr	r0, [r3, #12]
 800666e:	b14c      	cbz	r4, 8006684 <__assert_func+0x24>
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <__assert_func+0x30>)
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006678:	4906      	ldr	r1, [pc, #24]	; (8006694 <__assert_func+0x34>)
 800667a:	462b      	mov	r3, r5
 800667c:	f000 f80e 	bl	800669c <fiprintf>
 8006680:	f000 faac 	bl	8006bdc <abort>
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <__assert_func+0x38>)
 8006686:	461c      	mov	r4, r3
 8006688:	e7f3      	b.n	8006672 <__assert_func+0x12>
 800668a:	bf00      	nop
 800668c:	20000020 	.word	0x20000020
 8006690:	080083a5 	.word	0x080083a5
 8006694:	080083b2 	.word	0x080083b2
 8006698:	080083e0 	.word	0x080083e0

0800669c <fiprintf>:
 800669c:	b40e      	push	{r1, r2, r3}
 800669e:	b503      	push	{r0, r1, lr}
 80066a0:	4601      	mov	r1, r0
 80066a2:	ab03      	add	r3, sp, #12
 80066a4:	4805      	ldr	r0, [pc, #20]	; (80066bc <fiprintf+0x20>)
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	f000 f897 	bl	80067e0 <_vfiprintf_r>
 80066b2:	b002      	add	sp, #8
 80066b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b8:	b003      	add	sp, #12
 80066ba:	4770      	bx	lr
 80066bc:	20000020 	.word	0x20000020

080066c0 <__ascii_mbtowc>:
 80066c0:	b082      	sub	sp, #8
 80066c2:	b901      	cbnz	r1, 80066c6 <__ascii_mbtowc+0x6>
 80066c4:	a901      	add	r1, sp, #4
 80066c6:	b142      	cbz	r2, 80066da <__ascii_mbtowc+0x1a>
 80066c8:	b14b      	cbz	r3, 80066de <__ascii_mbtowc+0x1e>
 80066ca:	7813      	ldrb	r3, [r2, #0]
 80066cc:	600b      	str	r3, [r1, #0]
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	1e10      	subs	r0, r2, #0
 80066d2:	bf18      	it	ne
 80066d4:	2001      	movne	r0, #1
 80066d6:	b002      	add	sp, #8
 80066d8:	4770      	bx	lr
 80066da:	4610      	mov	r0, r2
 80066dc:	e7fb      	b.n	80066d6 <__ascii_mbtowc+0x16>
 80066de:	f06f 0001 	mvn.w	r0, #1
 80066e2:	e7f8      	b.n	80066d6 <__ascii_mbtowc+0x16>

080066e4 <memmove>:
 80066e4:	4288      	cmp	r0, r1
 80066e6:	b510      	push	{r4, lr}
 80066e8:	eb01 0402 	add.w	r4, r1, r2
 80066ec:	d902      	bls.n	80066f4 <memmove+0x10>
 80066ee:	4284      	cmp	r4, r0
 80066f0:	4623      	mov	r3, r4
 80066f2:	d807      	bhi.n	8006704 <memmove+0x20>
 80066f4:	1e43      	subs	r3, r0, #1
 80066f6:	42a1      	cmp	r1, r4
 80066f8:	d008      	beq.n	800670c <memmove+0x28>
 80066fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006702:	e7f8      	b.n	80066f6 <memmove+0x12>
 8006704:	4402      	add	r2, r0
 8006706:	4601      	mov	r1, r0
 8006708:	428a      	cmp	r2, r1
 800670a:	d100      	bne.n	800670e <memmove+0x2a>
 800670c:	bd10      	pop	{r4, pc}
 800670e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006716:	e7f7      	b.n	8006708 <memmove+0x24>

08006718 <__malloc_lock>:
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <__malloc_lock+0x8>)
 800671a:	f000 bc1f 	b.w	8006f5c <__retarget_lock_acquire_recursive>
 800671e:	bf00      	nop
 8006720:	20000388 	.word	0x20000388

08006724 <__malloc_unlock>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__malloc_unlock+0x8>)
 8006726:	f000 bc1a 	b.w	8006f5e <__retarget_lock_release_recursive>
 800672a:	bf00      	nop
 800672c:	20000388 	.word	0x20000388

08006730 <_realloc_r>:
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	4680      	mov	r8, r0
 8006736:	4614      	mov	r4, r2
 8006738:	460e      	mov	r6, r1
 800673a:	b921      	cbnz	r1, 8006746 <_realloc_r+0x16>
 800673c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006740:	4611      	mov	r1, r2
 8006742:	f7ff bdad 	b.w	80062a0 <_malloc_r>
 8006746:	b92a      	cbnz	r2, 8006754 <_realloc_r+0x24>
 8006748:	f7ff fd3e 	bl	80061c8 <_free_r>
 800674c:	4625      	mov	r5, r4
 800674e:	4628      	mov	r0, r5
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	f000 fc6a 	bl	800702c <_malloc_usable_size_r>
 8006758:	4284      	cmp	r4, r0
 800675a:	4607      	mov	r7, r0
 800675c:	d802      	bhi.n	8006764 <_realloc_r+0x34>
 800675e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006762:	d812      	bhi.n	800678a <_realloc_r+0x5a>
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fd9a 	bl	80062a0 <_malloc_r>
 800676c:	4605      	mov	r5, r0
 800676e:	2800      	cmp	r0, #0
 8006770:	d0ed      	beq.n	800674e <_realloc_r+0x1e>
 8006772:	42bc      	cmp	r4, r7
 8006774:	4622      	mov	r2, r4
 8006776:	4631      	mov	r1, r6
 8006778:	bf28      	it	cs
 800677a:	463a      	movcs	r2, r7
 800677c:	f7fd fdd8 	bl	8004330 <memcpy>
 8006780:	4631      	mov	r1, r6
 8006782:	4640      	mov	r0, r8
 8006784:	f7ff fd20 	bl	80061c8 <_free_r>
 8006788:	e7e1      	b.n	800674e <_realloc_r+0x1e>
 800678a:	4635      	mov	r5, r6
 800678c:	e7df      	b.n	800674e <_realloc_r+0x1e>

0800678e <__sfputc_r>:
 800678e:	6893      	ldr	r3, [r2, #8]
 8006790:	3b01      	subs	r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	b410      	push	{r4}
 8006796:	6093      	str	r3, [r2, #8]
 8006798:	da08      	bge.n	80067ac <__sfputc_r+0x1e>
 800679a:	6994      	ldr	r4, [r2, #24]
 800679c:	42a3      	cmp	r3, r4
 800679e:	db01      	blt.n	80067a4 <__sfputc_r+0x16>
 80067a0:	290a      	cmp	r1, #10
 80067a2:	d103      	bne.n	80067ac <__sfputc_r+0x1e>
 80067a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a8:	f000 b94a 	b.w	8006a40 <__swbuf_r>
 80067ac:	6813      	ldr	r3, [r2, #0]
 80067ae:	1c58      	adds	r0, r3, #1
 80067b0:	6010      	str	r0, [r2, #0]
 80067b2:	7019      	strb	r1, [r3, #0]
 80067b4:	4608      	mov	r0, r1
 80067b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <__sfputs_r>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	4606      	mov	r6, r0
 80067c0:	460f      	mov	r7, r1
 80067c2:	4614      	mov	r4, r2
 80067c4:	18d5      	adds	r5, r2, r3
 80067c6:	42ac      	cmp	r4, r5
 80067c8:	d101      	bne.n	80067ce <__sfputs_r+0x12>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e007      	b.n	80067de <__sfputs_r+0x22>
 80067ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d2:	463a      	mov	r2, r7
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ffda 	bl	800678e <__sfputc_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d1f3      	bne.n	80067c6 <__sfputs_r+0xa>
 80067de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067e0 <_vfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	460d      	mov	r5, r1
 80067e6:	b09d      	sub	sp, #116	; 0x74
 80067e8:	4614      	mov	r4, r2
 80067ea:	4698      	mov	r8, r3
 80067ec:	4606      	mov	r6, r0
 80067ee:	b118      	cbz	r0, 80067f8 <_vfiprintf_r+0x18>
 80067f0:	6983      	ldr	r3, [r0, #24]
 80067f2:	b90b      	cbnz	r3, 80067f8 <_vfiprintf_r+0x18>
 80067f4:	f000 fb14 	bl	8006e20 <__sinit>
 80067f8:	4b89      	ldr	r3, [pc, #548]	; (8006a20 <_vfiprintf_r+0x240>)
 80067fa:	429d      	cmp	r5, r3
 80067fc:	d11b      	bne.n	8006836 <_vfiprintf_r+0x56>
 80067fe:	6875      	ldr	r5, [r6, #4]
 8006800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	d405      	bmi.n	8006812 <_vfiprintf_r+0x32>
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	059a      	lsls	r2, r3, #22
 800680a:	d402      	bmi.n	8006812 <_vfiprintf_r+0x32>
 800680c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800680e:	f000 fba5 	bl	8006f5c <__retarget_lock_acquire_recursive>
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	071b      	lsls	r3, r3, #28
 8006816:	d501      	bpl.n	800681c <_vfiprintf_r+0x3c>
 8006818:	692b      	ldr	r3, [r5, #16]
 800681a:	b9eb      	cbnz	r3, 8006858 <_vfiprintf_r+0x78>
 800681c:	4629      	mov	r1, r5
 800681e:	4630      	mov	r0, r6
 8006820:	f000 f96e 	bl	8006b00 <__swsetup_r>
 8006824:	b1c0      	cbz	r0, 8006858 <_vfiprintf_r+0x78>
 8006826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006828:	07dc      	lsls	r4, r3, #31
 800682a:	d50e      	bpl.n	800684a <_vfiprintf_r+0x6a>
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	b01d      	add	sp, #116	; 0x74
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	4b7b      	ldr	r3, [pc, #492]	; (8006a24 <_vfiprintf_r+0x244>)
 8006838:	429d      	cmp	r5, r3
 800683a:	d101      	bne.n	8006840 <_vfiprintf_r+0x60>
 800683c:	68b5      	ldr	r5, [r6, #8]
 800683e:	e7df      	b.n	8006800 <_vfiprintf_r+0x20>
 8006840:	4b79      	ldr	r3, [pc, #484]	; (8006a28 <_vfiprintf_r+0x248>)
 8006842:	429d      	cmp	r5, r3
 8006844:	bf08      	it	eq
 8006846:	68f5      	ldreq	r5, [r6, #12]
 8006848:	e7da      	b.n	8006800 <_vfiprintf_r+0x20>
 800684a:	89ab      	ldrh	r3, [r5, #12]
 800684c:	0598      	lsls	r0, r3, #22
 800684e:	d4ed      	bmi.n	800682c <_vfiprintf_r+0x4c>
 8006850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006852:	f000 fb84 	bl	8006f5e <__retarget_lock_release_recursive>
 8006856:	e7e9      	b.n	800682c <_vfiprintf_r+0x4c>
 8006858:	2300      	movs	r3, #0
 800685a:	9309      	str	r3, [sp, #36]	; 0x24
 800685c:	2320      	movs	r3, #32
 800685e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006862:	f8cd 800c 	str.w	r8, [sp, #12]
 8006866:	2330      	movs	r3, #48	; 0x30
 8006868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a2c <_vfiprintf_r+0x24c>
 800686c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006870:	f04f 0901 	mov.w	r9, #1
 8006874:	4623      	mov	r3, r4
 8006876:	469a      	mov	sl, r3
 8006878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800687c:	b10a      	cbz	r2, 8006882 <_vfiprintf_r+0xa2>
 800687e:	2a25      	cmp	r2, #37	; 0x25
 8006880:	d1f9      	bne.n	8006876 <_vfiprintf_r+0x96>
 8006882:	ebba 0b04 	subs.w	fp, sl, r4
 8006886:	d00b      	beq.n	80068a0 <_vfiprintf_r+0xc0>
 8006888:	465b      	mov	r3, fp
 800688a:	4622      	mov	r2, r4
 800688c:	4629      	mov	r1, r5
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ff94 	bl	80067bc <__sfputs_r>
 8006894:	3001      	adds	r0, #1
 8006896:	f000 80aa 	beq.w	80069ee <_vfiprintf_r+0x20e>
 800689a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800689c:	445a      	add	r2, fp
 800689e:	9209      	str	r2, [sp, #36]	; 0x24
 80068a0:	f89a 3000 	ldrb.w	r3, [sl]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80a2 	beq.w	80069ee <_vfiprintf_r+0x20e>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f04f 32ff 	mov.w	r2, #4294967295
 80068b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068b4:	f10a 0a01 	add.w	sl, sl, #1
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	9307      	str	r3, [sp, #28]
 80068bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068c0:	931a      	str	r3, [sp, #104]	; 0x68
 80068c2:	4654      	mov	r4, sl
 80068c4:	2205      	movs	r2, #5
 80068c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ca:	4858      	ldr	r0, [pc, #352]	; (8006a2c <_vfiprintf_r+0x24c>)
 80068cc:	f7f9 fc90 	bl	80001f0 <memchr>
 80068d0:	9a04      	ldr	r2, [sp, #16]
 80068d2:	b9d8      	cbnz	r0, 800690c <_vfiprintf_r+0x12c>
 80068d4:	06d1      	lsls	r1, r2, #27
 80068d6:	bf44      	itt	mi
 80068d8:	2320      	movmi	r3, #32
 80068da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068de:	0713      	lsls	r3, r2, #28
 80068e0:	bf44      	itt	mi
 80068e2:	232b      	movmi	r3, #43	; 0x2b
 80068e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e8:	f89a 3000 	ldrb.w	r3, [sl]
 80068ec:	2b2a      	cmp	r3, #42	; 0x2a
 80068ee:	d015      	beq.n	800691c <_vfiprintf_r+0x13c>
 80068f0:	9a07      	ldr	r2, [sp, #28]
 80068f2:	4654      	mov	r4, sl
 80068f4:	2000      	movs	r0, #0
 80068f6:	f04f 0c0a 	mov.w	ip, #10
 80068fa:	4621      	mov	r1, r4
 80068fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006900:	3b30      	subs	r3, #48	; 0x30
 8006902:	2b09      	cmp	r3, #9
 8006904:	d94e      	bls.n	80069a4 <_vfiprintf_r+0x1c4>
 8006906:	b1b0      	cbz	r0, 8006936 <_vfiprintf_r+0x156>
 8006908:	9207      	str	r2, [sp, #28]
 800690a:	e014      	b.n	8006936 <_vfiprintf_r+0x156>
 800690c:	eba0 0308 	sub.w	r3, r0, r8
 8006910:	fa09 f303 	lsl.w	r3, r9, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	46a2      	mov	sl, r4
 800691a:	e7d2      	b.n	80068c2 <_vfiprintf_r+0xe2>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	1d19      	adds	r1, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	9103      	str	r1, [sp, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfbb      	ittet	lt
 8006928:	425b      	neglt	r3, r3
 800692a:	f042 0202 	orrlt.w	r2, r2, #2
 800692e:	9307      	strge	r3, [sp, #28]
 8006930:	9307      	strlt	r3, [sp, #28]
 8006932:	bfb8      	it	lt
 8006934:	9204      	strlt	r2, [sp, #16]
 8006936:	7823      	ldrb	r3, [r4, #0]
 8006938:	2b2e      	cmp	r3, #46	; 0x2e
 800693a:	d10c      	bne.n	8006956 <_vfiprintf_r+0x176>
 800693c:	7863      	ldrb	r3, [r4, #1]
 800693e:	2b2a      	cmp	r3, #42	; 0x2a
 8006940:	d135      	bne.n	80069ae <_vfiprintf_r+0x1ce>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	1d1a      	adds	r2, r3, #4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	9203      	str	r2, [sp, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	bfb8      	it	lt
 800694e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006952:	3402      	adds	r4, #2
 8006954:	9305      	str	r3, [sp, #20]
 8006956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a3c <_vfiprintf_r+0x25c>
 800695a:	7821      	ldrb	r1, [r4, #0]
 800695c:	2203      	movs	r2, #3
 800695e:	4650      	mov	r0, sl
 8006960:	f7f9 fc46 	bl	80001f0 <memchr>
 8006964:	b140      	cbz	r0, 8006978 <_vfiprintf_r+0x198>
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	eba0 000a 	sub.w	r0, r0, sl
 800696c:	fa03 f000 	lsl.w	r0, r3, r0
 8006970:	9b04      	ldr	r3, [sp, #16]
 8006972:	4303      	orrs	r3, r0
 8006974:	3401      	adds	r4, #1
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697c:	482c      	ldr	r0, [pc, #176]	; (8006a30 <_vfiprintf_r+0x250>)
 800697e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006982:	2206      	movs	r2, #6
 8006984:	f7f9 fc34 	bl	80001f0 <memchr>
 8006988:	2800      	cmp	r0, #0
 800698a:	d03f      	beq.n	8006a0c <_vfiprintf_r+0x22c>
 800698c:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <_vfiprintf_r+0x254>)
 800698e:	bb1b      	cbnz	r3, 80069d8 <_vfiprintf_r+0x1f8>
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	3307      	adds	r3, #7
 8006994:	f023 0307 	bic.w	r3, r3, #7
 8006998:	3308      	adds	r3, #8
 800699a:	9303      	str	r3, [sp, #12]
 800699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699e:	443b      	add	r3, r7
 80069a0:	9309      	str	r3, [sp, #36]	; 0x24
 80069a2:	e767      	b.n	8006874 <_vfiprintf_r+0x94>
 80069a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a8:	460c      	mov	r4, r1
 80069aa:	2001      	movs	r0, #1
 80069ac:	e7a5      	b.n	80068fa <_vfiprintf_r+0x11a>
 80069ae:	2300      	movs	r3, #0
 80069b0:	3401      	adds	r4, #1
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f04f 0c0a 	mov.w	ip, #10
 80069ba:	4620      	mov	r0, r4
 80069bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c0:	3a30      	subs	r2, #48	; 0x30
 80069c2:	2a09      	cmp	r2, #9
 80069c4:	d903      	bls.n	80069ce <_vfiprintf_r+0x1ee>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c5      	beq.n	8006956 <_vfiprintf_r+0x176>
 80069ca:	9105      	str	r1, [sp, #20]
 80069cc:	e7c3      	b.n	8006956 <_vfiprintf_r+0x176>
 80069ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d2:	4604      	mov	r4, r0
 80069d4:	2301      	movs	r3, #1
 80069d6:	e7f0      	b.n	80069ba <_vfiprintf_r+0x1da>
 80069d8:	ab03      	add	r3, sp, #12
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	462a      	mov	r2, r5
 80069de:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <_vfiprintf_r+0x258>)
 80069e0:	a904      	add	r1, sp, #16
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7fd fd5a 	bl	800449c <_printf_float>
 80069e8:	4607      	mov	r7, r0
 80069ea:	1c78      	adds	r0, r7, #1
 80069ec:	d1d6      	bne.n	800699c <_vfiprintf_r+0x1bc>
 80069ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f0:	07d9      	lsls	r1, r3, #31
 80069f2:	d405      	bmi.n	8006a00 <_vfiprintf_r+0x220>
 80069f4:	89ab      	ldrh	r3, [r5, #12]
 80069f6:	059a      	lsls	r2, r3, #22
 80069f8:	d402      	bmi.n	8006a00 <_vfiprintf_r+0x220>
 80069fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fc:	f000 faaf 	bl	8006f5e <__retarget_lock_release_recursive>
 8006a00:	89ab      	ldrh	r3, [r5, #12]
 8006a02:	065b      	lsls	r3, r3, #25
 8006a04:	f53f af12 	bmi.w	800682c <_vfiprintf_r+0x4c>
 8006a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a0a:	e711      	b.n	8006830 <_vfiprintf_r+0x50>
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <_vfiprintf_r+0x258>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7fd ffe4 	bl	80049e4 <_printf_i>
 8006a1c:	e7e4      	b.n	80069e8 <_vfiprintf_r+0x208>
 8006a1e:	bf00      	nop
 8006a20:	0800840c 	.word	0x0800840c
 8006a24:	0800842c 	.word	0x0800842c
 8006a28:	080083ec 	.word	0x080083ec
 8006a2c:	08008394 	.word	0x08008394
 8006a30:	0800839e 	.word	0x0800839e
 8006a34:	0800449d 	.word	0x0800449d
 8006a38:	080067bd 	.word	0x080067bd
 8006a3c:	0800839a 	.word	0x0800839a

08006a40 <__swbuf_r>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	460e      	mov	r6, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	4605      	mov	r5, r0
 8006a48:	b118      	cbz	r0, 8006a52 <__swbuf_r+0x12>
 8006a4a:	6983      	ldr	r3, [r0, #24]
 8006a4c:	b90b      	cbnz	r3, 8006a52 <__swbuf_r+0x12>
 8006a4e:	f000 f9e7 	bl	8006e20 <__sinit>
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <__swbuf_r+0x98>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d12b      	bne.n	8006ab0 <__swbuf_r+0x70>
 8006a58:	686c      	ldr	r4, [r5, #4]
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	60a3      	str	r3, [r4, #8]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	071a      	lsls	r2, r3, #28
 8006a62:	d52f      	bpl.n	8006ac4 <__swbuf_r+0x84>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	b36b      	cbz	r3, 8006ac4 <__swbuf_r+0x84>
 8006a68:	6923      	ldr	r3, [r4, #16]
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	1ac0      	subs	r0, r0, r3
 8006a6e:	6963      	ldr	r3, [r4, #20]
 8006a70:	b2f6      	uxtb	r6, r6
 8006a72:	4283      	cmp	r3, r0
 8006a74:	4637      	mov	r7, r6
 8006a76:	dc04      	bgt.n	8006a82 <__swbuf_r+0x42>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f93c 	bl	8006cf8 <_fflush_r>
 8006a80:	bb30      	cbnz	r0, 8006ad0 <__swbuf_r+0x90>
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	60a3      	str	r3, [r4, #8]
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	701e      	strb	r6, [r3, #0]
 8006a90:	6963      	ldr	r3, [r4, #20]
 8006a92:	3001      	adds	r0, #1
 8006a94:	4283      	cmp	r3, r0
 8006a96:	d004      	beq.n	8006aa2 <__swbuf_r+0x62>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	07db      	lsls	r3, r3, #31
 8006a9c:	d506      	bpl.n	8006aac <__swbuf_r+0x6c>
 8006a9e:	2e0a      	cmp	r6, #10
 8006aa0:	d104      	bne.n	8006aac <__swbuf_r+0x6c>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f927 	bl	8006cf8 <_fflush_r>
 8006aaa:	b988      	cbnz	r0, 8006ad0 <__swbuf_r+0x90>
 8006aac:	4638      	mov	r0, r7
 8006aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <__swbuf_r+0x9c>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <__swbuf_r+0x7a>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7cf      	b.n	8006a5a <__swbuf_r+0x1a>
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <__swbuf_r+0xa0>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7ca      	b.n	8006a5a <__swbuf_r+0x1a>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 f81a 	bl	8006b00 <__swsetup_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0cb      	beq.n	8006a68 <__swbuf_r+0x28>
 8006ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ad4:	e7ea      	b.n	8006aac <__swbuf_r+0x6c>
 8006ad6:	bf00      	nop
 8006ad8:	0800840c 	.word	0x0800840c
 8006adc:	0800842c 	.word	0x0800842c
 8006ae0:	080083ec 	.word	0x080083ec

08006ae4 <__ascii_wctomb>:
 8006ae4:	b149      	cbz	r1, 8006afa <__ascii_wctomb+0x16>
 8006ae6:	2aff      	cmp	r2, #255	; 0xff
 8006ae8:	bf85      	ittet	hi
 8006aea:	238a      	movhi	r3, #138	; 0x8a
 8006aec:	6003      	strhi	r3, [r0, #0]
 8006aee:	700a      	strbls	r2, [r1, #0]
 8006af0:	f04f 30ff 	movhi.w	r0, #4294967295
 8006af4:	bf98      	it	ls
 8006af6:	2001      	movls	r0, #1
 8006af8:	4770      	bx	lr
 8006afa:	4608      	mov	r0, r1
 8006afc:	4770      	bx	lr
	...

08006b00 <__swsetup_r>:
 8006b00:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <__swsetup_r+0xcc>)
 8006b02:	b570      	push	{r4, r5, r6, lr}
 8006b04:	681d      	ldr	r5, [r3, #0]
 8006b06:	4606      	mov	r6, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	b125      	cbz	r5, 8006b16 <__swsetup_r+0x16>
 8006b0c:	69ab      	ldr	r3, [r5, #24]
 8006b0e:	b913      	cbnz	r3, 8006b16 <__swsetup_r+0x16>
 8006b10:	4628      	mov	r0, r5
 8006b12:	f000 f985 	bl	8006e20 <__sinit>
 8006b16:	4b2e      	ldr	r3, [pc, #184]	; (8006bd0 <__swsetup_r+0xd0>)
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	d10f      	bne.n	8006b3c <__swsetup_r+0x3c>
 8006b1c:	686c      	ldr	r4, [r5, #4]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b24:	0719      	lsls	r1, r3, #28
 8006b26:	d42c      	bmi.n	8006b82 <__swsetup_r+0x82>
 8006b28:	06dd      	lsls	r5, r3, #27
 8006b2a:	d411      	bmi.n	8006b50 <__swsetup_r+0x50>
 8006b2c:	2309      	movs	r3, #9
 8006b2e:	6033      	str	r3, [r6, #0]
 8006b30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3a:	e03e      	b.n	8006bba <__swsetup_r+0xba>
 8006b3c:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <__swsetup_r+0xd4>)
 8006b3e:	429c      	cmp	r4, r3
 8006b40:	d101      	bne.n	8006b46 <__swsetup_r+0x46>
 8006b42:	68ac      	ldr	r4, [r5, #8]
 8006b44:	e7eb      	b.n	8006b1e <__swsetup_r+0x1e>
 8006b46:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <__swsetup_r+0xd8>)
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	bf08      	it	eq
 8006b4c:	68ec      	ldreq	r4, [r5, #12]
 8006b4e:	e7e6      	b.n	8006b1e <__swsetup_r+0x1e>
 8006b50:	0758      	lsls	r0, r3, #29
 8006b52:	d512      	bpl.n	8006b7a <__swsetup_r+0x7a>
 8006b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b56:	b141      	cbz	r1, 8006b6a <__swsetup_r+0x6a>
 8006b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d002      	beq.n	8006b66 <__swsetup_r+0x66>
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff fb31 	bl	80061c8 <_free_r>
 8006b66:	2300      	movs	r3, #0
 8006b68:	6363      	str	r3, [r4, #52]	; 0x34
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	2300      	movs	r3, #0
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	f043 0308 	orr.w	r3, r3, #8
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	b94b      	cbnz	r3, 8006b9a <__swsetup_r+0x9a>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b90:	d003      	beq.n	8006b9a <__swsetup_r+0x9a>
 8006b92:	4621      	mov	r1, r4
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 fa09 	bl	8006fac <__smakebuf_r>
 8006b9a:	89a0      	ldrh	r0, [r4, #12]
 8006b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ba0:	f010 0301 	ands.w	r3, r0, #1
 8006ba4:	d00a      	beq.n	8006bbc <__swsetup_r+0xbc>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60a3      	str	r3, [r4, #8]
 8006baa:	6963      	ldr	r3, [r4, #20]
 8006bac:	425b      	negs	r3, r3
 8006bae:	61a3      	str	r3, [r4, #24]
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	b943      	cbnz	r3, 8006bc6 <__swsetup_r+0xc6>
 8006bb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bb8:	d1ba      	bne.n	8006b30 <__swsetup_r+0x30>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	0781      	lsls	r1, r0, #30
 8006bbe:	bf58      	it	pl
 8006bc0:	6963      	ldrpl	r3, [r4, #20]
 8006bc2:	60a3      	str	r3, [r4, #8]
 8006bc4:	e7f4      	b.n	8006bb0 <__swsetup_r+0xb0>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e7f7      	b.n	8006bba <__swsetup_r+0xba>
 8006bca:	bf00      	nop
 8006bcc:	20000020 	.word	0x20000020
 8006bd0:	0800840c 	.word	0x0800840c
 8006bd4:	0800842c 	.word	0x0800842c
 8006bd8:	080083ec 	.word	0x080083ec

08006bdc <abort>:
 8006bdc:	b508      	push	{r3, lr}
 8006bde:	2006      	movs	r0, #6
 8006be0:	f000 fa54 	bl	800708c <raise>
 8006be4:	2001      	movs	r0, #1
 8006be6:	f7fb fc39 	bl	800245c <_exit>
	...

08006bec <__sflush_r>:
 8006bec:	898a      	ldrh	r2, [r1, #12]
 8006bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	0710      	lsls	r0, r2, #28
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	d458      	bmi.n	8006cac <__sflush_r+0xc0>
 8006bfa:	684b      	ldr	r3, [r1, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dc05      	bgt.n	8006c0c <__sflush_r+0x20>
 8006c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dc02      	bgt.n	8006c0c <__sflush_r+0x20>
 8006c06:	2000      	movs	r0, #0
 8006c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c0e:	2e00      	cmp	r6, #0
 8006c10:	d0f9      	beq.n	8006c06 <__sflush_r+0x1a>
 8006c12:	2300      	movs	r3, #0
 8006c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c18:	682f      	ldr	r7, [r5, #0]
 8006c1a:	602b      	str	r3, [r5, #0]
 8006c1c:	d032      	beq.n	8006c84 <__sflush_r+0x98>
 8006c1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	075a      	lsls	r2, r3, #29
 8006c24:	d505      	bpl.n	8006c32 <__sflush_r+0x46>
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	1ac0      	subs	r0, r0, r3
 8006c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c2c:	b10b      	cbz	r3, 8006c32 <__sflush_r+0x46>
 8006c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c30:	1ac0      	subs	r0, r0, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	4602      	mov	r2, r0
 8006c36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c38:	6a21      	ldr	r1, [r4, #32]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b0      	blx	r6
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	d106      	bne.n	8006c52 <__sflush_r+0x66>
 8006c44:	6829      	ldr	r1, [r5, #0]
 8006c46:	291d      	cmp	r1, #29
 8006c48:	d82c      	bhi.n	8006ca4 <__sflush_r+0xb8>
 8006c4a:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <__sflush_r+0x108>)
 8006c4c:	40ca      	lsrs	r2, r1
 8006c4e:	07d6      	lsls	r6, r2, #31
 8006c50:	d528      	bpl.n	8006ca4 <__sflush_r+0xb8>
 8006c52:	2200      	movs	r2, #0
 8006c54:	6062      	str	r2, [r4, #4]
 8006c56:	04d9      	lsls	r1, r3, #19
 8006c58:	6922      	ldr	r2, [r4, #16]
 8006c5a:	6022      	str	r2, [r4, #0]
 8006c5c:	d504      	bpl.n	8006c68 <__sflush_r+0x7c>
 8006c5e:	1c42      	adds	r2, r0, #1
 8006c60:	d101      	bne.n	8006c66 <__sflush_r+0x7a>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	b903      	cbnz	r3, 8006c68 <__sflush_r+0x7c>
 8006c66:	6560      	str	r0, [r4, #84]	; 0x54
 8006c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c6a:	602f      	str	r7, [r5, #0]
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	d0ca      	beq.n	8006c06 <__sflush_r+0x1a>
 8006c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c74:	4299      	cmp	r1, r3
 8006c76:	d002      	beq.n	8006c7e <__sflush_r+0x92>
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7ff faa5 	bl	80061c8 <_free_r>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	6360      	str	r0, [r4, #52]	; 0x34
 8006c82:	e7c1      	b.n	8006c08 <__sflush_r+0x1c>
 8006c84:	6a21      	ldr	r1, [r4, #32]
 8006c86:	2301      	movs	r3, #1
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b0      	blx	r6
 8006c8c:	1c41      	adds	r1, r0, #1
 8006c8e:	d1c7      	bne.n	8006c20 <__sflush_r+0x34>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0c4      	beq.n	8006c20 <__sflush_r+0x34>
 8006c96:	2b1d      	cmp	r3, #29
 8006c98:	d001      	beq.n	8006c9e <__sflush_r+0xb2>
 8006c9a:	2b16      	cmp	r3, #22
 8006c9c:	d101      	bne.n	8006ca2 <__sflush_r+0xb6>
 8006c9e:	602f      	str	r7, [r5, #0]
 8006ca0:	e7b1      	b.n	8006c06 <__sflush_r+0x1a>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	e7ad      	b.n	8006c08 <__sflush_r+0x1c>
 8006cac:	690f      	ldr	r7, [r1, #16]
 8006cae:	2f00      	cmp	r7, #0
 8006cb0:	d0a9      	beq.n	8006c06 <__sflush_r+0x1a>
 8006cb2:	0793      	lsls	r3, r2, #30
 8006cb4:	680e      	ldr	r6, [r1, #0]
 8006cb6:	bf08      	it	eq
 8006cb8:	694b      	ldreq	r3, [r1, #20]
 8006cba:	600f      	str	r7, [r1, #0]
 8006cbc:	bf18      	it	ne
 8006cbe:	2300      	movne	r3, #0
 8006cc0:	eba6 0807 	sub.w	r8, r6, r7
 8006cc4:	608b      	str	r3, [r1, #8]
 8006cc6:	f1b8 0f00 	cmp.w	r8, #0
 8006cca:	dd9c      	ble.n	8006c06 <__sflush_r+0x1a>
 8006ccc:	6a21      	ldr	r1, [r4, #32]
 8006cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cd0:	4643      	mov	r3, r8
 8006cd2:	463a      	mov	r2, r7
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b0      	blx	r6
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	dc06      	bgt.n	8006cea <__sflush_r+0xfe>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e78e      	b.n	8006c08 <__sflush_r+0x1c>
 8006cea:	4407      	add	r7, r0
 8006cec:	eba8 0800 	sub.w	r8, r8, r0
 8006cf0:	e7e9      	b.n	8006cc6 <__sflush_r+0xda>
 8006cf2:	bf00      	nop
 8006cf4:	20400001 	.word	0x20400001

08006cf8 <_fflush_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	690b      	ldr	r3, [r1, #16]
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	b913      	cbnz	r3, 8006d08 <_fflush_r+0x10>
 8006d02:	2500      	movs	r5, #0
 8006d04:	4628      	mov	r0, r5
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	b118      	cbz	r0, 8006d12 <_fflush_r+0x1a>
 8006d0a:	6983      	ldr	r3, [r0, #24]
 8006d0c:	b90b      	cbnz	r3, 8006d12 <_fflush_r+0x1a>
 8006d0e:	f000 f887 	bl	8006e20 <__sinit>
 8006d12:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <_fflush_r+0x6c>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	d11b      	bne.n	8006d50 <_fflush_r+0x58>
 8006d18:	686c      	ldr	r4, [r5, #4]
 8006d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0ef      	beq.n	8006d02 <_fflush_r+0xa>
 8006d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d24:	07d0      	lsls	r0, r2, #31
 8006d26:	d404      	bmi.n	8006d32 <_fflush_r+0x3a>
 8006d28:	0599      	lsls	r1, r3, #22
 8006d2a:	d402      	bmi.n	8006d32 <_fflush_r+0x3a>
 8006d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d2e:	f000 f915 	bl	8006f5c <__retarget_lock_acquire_recursive>
 8006d32:	4628      	mov	r0, r5
 8006d34:	4621      	mov	r1, r4
 8006d36:	f7ff ff59 	bl	8006bec <__sflush_r>
 8006d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d3c:	07da      	lsls	r2, r3, #31
 8006d3e:	4605      	mov	r5, r0
 8006d40:	d4e0      	bmi.n	8006d04 <_fflush_r+0xc>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	059b      	lsls	r3, r3, #22
 8006d46:	d4dd      	bmi.n	8006d04 <_fflush_r+0xc>
 8006d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4a:	f000 f908 	bl	8006f5e <__retarget_lock_release_recursive>
 8006d4e:	e7d9      	b.n	8006d04 <_fflush_r+0xc>
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <_fflush_r+0x70>)
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d101      	bne.n	8006d5a <_fflush_r+0x62>
 8006d56:	68ac      	ldr	r4, [r5, #8]
 8006d58:	e7df      	b.n	8006d1a <_fflush_r+0x22>
 8006d5a:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <_fflush_r+0x74>)
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	bf08      	it	eq
 8006d60:	68ec      	ldreq	r4, [r5, #12]
 8006d62:	e7da      	b.n	8006d1a <_fflush_r+0x22>
 8006d64:	0800840c 	.word	0x0800840c
 8006d68:	0800842c 	.word	0x0800842c
 8006d6c:	080083ec 	.word	0x080083ec

08006d70 <std>:
 8006d70:	2300      	movs	r3, #0
 8006d72:	b510      	push	{r4, lr}
 8006d74:	4604      	mov	r4, r0
 8006d76:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d7e:	6083      	str	r3, [r0, #8]
 8006d80:	8181      	strh	r1, [r0, #12]
 8006d82:	6643      	str	r3, [r0, #100]	; 0x64
 8006d84:	81c2      	strh	r2, [r0, #14]
 8006d86:	6183      	str	r3, [r0, #24]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	305c      	adds	r0, #92	; 0x5c
 8006d8e:	f7fd fadd 	bl	800434c <memset>
 8006d92:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <std+0x38>)
 8006d94:	6263      	str	r3, [r4, #36]	; 0x24
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <std+0x3c>)
 8006d98:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <std+0x40>)
 8006d9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <std+0x44>)
 8006da0:	6224      	str	r4, [r4, #32]
 8006da2:	6323      	str	r3, [r4, #48]	; 0x30
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	bf00      	nop
 8006da8:	080070c5 	.word	0x080070c5
 8006dac:	080070e7 	.word	0x080070e7
 8006db0:	0800711f 	.word	0x0800711f
 8006db4:	08007143 	.word	0x08007143

08006db8 <_cleanup_r>:
 8006db8:	4901      	ldr	r1, [pc, #4]	; (8006dc0 <_cleanup_r+0x8>)
 8006dba:	f000 b8af 	b.w	8006f1c <_fwalk_reent>
 8006dbe:	bf00      	nop
 8006dc0:	08006cf9 	.word	0x08006cf9

08006dc4 <__sfmoreglue>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	2268      	movs	r2, #104	; 0x68
 8006dc8:	1e4d      	subs	r5, r1, #1
 8006dca:	4355      	muls	r5, r2
 8006dcc:	460e      	mov	r6, r1
 8006dce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dd2:	f7ff fa65 	bl	80062a0 <_malloc_r>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	b140      	cbz	r0, 8006dec <__sfmoreglue+0x28>
 8006dda:	2100      	movs	r1, #0
 8006ddc:	e9c0 1600 	strd	r1, r6, [r0]
 8006de0:	300c      	adds	r0, #12
 8006de2:	60a0      	str	r0, [r4, #8]
 8006de4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006de8:	f7fd fab0 	bl	800434c <memset>
 8006dec:	4620      	mov	r0, r4
 8006dee:	bd70      	pop	{r4, r5, r6, pc}

08006df0 <__sfp_lock_acquire>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__sfp_lock_acquire+0x8>)
 8006df2:	f000 b8b3 	b.w	8006f5c <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000389 	.word	0x20000389

08006dfc <__sfp_lock_release>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <__sfp_lock_release+0x8>)
 8006dfe:	f000 b8ae 	b.w	8006f5e <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	20000389 	.word	0x20000389

08006e08 <__sinit_lock_acquire>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__sinit_lock_acquire+0x8>)
 8006e0a:	f000 b8a7 	b.w	8006f5c <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	2000038a 	.word	0x2000038a

08006e14 <__sinit_lock_release>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sinit_lock_release+0x8>)
 8006e16:	f000 b8a2 	b.w	8006f5e <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	2000038a 	.word	0x2000038a

08006e20 <__sinit>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	f7ff fff0 	bl	8006e08 <__sinit_lock_acquire>
 8006e28:	69a3      	ldr	r3, [r4, #24]
 8006e2a:	b11b      	cbz	r3, 8006e34 <__sinit+0x14>
 8006e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e30:	f7ff bff0 	b.w	8006e14 <__sinit_lock_release>
 8006e34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e38:	6523      	str	r3, [r4, #80]	; 0x50
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <__sinit+0x68>)
 8006e3c:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <__sinit+0x6c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	bf04      	itt	eq
 8006e46:	2301      	moveq	r3, #1
 8006e48:	61a3      	streq	r3, [r4, #24]
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f820 	bl	8006e90 <__sfp>
 8006e50:	6060      	str	r0, [r4, #4]
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f81c 	bl	8006e90 <__sfp>
 8006e58:	60a0      	str	r0, [r4, #8]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f818 	bl	8006e90 <__sfp>
 8006e60:	2200      	movs	r2, #0
 8006e62:	60e0      	str	r0, [r4, #12]
 8006e64:	2104      	movs	r1, #4
 8006e66:	6860      	ldr	r0, [r4, #4]
 8006e68:	f7ff ff82 	bl	8006d70 <std>
 8006e6c:	68a0      	ldr	r0, [r4, #8]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	2109      	movs	r1, #9
 8006e72:	f7ff ff7d 	bl	8006d70 <std>
 8006e76:	68e0      	ldr	r0, [r4, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	2112      	movs	r1, #18
 8006e7c:	f7ff ff78 	bl	8006d70 <std>
 8006e80:	2301      	movs	r3, #1
 8006e82:	61a3      	str	r3, [r4, #24]
 8006e84:	e7d2      	b.n	8006e2c <__sinit+0xc>
 8006e86:	bf00      	nop
 8006e88:	0800806c 	.word	0x0800806c
 8006e8c:	08006db9 	.word	0x08006db9

08006e90 <__sfp>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	4607      	mov	r7, r0
 8006e94:	f7ff ffac 	bl	8006df0 <__sfp_lock_acquire>
 8006e98:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <__sfp+0x84>)
 8006e9a:	681e      	ldr	r6, [r3, #0]
 8006e9c:	69b3      	ldr	r3, [r6, #24]
 8006e9e:	b913      	cbnz	r3, 8006ea6 <__sfp+0x16>
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f7ff ffbd 	bl	8006e20 <__sinit>
 8006ea6:	3648      	adds	r6, #72	; 0x48
 8006ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	d503      	bpl.n	8006eb8 <__sfp+0x28>
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	b30b      	cbz	r3, 8006ef8 <__sfp+0x68>
 8006eb4:	6836      	ldr	r6, [r6, #0]
 8006eb6:	e7f7      	b.n	8006ea8 <__sfp+0x18>
 8006eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ebc:	b9d5      	cbnz	r5, 8006ef4 <__sfp+0x64>
 8006ebe:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <__sfp+0x88>)
 8006ec0:	60e3      	str	r3, [r4, #12]
 8006ec2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ec6:	6665      	str	r5, [r4, #100]	; 0x64
 8006ec8:	f000 f847 	bl	8006f5a <__retarget_lock_init_recursive>
 8006ecc:	f7ff ff96 	bl	8006dfc <__sfp_lock_release>
 8006ed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ed8:	6025      	str	r5, [r4, #0]
 8006eda:	61a5      	str	r5, [r4, #24]
 8006edc:	2208      	movs	r2, #8
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ee4:	f7fd fa32 	bl	800434c <memset>
 8006ee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006eec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	3468      	adds	r4, #104	; 0x68
 8006ef6:	e7d9      	b.n	8006eac <__sfp+0x1c>
 8006ef8:	2104      	movs	r1, #4
 8006efa:	4638      	mov	r0, r7
 8006efc:	f7ff ff62 	bl	8006dc4 <__sfmoreglue>
 8006f00:	4604      	mov	r4, r0
 8006f02:	6030      	str	r0, [r6, #0]
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d1d5      	bne.n	8006eb4 <__sfp+0x24>
 8006f08:	f7ff ff78 	bl	8006dfc <__sfp_lock_release>
 8006f0c:	230c      	movs	r3, #12
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	e7ee      	b.n	8006ef0 <__sfp+0x60>
 8006f12:	bf00      	nop
 8006f14:	0800806c 	.word	0x0800806c
 8006f18:	ffff0001 	.word	0xffff0001

08006f1c <_fwalk_reent>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4606      	mov	r6, r0
 8006f22:	4688      	mov	r8, r1
 8006f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f28:	2700      	movs	r7, #0
 8006f2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f2e:	f1b9 0901 	subs.w	r9, r9, #1
 8006f32:	d505      	bpl.n	8006f40 <_fwalk_reent+0x24>
 8006f34:	6824      	ldr	r4, [r4, #0]
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d1f7      	bne.n	8006f2a <_fwalk_reent+0xe>
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f40:	89ab      	ldrh	r3, [r5, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d907      	bls.n	8006f56 <_fwalk_reent+0x3a>
 8006f46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	d003      	beq.n	8006f56 <_fwalk_reent+0x3a>
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4630      	mov	r0, r6
 8006f52:	47c0      	blx	r8
 8006f54:	4307      	orrs	r7, r0
 8006f56:	3568      	adds	r5, #104	; 0x68
 8006f58:	e7e9      	b.n	8006f2e <_fwalk_reent+0x12>

08006f5a <__retarget_lock_init_recursive>:
 8006f5a:	4770      	bx	lr

08006f5c <__retarget_lock_acquire_recursive>:
 8006f5c:	4770      	bx	lr

08006f5e <__retarget_lock_release_recursive>:
 8006f5e:	4770      	bx	lr

08006f60 <__swhatbuf_r>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	460e      	mov	r6, r1
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	b096      	sub	sp, #88	; 0x58
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	461d      	mov	r5, r3
 8006f70:	da08      	bge.n	8006f84 <__swhatbuf_r+0x24>
 8006f72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	061a      	lsls	r2, r3, #24
 8006f7c:	d410      	bmi.n	8006fa0 <__swhatbuf_r+0x40>
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	e00e      	b.n	8006fa2 <__swhatbuf_r+0x42>
 8006f84:	466a      	mov	r2, sp
 8006f86:	f000 f903 	bl	8007190 <_fstat_r>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	dbf1      	blt.n	8006f72 <__swhatbuf_r+0x12>
 8006f8e:	9a01      	ldr	r2, [sp, #4]
 8006f90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f98:	425a      	negs	r2, r3
 8006f9a:	415a      	adcs	r2, r3
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	e7ee      	b.n	8006f7e <__swhatbuf_r+0x1e>
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	b016      	add	sp, #88	; 0x58
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fac <__smakebuf_r>:
 8006fac:	898b      	ldrh	r3, [r1, #12]
 8006fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fb0:	079d      	lsls	r5, r3, #30
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	d507      	bpl.n	8006fc8 <__smakebuf_r+0x1c>
 8006fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	6163      	str	r3, [r4, #20]
 8006fc4:	b002      	add	sp, #8
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	ab01      	add	r3, sp, #4
 8006fca:	466a      	mov	r2, sp
 8006fcc:	f7ff ffc8 	bl	8006f60 <__swhatbuf_r>
 8006fd0:	9900      	ldr	r1, [sp, #0]
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff f963 	bl	80062a0 <_malloc_r>
 8006fda:	b948      	cbnz	r0, 8006ff0 <__smakebuf_r+0x44>
 8006fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe0:	059a      	lsls	r2, r3, #22
 8006fe2:	d4ef      	bmi.n	8006fc4 <__smakebuf_r+0x18>
 8006fe4:	f023 0303 	bic.w	r3, r3, #3
 8006fe8:	f043 0302 	orr.w	r3, r3, #2
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	e7e3      	b.n	8006fb8 <__smakebuf_r+0xc>
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <__smakebuf_r+0x7c>)
 8006ff2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	6020      	str	r0, [r4, #0]
 8006ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	9b00      	ldr	r3, [sp, #0]
 8007000:	6163      	str	r3, [r4, #20]
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	6120      	str	r0, [r4, #16]
 8007006:	b15b      	cbz	r3, 8007020 <__smakebuf_r+0x74>
 8007008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800700c:	4630      	mov	r0, r6
 800700e:	f000 f8d1 	bl	80071b4 <_isatty_r>
 8007012:	b128      	cbz	r0, 8007020 <__smakebuf_r+0x74>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	89a0      	ldrh	r0, [r4, #12]
 8007022:	4305      	orrs	r5, r0
 8007024:	81a5      	strh	r5, [r4, #12]
 8007026:	e7cd      	b.n	8006fc4 <__smakebuf_r+0x18>
 8007028:	08006db9 	.word	0x08006db9

0800702c <_malloc_usable_size_r>:
 800702c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007030:	1f18      	subs	r0, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	bfbc      	itt	lt
 8007036:	580b      	ldrlt	r3, [r1, r0]
 8007038:	18c0      	addlt	r0, r0, r3
 800703a:	4770      	bx	lr

0800703c <_raise_r>:
 800703c:	291f      	cmp	r1, #31
 800703e:	b538      	push	{r3, r4, r5, lr}
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	d904      	bls.n	8007050 <_raise_r+0x14>
 8007046:	2316      	movs	r3, #22
 8007048:	6003      	str	r3, [r0, #0]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007052:	b112      	cbz	r2, 800705a <_raise_r+0x1e>
 8007054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007058:	b94b      	cbnz	r3, 800706e <_raise_r+0x32>
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f830 	bl	80070c0 <_getpid_r>
 8007060:	462a      	mov	r2, r5
 8007062:	4601      	mov	r1, r0
 8007064:	4620      	mov	r0, r4
 8007066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800706a:	f000 b817 	b.w	800709c <_kill_r>
 800706e:	2b01      	cmp	r3, #1
 8007070:	d00a      	beq.n	8007088 <_raise_r+0x4c>
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	d103      	bne.n	800707e <_raise_r+0x42>
 8007076:	2316      	movs	r3, #22
 8007078:	6003      	str	r3, [r0, #0]
 800707a:	2001      	movs	r0, #1
 800707c:	e7e7      	b.n	800704e <_raise_r+0x12>
 800707e:	2400      	movs	r4, #0
 8007080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007084:	4628      	mov	r0, r5
 8007086:	4798      	blx	r3
 8007088:	2000      	movs	r0, #0
 800708a:	e7e0      	b.n	800704e <_raise_r+0x12>

0800708c <raise>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <raise+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f7ff bfd3 	b.w	800703c <_raise_r>
 8007096:	bf00      	nop
 8007098:	20000020 	.word	0x20000020

0800709c <_kill_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_kill_r+0x20>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f7fb f9c7 	bl	800243c <_kill>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d102      	bne.n	80070b8 <_kill_r+0x1c>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b103      	cbz	r3, 80070b8 <_kill_r+0x1c>
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	20000384 	.word	0x20000384

080070c0 <_getpid_r>:
 80070c0:	f7fb b9b4 	b.w	800242c <_getpid>

080070c4 <__sread>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	f000 f894 	bl	80071f8 <_read_r>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	bfab      	itete	ge
 80070d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070d6:	89a3      	ldrhlt	r3, [r4, #12]
 80070d8:	181b      	addge	r3, r3, r0
 80070da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070de:	bfac      	ite	ge
 80070e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070e2:	81a3      	strhlt	r3, [r4, #12]
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <__swrite>:
 80070e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	461f      	mov	r7, r3
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	05db      	lsls	r3, r3, #23
 80070f0:	4605      	mov	r5, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4616      	mov	r6, r2
 80070f6:	d505      	bpl.n	8007104 <__swrite+0x1e>
 80070f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fc:	2302      	movs	r3, #2
 80070fe:	2200      	movs	r2, #0
 8007100:	f000 f868 	bl	80071d4 <_lseek_r>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800710a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	4632      	mov	r2, r6
 8007112:	463b      	mov	r3, r7
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800711a:	f000 b817 	b.w	800714c <_write_r>

0800711e <__sseek>:
 800711e:	b510      	push	{r4, lr}
 8007120:	460c      	mov	r4, r1
 8007122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007126:	f000 f855 	bl	80071d4 <_lseek_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	bf15      	itete	ne
 8007130:	6560      	strne	r0, [r4, #84]	; 0x54
 8007132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800713a:	81a3      	strheq	r3, [r4, #12]
 800713c:	bf18      	it	ne
 800713e:	81a3      	strhne	r3, [r4, #12]
 8007140:	bd10      	pop	{r4, pc}

08007142 <__sclose>:
 8007142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007146:	f000 b813 	b.w	8007170 <_close_r>
	...

0800714c <_write_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d07      	ldr	r5, [pc, #28]	; (800716c <_write_r+0x20>)
 8007150:	4604      	mov	r4, r0
 8007152:	4608      	mov	r0, r1
 8007154:	4611      	mov	r1, r2
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fb f9a5 	bl	80024aa <_write>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_write_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_write_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000384 	.word	0x20000384

08007170 <_close_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4d06      	ldr	r5, [pc, #24]	; (800718c <_close_r+0x1c>)
 8007174:	2300      	movs	r3, #0
 8007176:	4604      	mov	r4, r0
 8007178:	4608      	mov	r0, r1
 800717a:	602b      	str	r3, [r5, #0]
 800717c:	f7fb f9b1 	bl	80024e2 <_close>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_close_r+0x1a>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_close_r+0x1a>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20000384 	.word	0x20000384

08007190 <_fstat_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d07      	ldr	r5, [pc, #28]	; (80071b0 <_fstat_r+0x20>)
 8007194:	2300      	movs	r3, #0
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	602b      	str	r3, [r5, #0]
 800719e:	f7fb f9ac 	bl	80024fa <_fstat>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d102      	bne.n	80071ac <_fstat_r+0x1c>
 80071a6:	682b      	ldr	r3, [r5, #0]
 80071a8:	b103      	cbz	r3, 80071ac <_fstat_r+0x1c>
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	20000384 	.word	0x20000384

080071b4 <_isatty_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d06      	ldr	r5, [pc, #24]	; (80071d0 <_isatty_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7fb f9ab 	bl	800251a <_isatty>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_isatty_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_isatty_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20000384 	.word	0x20000384

080071d4 <_lseek_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d07      	ldr	r5, [pc, #28]	; (80071f4 <_lseek_r+0x20>)
 80071d8:	4604      	mov	r4, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	602a      	str	r2, [r5, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7fb f9a4 	bl	8002530 <_lseek>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_lseek_r+0x1e>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_lseek_r+0x1e>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20000384 	.word	0x20000384

080071f8 <_read_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	; (8007218 <_read_r+0x20>)
 80071fc:	4604      	mov	r4, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fb f932 	bl	8002470 <_read>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_read_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_read_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	20000384 	.word	0x20000384

0800721c <_init>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr

08007228 <_fini>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr
