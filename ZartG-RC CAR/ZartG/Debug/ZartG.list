
ZartG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008bb0  08008bb0  00018bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca0  08008ca0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08008ca0  08008ca0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ca0  08008ca0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000090  08008d38  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08008d38  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c62  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002753  00000000  00000000  00031d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00034470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00035750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b77  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013faf  00000000  00000000  0004f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f037  00000000  00000000  000634a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f24dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  000f2530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b94 	.word	0x08008b94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08008b94 	.word	0x08008b94

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <AHT10enableSensor>:
} extern veri;
uint8_t BUFFER[6];
uint8_t measure = 0xAC;
extern I2C_HandleTypeDef hi2c2;
void AHT10enableSensor()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af02      	add	r7, sp, #8
	uint8_t data = 0xE1;
 8000faa:	23e1      	movs	r3, #225	; 0xe1
 8000fac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, &data , 1,10);
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2170      	movs	r1, #112	; 0x70
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <AHT10enableSensor+0x24>)
 8000fba:	f002 f95d 	bl	8003278 <HAL_I2C_Master_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000017c 	.word	0x2000017c

08000fcc <AHT10measure>:
void AHT10measure() // BEFORE READ THE MEASURED DATA YOU MOST WAIT AT LEAST 75MS !!!
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, &measure , 1,10);
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <AHT10measure+0x1c>)
 8000fda:	2170      	movs	r1, #112	; 0x70
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <AHT10measure+0x20>)
 8000fde:	f002 f94b 	bl	8003278 <HAL_I2C_Master_Transmit>

}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	2000017c 	.word	0x2000017c

08000ff0 <AHT10read>:
void AHT10read()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(&hi2c2, DEVICE_ADDR, BUFFER, 6, 50);
 8000ff6:	2332      	movs	r3, #50	; 0x32
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <AHT10read+0xa8>)
 8000ffe:	2170      	movs	r1, #112	; 0x70
 8001000:	4826      	ldr	r0, [pc, #152]	; (800109c <AHT10read+0xac>)
 8001002:	f002 fa37 	bl	8003474 <HAL_I2C_Master_Receive>
	uint32_t traw = (((uint32_t)BUFFER[3] & 15) << 16) | ((uint32_t)BUFFER[4] << 8) | BUFFER[5];
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <AHT10read+0xa8>)
 8001008:	78db      	ldrb	r3, [r3, #3]
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <AHT10read+0xa8>)
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	4313      	orrs	r3, r2
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <AHT10read+0xa8>)
 800101a:	7952      	ldrb	r2, [r2, #5]
 800101c:	4313      	orrs	r3, r2
 800101e:	607b      	str	r3, [r7, #4]
	uint32_t hraw =((BUFFER[1] << 16) | (BUFFER[2] << 8) | BUFFER[3]) >> 4;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <AHT10read+0xa8>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	041a      	lsls	r2, r3, #16
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <AHT10read+0xa8>)
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	4313      	orrs	r3, r2
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <AHT10read+0xa8>)
 8001030:	78d2      	ldrb	r2, [r2, #3]
 8001032:	4313      	orrs	r3, r2
 8001034:	111b      	asrs	r3, r3, #4
 8001036:	603b      	str	r3, [r7, #0]
	veri.sicaklik  = (float)(traw * 200.00 / 1048576.00) - 50.00;
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff f9cb 	bl	80003d4 <__aeabi_ui2d>
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <AHT10read+0xb0>)
 8001044:	f7ff fa40 	bl	80004c8 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <AHT10read+0xb4>)
 8001056:	f7ff fb61 	bl	800071c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fccb 	bl	80009fc <__aeabi_d2f>
 8001066:	4603      	mov	r3, r0
 8001068:	490f      	ldr	r1, [pc, #60]	; (80010a8 <AHT10read+0xb8>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd1a 	bl	8000aa4 <__aeabi_fsub>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <AHT10read+0xbc>)
 8001076:	605a      	str	r2, [r3, #4]
	veri.nem = (hraw * 100 / 1048576);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2264      	movs	r2, #100	; 0x64
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	0d1b      	lsrs	r3, r3, #20
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fdc0 	bl	8000c08 <__aeabi_ui2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <AHT10read+0xbc>)
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000ac 	.word	0x200000ac
 800109c:	2000017c 	.word	0x2000017c
 80010a0:	40690000 	.word	0x40690000
 80010a4:	41300000 	.word	0x41300000
 80010a8:	42480000 	.word	0x42480000
 80010ac:	20000304 	.word	0x20000304

080010b0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <NRF24_DelayMicroSeconds+0x38>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <NRF24_DelayMicroSeconds+0x3c>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9a      	lsrs	r2, r3, #18
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80010d0:	bf00      	nop
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	60fa      	str	r2, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1fa      	bne.n	80010d2 <NRF24_DelayMicroSeconds+0x22>
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000020 	.word	0x20000020
 80010ec:	165e9f81 	.word	0x165e9f81

080010f0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <NRF24_csn+0x20>
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <NRF24_csn+0x38>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <NRF24_csn+0x3c>)
 8001104:	8811      	ldrh	r1, [r2, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f001 ff59 	bl	8002fc0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800110e:	e007      	b.n	8001120 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <NRF24_csn+0x38>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <NRF24_csn+0x3c>)
 8001116:	8811      	ldrh	r1, [r2, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f001 ff50 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000c8 	.word	0x200000c8
 800112c:	200000cc 	.word	0x200000cc

08001130 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d008      	beq.n	8001150 <NRF24_ce+0x20>
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <NRF24_ce+0x38>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <NRF24_ce+0x3c>)
 8001144:	8811      	ldrh	r1, [r2, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f001 ff39 	bl	8002fc0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800114e:	e007      	b.n	8001160 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <NRF24_ce+0x38>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <NRF24_ce+0x3c>)
 8001156:	8811      	ldrh	r1, [r2, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f001 ff30 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000c8 	.word	0x200000c8
 800116c:	200000ce 	.word	0x200000ce

08001170 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff ffb8 	bl	80010f0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	b2db      	uxtb	r3, r3
 8001188:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800118a:	f107 010c 	add.w	r1, r7, #12
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	2201      	movs	r2, #1
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <NRF24_read_register+0x4c>)
 8001194:	f005 fc2e 	bl	80069f4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	1c59      	adds	r1, r3, #1
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	2201      	movs	r2, #1
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <NRF24_read_register+0x4c>)
 80011a4:	f005 fd62 	bl	8006c6c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff ff9f 	bl	80010f0 <NRF24_csn>
	return retData;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000d0 	.word	0x200000d0

080011c0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff8d 	bl	80010f0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011e0:	f107 010c 	add.w	r1, r7, #12
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	2201      	movs	r2, #1
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <NRF24_read_registerN+0x4c>)
 80011ea:	f005 fc03 	bl	80069f4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <NRF24_read_registerN+0x4c>)
 80011f8:	f005 fd38 	bl	8006c6c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ff77 	bl	80010f0 <NRF24_csn>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000d0 	.word	0x200000d0

08001210 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	4613      	mov	r3, r2
 800121e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff65 	bl	80010f0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001234:	f107 010c 	add.w	r1, r7, #12
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	2202      	movs	r2, #2
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <NRF24_write_register+0x40>)
 800123e:	f005 fbd9 	bl	80069f4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff ff54 	bl	80010f0 <NRF24_csn>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000d0 	.word	0x200000d0

08001254 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff ff43 	bl	80010f0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	b2db      	uxtb	r3, r3
 8001272:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001274:	f107 010c 	add.w	r1, r7, #12
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	2201      	movs	r2, #1
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <NRF24_write_registerN+0x4c>)
 800127e:	f005 fbb9 	bl	80069f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	b29a      	uxth	r2, r3
 8001286:	2364      	movs	r3, #100	; 0x64
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <NRF24_write_registerN+0x4c>)
 800128c:	f005 fbb2 	bl	80069f4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff ff2d 	bl	80010f0 <NRF24_csn>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000d0 	.word	0x200000d0

080012a4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff ff1d 	bl	80010f0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80012b6:	23a0      	movs	r3, #160	; 0xa0
 80012b8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80012ba:	f107 010f 	add.w	r1, r7, #15
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	2201      	movs	r2, #1
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <NRF24_write_payload+0x40>)
 80012c4:	f005 fb96 	bl	80069f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <NRF24_write_payload+0x40>)
 80012d2:	f005 fb8f 	bl	80069f4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff ff0a 	bl	80010f0 <NRF24_csn>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000d0 	.word	0x200000d0

080012e8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80012ec:	21ff      	movs	r1, #255	; 0xff
 80012ee:	20e1      	movs	r0, #225	; 0xe1
 80012f0:	f7ff ff8e 	bl	8001210 <NRF24_write_register>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80012fc:	21ff      	movs	r1, #255	; 0xff
 80012fe:	20e2      	movs	r0, #226	; 0xe2
 8001300:	f7ff ff86 	bl	8001210 <NRF24_write_register>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800130e:	2007      	movs	r0, #7
 8001310:	f7ff ff2e 	bl	8001170 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001318:	79fb      	ldrb	r3, [r7, #7]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001324:	b082      	sub	sp, #8
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001338:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <NRF24_begin+0x1ac>)
 800133a:	4618      	mov	r0, r3
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2258      	movs	r2, #88	; 0x58
 8001342:	4619      	mov	r1, r3
 8001344:	f006 fd3e 	bl	8007dc4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001348:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <NRF24_begin+0x1b0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800134e:	4a62      	ldr	r2, [pc, #392]	; (80014d8 <NRF24_begin+0x1b4>)
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001354:	4a61      	ldr	r2, [pc, #388]	; (80014dc <NRF24_begin+0x1b8>)
 8001356:	883b      	ldrh	r3, [r7, #0]
 8001358:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fec8 	bl	80010f0 <NRF24_csn>
	NRF24_ce(0);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fee5 	bl	8001130 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001366:	2005      	movs	r0, #5
 8001368:	f001 faf2 	bl	8002950 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800136c:	2108      	movs	r1, #8
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ff4e 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001374:	213f      	movs	r1, #63	; 0x3f
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff4a 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800137c:	2103      	movs	r1, #3
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff ff46 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001384:	2103      	movs	r1, #3
 8001386:	2003      	movs	r0, #3
 8001388:	f7ff ff42 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800138c:	2103      	movs	r1, #3
 800138e:	2004      	movs	r0, #4
 8001390:	f7ff ff3e 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001394:	2102      	movs	r1, #2
 8001396:	2005      	movs	r0, #5
 8001398:	f7ff ff3a 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800139c:	210f      	movs	r1, #15
 800139e:	2006      	movs	r0, #6
 80013a0:	f7ff ff36 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80013a4:	210e      	movs	r1, #14
 80013a6:	2007      	movs	r0, #7
 80013a8:	f7ff ff32 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80013ac:	2100      	movs	r1, #0
 80013ae:	2008      	movs	r0, #8
 80013b0:	f7ff ff2e 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80013b4:	2100      	movs	r1, #0
 80013b6:	2009      	movs	r0, #9
 80013b8:	f7ff ff2a 	bl	8001210 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80013bc:	23e7      	movs	r3, #231	; 0xe7
 80013be:	733b      	strb	r3, [r7, #12]
 80013c0:	23e7      	movs	r3, #231	; 0xe7
 80013c2:	72fb      	strb	r3, [r7, #11]
 80013c4:	23e7      	movs	r3, #231	; 0xe7
 80013c6:	72bb      	strb	r3, [r7, #10]
 80013c8:	23e7      	movs	r3, #231	; 0xe7
 80013ca:	727b      	strb	r3, [r7, #9]
 80013cc:	23e7      	movs	r3, #231	; 0xe7
 80013ce:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2205      	movs	r2, #5
 80013d6:	4619      	mov	r1, r3
 80013d8:	200a      	movs	r0, #10
 80013da:	f7ff ff3b 	bl	8001254 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80013de:	23c2      	movs	r3, #194	; 0xc2
 80013e0:	733b      	strb	r3, [r7, #12]
 80013e2:	23c2      	movs	r3, #194	; 0xc2
 80013e4:	72fb      	strb	r3, [r7, #11]
 80013e6:	23c2      	movs	r3, #194	; 0xc2
 80013e8:	72bb      	strb	r3, [r7, #10]
 80013ea:	23c2      	movs	r3, #194	; 0xc2
 80013ec:	727b      	strb	r3, [r7, #9]
 80013ee:	23c2      	movs	r3, #194	; 0xc2
 80013f0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2205      	movs	r2, #5
 80013f8:	4619      	mov	r1, r3
 80013fa:	200b      	movs	r0, #11
 80013fc:	f7ff ff2a 	bl	8001254 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001400:	21c3      	movs	r1, #195	; 0xc3
 8001402:	200c      	movs	r0, #12
 8001404:	f7ff ff04 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001408:	21c4      	movs	r1, #196	; 0xc4
 800140a:	200d      	movs	r0, #13
 800140c:	f7ff ff00 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001410:	21c5      	movs	r1, #197	; 0xc5
 8001412:	200e      	movs	r0, #14
 8001414:	f7ff fefc 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001418:	21c6      	movs	r1, #198	; 0xc6
 800141a:	200f      	movs	r0, #15
 800141c:	f7ff fef8 	bl	8001210 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001420:	23e7      	movs	r3, #231	; 0xe7
 8001422:	733b      	strb	r3, [r7, #12]
 8001424:	23e7      	movs	r3, #231	; 0xe7
 8001426:	72fb      	strb	r3, [r7, #11]
 8001428:	23e7      	movs	r3, #231	; 0xe7
 800142a:	72bb      	strb	r3, [r7, #10]
 800142c:	23e7      	movs	r3, #231	; 0xe7
 800142e:	727b      	strb	r3, [r7, #9]
 8001430:	23e7      	movs	r3, #231	; 0xe7
 8001432:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2205      	movs	r2, #5
 800143a:	4619      	mov	r1, r3
 800143c:	2010      	movs	r0, #16
 800143e:	f7ff ff09 	bl	8001254 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	2011      	movs	r0, #17
 8001446:	f7ff fee3 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800144a:	2100      	movs	r1, #0
 800144c:	2012      	movs	r0, #18
 800144e:	f7ff fedf 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001452:	2100      	movs	r1, #0
 8001454:	2013      	movs	r0, #19
 8001456:	f7ff fedb 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800145a:	2100      	movs	r1, #0
 800145c:	2014      	movs	r0, #20
 800145e:	f7ff fed7 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001462:	2100      	movs	r1, #0
 8001464:	2015      	movs	r0, #21
 8001466:	f7ff fed3 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	2016      	movs	r0, #22
 800146e:	f7ff fecf 	bl	8001210 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8001472:	f000 fad3 	bl	8001a1c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001476:	2100      	movs	r1, #0
 8001478:	201c      	movs	r0, #28
 800147a:	f7ff fec9 	bl	8001210 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800147e:	2100      	movs	r1, #0
 8001480:	201d      	movs	r0, #29
 8001482:	f7ff fec5 	bl	8001210 <NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001486:	210f      	movs	r1, #15
 8001488:	200f      	movs	r0, #15
 800148a:	f000 f8fb 	bl	8001684 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f973 	bl	800177a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f9a9 	bl	80017ec <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800149a:	2002      	movs	r0, #2
 800149c:	f000 f9ec 	bl	8001878 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80014a0:	f000 f93e 	bl	8001720 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80014a4:	2020      	movs	r0, #32
 80014a6:	f000 f91d 	bl	80016e4 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80014aa:	f000 faae 	bl	8001a0a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80014ae:	204c      	movs	r0, #76	; 0x4c
 80014b0:	f000 f903 	bl	80016ba <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80014b4:	f7ff ff18 	bl	80012e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014b8:	f7ff ff1e 	bl	80012f8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80014bc:	f000 fa04 	bl	80018c8 <NRF24_powerDown>
	
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014ca:	b002      	add	sp, #8
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200000d0 	.word	0x200000d0
 80014d4:	200000c8 	.word	0x200000c8
 80014d8:	200000cc 	.word	0x200000cc
 80014dc:	200000ce 	.word	0x200000ce

080014e0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff fe23 	bl	8001130 <NRF24_ce>
	NRF24_flush_tx();
 80014ea:	f7ff fefd 	bl	80012e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014ee:	f7ff ff03 	bl	80012f8 <NRF24_flush_rx>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001504:	f000 fa81 	bl	8001a0a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fa1a 	bl	8001946 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001512:	f001 fa13 	bl	800293c <HAL_GetTick>
 8001516:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001518:	230a      	movs	r3, #10
 800151a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800151c:	f107 030d 	add.w	r3, r7, #13
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	2008      	movs	r0, #8
 8001526:	f7ff fe4b 	bl	80011c0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800152a:	f7ff feed 	bl	8001308 <NRF24_get_status>
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <NRF24_write+0x54>
 800153c:	f001 f9fe 	bl	800293c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8e7      	bhi.n	800151c <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800154c:	f107 010b 	add.w	r1, r7, #11
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <NRF24_write+0x90>)
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fa24 	bl	80019a4 <NRF24_whatHappened>
	retStatus = tx_ok;
 800155c:	7b3b      	ldrb	r3, [r7, #12]
 800155e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <NRF24_write+0x90>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001568:	f000 f8d2 	bl	8001710 <NRF24_getDynamicPayloadSize>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <NRF24_write+0x94>)
 8001572:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001574:	f000 f80c 	bl	8001590 <NRF24_available>
	NRF24_flush_tx();
 8001578:	f7ff feb6 	bl	80012e8 <NRF24_flush_tx>
	return retStatus;
 800157c:	7bbb      	ldrb	r3, [r7, #14]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000c0 	.word	0x200000c0
 800158c:	200000c1 	.word	0x200000c1

08001590 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001594:	2000      	movs	r0, #0
 8001596:	f000 f9a6 	bl	80018e6 <NRF24_availablePipe>
 800159a:	4603      	mov	r3, r0
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}

080015a0 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80015aa:	463b      	mov	r3, r7
 80015ac:	2205      	movs	r2, #5
 80015ae:	4619      	mov	r1, r3
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff fe4f 	bl	8001254 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80015b6:	463b      	mov	r3, r7
 80015b8:	2205      	movs	r2, #5
 80015ba:	4619      	mov	r1, r3
 80015bc:	2010      	movs	r0, #16
 80015be:	f7ff fe49 	bl	8001254 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80015c2:	2320      	movs	r3, #32
 80015c4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <NRF24_openWritingPipe+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bf28      	it	cs
 80015d0:	4613      	movcs	r3, r2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	2011      	movs	r0, #17
 80015d8:	f7ff fe1a 	bl	8001210 <NRF24_write_register>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000c2 	.word	0x200000c2

080015e8 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4601      	mov	r1, r0
 80015f0:	e9c7 2300 	strd	r2, r3, [r7]
 80015f4:	460b      	mov	r3, r1
 80015f6:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80015fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001602:	491c      	ldr	r1, [pc, #112]	; (8001674 <NRF24_openReadingPipe+0x8c>)
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b06      	cmp	r3, #6
 800160c:	d82d      	bhi.n	800166a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d808      	bhi.n	8001626 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <NRF24_openReadingPipe+0x90>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	4639      	mov	r1, r7
 800161c:	2205      	movs	r2, #5
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe18 	bl	8001254 <NRF24_write_registerN>
 8001624:	e007      	b.n	8001636 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4a13      	ldr	r2, [pc, #76]	; (8001678 <NRF24_openReadingPipe+0x90>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	4639      	mov	r1, r7
 800162e:	2201      	movs	r2, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe0f 	bl	8001254 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	4a10      	ldr	r2, [pc, #64]	; (800167c <NRF24_openReadingPipe+0x94>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	4a10      	ldr	r2, [pc, #64]	; (8001680 <NRF24_openReadingPipe+0x98>)
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fde4 	bl	8001210 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff fd91 	bl	8001170 <NRF24_read_register>
 800164e:	4603      	mov	r3, r0
 8001650:	b25a      	sxtb	r2, r3
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	2002      	movs	r0, #2
 8001666:	f7ff fdd3 	bl	8001210 <NRF24_write_register>
	}
	
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200000b8 	.word	0x200000b8
 8001678:	08008bd0 	.word	0x08008bd0
 800167c:	08008bd8 	.word	0x08008bd8
 8001680:	200000c2 	.word	0x200000c2

08001684 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	b25a      	sxtb	r2, r3
 800169a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	2004      	movs	r0, #4
 80016ae:	f7ff fdaf 	bl	8001210 <NRF24_write_register>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80016c4:	237f      	movs	r3, #127	; 0x7f
 80016c6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bf28      	it	cs
 80016d0:	4613      	movcs	r3, r2
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	2005      	movs	r0, #5
 80016d8:	f7ff fd9a 	bl	8001210 <NRF24_write_register>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80016ee:	2320      	movs	r3, #32
 80016f0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4293      	cmp	r3, r2
 80016f8:	bf28      	it	cs
 80016fa:	4613      	movcs	r3, r2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <NRF24_setPayloadSize+0x28>)
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	200000c2 	.word	0x200000c2

08001710 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001714:	2060      	movs	r0, #96	; 0x60
 8001716:	f7ff fd2b 	bl	8001170 <NRF24_read_register>
 800171a:	4603      	mov	r3, r0
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}

08001720 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001724:	201d      	movs	r0, #29
 8001726:	f7ff fd23 	bl	8001170 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	201d      	movs	r0, #29
 8001736:	f7ff fd6b 	bl	8001210 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800173a:	2100      	movs	r1, #0
 800173c:	201c      	movs	r0, #28
 800173e:	f7ff fd67 	bl	8001210 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001742:	4b02      	ldr	r3, [pc, #8]	; (800174c <NRF24_disableDynamicPayloads+0x2c>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000c3 	.word	0x200000c3

08001750 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001760:	213f      	movs	r1, #63	; 0x3f
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff fd54 	bl	8001210 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001768:	e003      	b.n	8001772 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800176a:	2100      	movs	r1, #0
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fd4f 	bl	8001210 <NRF24_write_register>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001784:	2006      	movs	r0, #6
 8001786:	f7ff fcf3 	bl	8001170 <NRF24_read_register>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f023 0306 	bic.w	r3, r3, #6
 8001794:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d104      	bne.n	80017a6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	f043 0306 	orr.w	r3, r3, #6
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e019      	b.n	80017da <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d104      	bne.n	80017b6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e011      	b.n	80017da <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d104      	bne.n	80017c6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e009      	b.n	80017da <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d103      	bne.n	80017da <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f043 0306 	orr.w	r3, r3, #6
 80017d8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	4619      	mov	r1, r3
 80017de:	2006      	movs	r0, #6
 80017e0:	f7ff fd16 	bl	8001210 <NRF24_write_register>
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80017fa:	2006      	movs	r0, #6
 80017fc:	f7ff fcb8 	bl	8001170 <NRF24_read_register>
 8001800:	4603      	mov	r3, r0
 8001802:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <NRF24_setDataRate+0x88>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001810:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d107      	bne.n	8001828 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <NRF24_setDataRate+0x88>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	f043 0320 	orr.w	r3, r3, #32
 8001824:	73bb      	strb	r3, [r7, #14]
 8001826:	e00d      	b.n	8001844 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <NRF24_setDataRate+0x88>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	73bb      	strb	r3, [r7, #14]
 800183c:	e002      	b.n	8001844 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <NRF24_setDataRate+0x88>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001844:	7bbb      	ldrb	r3, [r7, #14]
 8001846:	4619      	mov	r1, r3
 8001848:	2006      	movs	r0, #6
 800184a:	f7ff fce1 	bl	8001210 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800184e:	2006      	movs	r0, #6
 8001850:	f7ff fc8e 	bl	8001170 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	4293      	cmp	r3, r2
 800185c:	d102      	bne.n	8001864 <NRF24_setDataRate+0x78>
  {
    result = true;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e002      	b.n	800186a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <NRF24_setDataRate+0x88>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200000c4 	.word	0x200000c4

08001878 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fc74 	bl	8001170 <NRF24_read_register>
 8001888:	4603      	mov	r3, r0
 800188a:	f023 030c 	bic.w	r3, r3, #12
 800188e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00f      	beq.n	80018b6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d104      	bne.n	80018a6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e007      	b.n	80018b6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	4619      	mov	r1, r3
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fca8 	bl	8001210 <NRF24_write_register>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fc4f 	bl	8001170 <NRF24_read_register>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f023 0302 	bic.w	r3, r3, #2
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fc97 	bl	8001210 <NRF24_write_register>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80018ee:	f7ff fd0b 	bl	8001308 <NRF24_get_status>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001906:	7bbb      	ldrb	r3, [r7, #14]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d017      	beq.n	800193c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	b2da      	uxtb	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001922:	2140      	movs	r1, #64	; 0x40
 8001924:	2007      	movs	r0, #7
 8001926:	f7ff fc73 	bl	8001210 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001934:	2120      	movs	r1, #32
 8001936:	2007      	movs	r0, #7
 8001938:	f7ff fc6a 	bl	8001210 <NRF24_write_register>
    }
  }
  return result;
 800193c:	7bbb      	ldrb	r3, [r7, #14]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fbec 	bl	8001130 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fc09 	bl	8001170 <NRF24_read_register>
 800195e:	4603      	mov	r3, r0
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fc4e 	bl	8001210 <NRF24_write_register>
  NRF24_ce(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fbdb 	bl	8001130 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800197a:	2096      	movs	r0, #150	; 0x96
 800197c:	f7ff fb98 	bl	80010b0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fc8d 	bl	80012a4 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff fbd0 	bl	8001130 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff fb8d 	bl	80010b0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fbca 	bl	8001130 <NRF24_ce>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80019b0:	f7ff fcaa 	bl	8001308 <NRF24_get_status>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80019be:	2170      	movs	r1, #112	; 0x70
 80019c0:	2007      	movs	r0, #7
 80019c2:	f7ff fc25 	bl	8001210 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	701a      	strb	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001a0e:	2170      	movs	r1, #112	; 0x70
 8001a10:	2007      	movs	r0, #7
 8001a12:	f7ff fbfd 	bl	8001210 <NRF24_write_register>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fb64 	bl	80010f0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001a28:	2350      	movs	r3, #80	; 0x50
 8001a2a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001a2c:	2373      	movs	r3, #115	; 0x73
 8001a2e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001a30:	1d39      	adds	r1, r7, #4
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	2202      	movs	r2, #2
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <NRF24_ACTIVATE_cmd+0x30>)
 8001a38:	f004 ffdc 	bl	80069f4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fb57 	bl	80010f0 <NRF24_csn>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000d0 	.word	0x200000d0

08001a50 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

float gxx,gzz,vi,viy;
uint8_t SAYAC;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a81      	ldr	r2, [pc, #516]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f040 80e9 	bne.w	8001c34 <HAL_TIM_PeriodElapsedCallback+0x1e4>
	{
		mpu_measure();
 8001a62:	f000 fc19 	bl	8002298 <mpu_measure>
		float accelPitch = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 8001a66:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fcd4 	bl	8000418 <__aeabi_f2d>
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	4b7b      	ldr	r3, [pc, #492]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fccd 	bl	8000418 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f006 fe1f 	bl	80086c8 <atan2>
 8001a8a:	a36d      	add	r3, pc, #436	; (adr r3, 8001c40 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fd1a 	bl	80004c8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7fe ffae 	bl	80009fc <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
		gxx = 0.98 * (gxx + (sensorData.gy+vi) * 0.01) + (1 - 0.98) * accelPitch;
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcb5 	bl	8000418 <__aeabi_f2d>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	4a6d      	ldr	r2, [pc, #436]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fff3 	bl	8000aa8 <__addsf3>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fca7 	bl	8000418 <__aeabi_f2d>
 8001aca:	a35f      	add	r3, pc, #380	; (adr r3, 8001c48 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fcfa 	bl	80004c8 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4620      	mov	r0, r4
 8001ada:	4629      	mov	r1, r5
 8001adc:	f7fe fb3e 	bl	800015c <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	a359      	add	r3, pc, #356	; (adr r3, 8001c50 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fceb 	bl	80004c8 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7fe fc8c 	bl	8000418 <__aeabi_f2d>
 8001b00:	a355      	add	r3, pc, #340	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fcdf 	bl	80004c8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fb23 	bl	800015c <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe ff6d 	bl	80009fc <__aeabi_d2f>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a50      	ldr	r2, [pc, #320]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001b26:	6013      	str	r3, [r2, #0]
		vi = sensorData.gy;
 8001b28:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	4a4f      	ldr	r2, [pc, #316]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b2e:	6013      	str	r3, [r2, #0]
		float accelRoll = atan2(sensorData.ay, sensorData.ax) * RAD2DEG;
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fc6f 	bl	8000418 <__aeabi_f2d>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc68 	bl	8000418 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f006 fdba 	bl	80086c8 <atan2>
 8001b54:	a33a      	add	r3, pc, #232	; (adr r3, 8001c40 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fcb5 	bl	80004c8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7fe ff49 	bl	80009fc <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	60bb      	str	r3, [r7, #8]
		gzz = 0.98 * (gzz + (sensorData.gz+viy) * 0.01) + (1 - 0.98) * accelRoll;
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc50 	bl	8000418 <__aeabi_f2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe ff8e 	bl	8000aa8 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fc42 	bl	8000418 <__aeabi_f2d>
 8001b94:	a32c      	add	r3, pc, #176	; (adr r3, 8001c48 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fc95 	bl	80004c8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fad9 	bl	800015c <__adddf3>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	a327      	add	r3, pc, #156	; (adr r3, 8001c50 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fc86 	bl	80004c8 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f7fe fc27 	bl	8000418 <__aeabi_f2d>
 8001bca:	a323      	add	r3, pc, #140	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fc7a 	bl	80004c8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fabe 	bl	800015c <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff08 	bl	80009fc <__aeabi_d2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001bf0:	6013      	str	r3, [r2, #0]
		viy = sensorData.gz;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001bf8:	6013      	str	r3, [r2, #0]
		if(SAYAC == 10)
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b0a      	cmp	r3, #10
 8001c00:	d105      	bne.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x1be>
		{
			SAYAC = 0;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
			AHT10read();
 8001c08:	f7ff f9f2 	bl	8000ff0 <AHT10read>
		}else
		{
			SAYAC++;
		}
	}
}
 8001c0c:	e012      	b.n	8001c34 <HAL_TIM_PeriodElapsedCallback+0x1e4>
		}else if(SAYAC == 5)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d108      	bne.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			AHT10measure();
 8001c16:	f7ff f9d9 	bl	8000fcc <AHT10measure>
			SAYAC++;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c24:	701a      	strb	r2, [r3, #0]
}
 8001c26:	e005      	b.n	8001c34 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			SAYAC++;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c32:	701a      	strb	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3c:	f3af 8000 	nop.w
 8001c40:	1a63c1f8 	.word	0x1a63c1f8
 8001c44:	404ca5dc 	.word	0x404ca5dc
 8001c48:	47ae147b 	.word	0x47ae147b
 8001c4c:	3f847ae1 	.word	0x3f847ae1
 8001c50:	f5c28f5c 	.word	0xf5c28f5c
 8001c54:	3fef5c28 	.word	0x3fef5c28
 8001c58:	47ae1480 	.word	0x47ae1480
 8001c5c:	3f947ae1 	.word	0x3f947ae1
 8001c60:	20000228 	.word	0x20000228
 8001c64:	200002c4 	.word	0x200002c4
 8001c68:	2000030c 	.word	0x2000030c
 8001c6c:	20000314 	.word	0x20000314
 8001c70:	20000310 	.word	0x20000310
 8001c74:	20000318 	.word	0x20000318
 8001c78:	2000031c 	.word	0x2000031c

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7e:	b097      	sub	sp, #92	; 0x5c
 8001c80:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c82:	f000 fe03 	bl	800288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c86:	f000 f889 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8a:	f000 f9d5 	bl	8002038 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c8e:	f000 f9a9 	bl	8001fe4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001c92:	f000 f95b 	bl	8001f4c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001c96:	f000 f8c7 	bl	8001e28 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c9a:	f000 f8f3 	bl	8001e84 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001c9e:	f000 f91f 	bl	8001ee0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi1);
 8001ca2:	4c32      	ldr	r4, [pc, #200]	; (8001d6c <main+0xf0>)
 8001ca4:	4668      	mov	r0, sp
 8001ca6:	1d23      	adds	r3, r4, #4
 8001ca8:	2254      	movs	r2, #84	; 0x54
 8001caa:	4619      	mov	r1, r3
 8001cac:	f006 f88a 	bl	8007dc4 <memcpy>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <main+0xf4>)
 8001cb8:	f7ff fb34 	bl	8001324 <NRF24_begin>
  NRF24_setPayloadSize(20);
 8001cbc:	2014      	movs	r0, #20
 8001cbe:	f7ff fd11 	bl	80016e4 <NRF24_setPayloadSize>
  NRF24_openWritingPipe(TxpipeAddrs);
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <main+0xf8>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7ff fc68 	bl	80015a0 <NRF24_openWritingPipe>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <main+0xfc>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f7ff fc86 	bl	80015e8 <NRF24_openReadingPipe>
  NRF24_stopListening();
 8001cdc:	f7ff fc00 	bl	80014e0 <NRF24_stopListening>
  NRF24_setAutoAck(false);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff fd35 	bl	8001750 <NRF24_setAutoAck>
  NRF24_setChannel(120);
 8001ce6:	2078      	movs	r0, #120	; 0x78
 8001ce8:	f7ff fce7 	bl	80016ba <NRF24_setChannel>
  beginmpu();
 8001cec:	f000 fa32 	bl	8002154 <beginmpu>
  calibrate_gyro();
 8001cf0:	f000 fb78 	bl	80023e4 <calibrate_gyro>
  AHT10enableSensor();
 8001cf4:	f7ff f956 	bl	8000fa4 <AHT10enableSensor>
  HAL_TIM_Base_Start_IT(&htim2);
 8001cf8:	4820      	ldr	r0, [pc, #128]	; (8001d7c <main+0x100>)
 8001cfa:	f005 fbb3 	bl	8007464 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(PAKET,"#%d#%d#%d#%d",(int)gxx,(int)gzz,(int)(veri.sicaklik+sensorData.temp)/2,(int)sensorData.temp);
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <main+0x104>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f928 	bl	8000f58 <__aeabi_f2iz>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <main+0x108>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f922 	bl	8000f58 <__aeabi_f2iz>
 8001d14:	4605      	mov	r5, r0
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <main+0x10c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <main+0x110>)
 8001d1c:	6992      	ldr	r2, [r2, #24]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fec1 	bl	8000aa8 <__addsf3>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f915 	bl	8000f58 <__aeabi_f2iz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	0fda      	lsrs	r2, r3, #31
 8001d32:	4413      	add	r3, r2
 8001d34:	105b      	asrs	r3, r3, #1
 8001d36:	461e      	mov	r6, r3
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <main+0x110>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f90b 	bl	8000f58 <__aeabi_f2iz>
 8001d42:	4603      	mov	r3, r0
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	9600      	str	r6, [sp, #0]
 8001d48:	462b      	mov	r3, r5
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4910      	ldr	r1, [pc, #64]	; (8001d90 <main+0x114>)
 8001d4e:	4811      	ldr	r0, [pc, #68]	; (8001d94 <main+0x118>)
 8001d50:	f006 f84e 	bl	8007df0 <siprintf>
	  SEND = NRF24_write(PAKET, sizeof(PAKET));
 8001d54:	2114      	movs	r1, #20
 8001d56:	480f      	ldr	r0, [pc, #60]	; (8001d94 <main+0x118>)
 8001d58:	f7ff fbce 	bl	80014f8 <NRF24_write>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <main+0x11c>)
 8001d62:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(20);
 8001d64:	2014      	movs	r0, #20
 8001d66:	f000 fdf3 	bl	8002950 <HAL_Delay>
  {
 8001d6a:	e7c8      	b.n	8001cfe <main+0x82>
 8001d6c:	200001d0 	.word	0x200001d0
 8001d70:	40010800 	.word	0x40010800
 8001d74:	20000008 	.word	0x20000008
 8001d78:	20000010 	.word	0x20000010
 8001d7c:	20000228 	.word	0x20000228
 8001d80:	2000030c 	.word	0x2000030c
 8001d84:	20000310 	.word	0x20000310
 8001d88:	20000304 	.word	0x20000304
 8001d8c:	200002c4 	.word	0x200002c4
 8001d90:	08008bb0 	.word	0x08008bb0
 8001d94:	200002ec 	.word	0x200002ec
 8001d98:	20000300 	.word	0x20000300

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b090      	sub	sp, #64	; 0x40
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	2228      	movs	r2, #40	; 0x28
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f006 f818 	bl	8007de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f967 	bl	80060b8 <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001df0:	f000 f98e 	bl	8002110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e00:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001e06:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fbd3 	bl	80065bc <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001e1c:	f000 f978 	bl	8002110 <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3740      	adds	r7, #64	; 0x40
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <MX_I2C1_Init+0x54>)
 8001e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_I2C1_Init+0x58>)
 8001e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e66:	f001 f8c3 	bl	8002ff0 <HAL_I2C_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e70:	f000 f94e 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000128 	.word	0x20000128
 8001e7c:	40005400 	.word	0x40005400
 8001e80:	000186a0 	.word	0x000186a0

08001e84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <MX_I2C2_Init+0x54>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_I2C2_Init+0x58>)
 8001e92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_I2C2_Init+0x50>)
 8001ec2:	f001 f895 	bl	8002ff0 <HAL_I2C_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ecc:	f000 f920 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000017c 	.word	0x2000017c
 8001ed8:	40005800 	.word	0x40005800
 8001edc:	00061a80 	.word	0x00061a80

08001ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <MX_SPI1_Init+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f14:	2210      	movs	r2, #16
 8001f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f32:	f004 fcdb 	bl	80068ec <HAL_SPI_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f3c:	f000 f8e8 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200001d0 	.word	0x200001d0
 8001f48:	40013000 	.word	0x40013000

08001f4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0308 	add.w	r3, r7, #8
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f72:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001f76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f80:	2214      	movs	r2, #20
 8001f82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f90:	4813      	ldr	r0, [pc, #76]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001f92:	f005 fa17 	bl	80073c4 <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f9c:	f000 f8b8 	bl	8002110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4619      	mov	r1, r3
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001fae:	f005 fbb3 	bl	8007718 <HAL_TIM_ConfigClockSource>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fb8:	f000 f8aa 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_TIM2_Init+0x94>)
 8001fca:	f005 fd85 	bl	8007ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fd4:	f000 f89c 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000228 	.word	0x20000228

08001fe4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <MX_USART1_UART_Init+0x50>)
 8001fec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8001ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_USART1_UART_Init+0x4c>)
 800201c:	f005 fdcc 	bl	8007bb8 <HAL_UART_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002026:	f000 f873 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000270 	.word	0x20000270
 8002034:	40013800 	.word	0x40013800

08002038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <MX_GPIO_Init+0xcc>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <MX_GPIO_Init+0xcc>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <MX_GPIO_Init+0xcc>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <MX_GPIO_Init+0xcc>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <MX_GPIO_Init+0xcc>)
 800206a:	f043 0320 	orr.w	r3, r3, #32
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <MX_GPIO_Init+0xcc>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <MX_GPIO_Init+0xcc>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <MX_GPIO_Init+0xcc>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <MX_GPIO_Init+0xcc>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_GPIO_Init+0xcc>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <MX_GPIO_Init+0xcc>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_GPIO_Init+0xcc>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_GPIO_Init+0xd0>)
 80020b4:	f000 ff84 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2118      	movs	r1, #24
 80020bc:	4813      	ldr	r0, [pc, #76]	; (800210c <MX_GPIO_Init+0xd4>)
 80020be:	f000 ff7f 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	480b      	ldr	r0, [pc, #44]	; (8002108 <MX_GPIO_Init+0xd0>)
 80020dc:	f000 fdec 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80020e0:	2318      	movs	r3, #24
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4619      	mov	r1, r3
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_GPIO_Init+0xd4>)
 80020f8:	f000 fdde 	bl	8002cb8 <HAL_GPIO_Init>

}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	40011000 	.word	0x40011000
 800210c:	40010800 	.word	0x40010800

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	e7fe      	b.n	8002118 <Error_Handler+0x8>
	...

0800211c <testDevice>:
{
    float x, y, z;
} extern gyroCal;

uint8_t testDevice()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, AD0_LOW, WHO_AM_I, 1, &data, 1, 100);
 8002122:	2364      	movs	r3, #100	; 0x64
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	2275      	movs	r2, #117	; 0x75
 8002132:	21d0      	movs	r1, #208	; 0xd0
 8002134:	4806      	ldr	r0, [pc, #24]	; (8002150 <testDevice+0x34>)
 8002136:	f001 fcf7 	bl	8003b28 <HAL_I2C_Mem_Read>

	if(data == 104) // CHANGE AD0_LOW here if you connect ado pin to high
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b68      	cmp	r3, #104	; 0x68
 800213e:	d101      	bne.n	8002144 <testDevice+0x28>
		return 1;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <testDevice+0x2a>
	else
		return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000128 	.word	0x20000128

08002154 <beginmpu>:
uint8_t beginmpu()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af04      	add	r7, sp, #16
	uint8_t veri = testDevice();
 800215a:	f7ff ffdf 	bl	800211c <testDevice>
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
	if(veri != 1)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d001      	beq.n	800216c <beginmpu+0x18>
		return 0;
 8002168:	2300      	movs	r3, #0
 800216a:	e010      	b.n	800218e <beginmpu+0x3a>
	veri = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, AD0_LOW, PWR_MGMT_1, 1,&veri, 1, 100);
 8002170:	2364      	movs	r3, #100	; 0x64
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	2301      	movs	r3, #1
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	226b      	movs	r2, #107	; 0x6b
 8002180:	21d0      	movs	r1, #208	; 0xd0
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <beginmpu+0x44>)
 8002184:	f001 fbd6 	bl	8003934 <HAL_I2C_Mem_Write>
	setRange();
 8002188:	f000 f808 	bl	800219c <setRange>
	return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000128 	.word	0x20000128

0800219c <setRange>:
void setRange()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
 // we first set the accelerometer range , [4:3] bits in register varies the range. we will set register all 0 to use at 250.
	HAL_I2C_Mem_Write(&hi2c1, AD0_LOW, ACCEL_CONFIG, 1, &data , 1, 100);
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	2301      	movs	r3, #1
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	221c      	movs	r2, #28
 80021b6:	21d0      	movs	r1, #208	; 0xd0
 80021b8:	480a      	ldr	r0, [pc, #40]	; (80021e4 <setRange+0x48>)
 80021ba:	f001 fbbb 	bl	8003934 <HAL_I2C_Mem_Write>
	// now we set the  gyro range
	data = 0; // just to be sure
 80021be:	2300      	movs	r3, #0
 80021c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, AD0_LOW, GYRO_CONFIG, 1, &data , 1, 100);
 80021c2:	2364      	movs	r3, #100	; 0x64
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	2301      	movs	r3, #1
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2301      	movs	r3, #1
 80021d0:	221b      	movs	r2, #27
 80021d2:	21d0      	movs	r1, #208	; 0xd0
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <setRange+0x48>)
 80021d6:	f001 fbad 	bl	8003934 <HAL_I2C_Mem_Write>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000128 	.word	0x20000128

080021e8 <mpu_read>:
void mpu_read()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af04      	add	r7, sp, #16
	uint8_t BUFFER[14]; // WE START READ FROM  3B to 48 , every regiser has a byte data so we need 14 byte buffer
	HAL_I2C_Mem_Read(&hi2c1, AD0_LOW, ACCEL_XOUT_H, 1, BUFFER, 14, 100); // read the data
 80021ee:	2364      	movs	r3, #100	; 0x64
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	230e      	movs	r3, #14
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	463b      	mov	r3, r7
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	223b      	movs	r2, #59	; 0x3b
 80021fe:	21d0      	movs	r1, #208	; 0xd0
 8002200:	4823      	ldr	r0, [pc, #140]	; (8002290 <mpu_read+0xa8>)
 8002202:	f001 fc91 	bl	8003b28 <HAL_I2C_Mem_Read>
	rawData.ax = BUFFER[0] << 8 | BUFFER[1];
 8002206:	783b      	ldrb	r3, [r7, #0]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	b21a      	sxth	r2, r3
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <mpu_read+0xac>)
 8002216:	801a      	strh	r2, [r3, #0]
	rawData.ay = BUFFER[2] << 8 | BUFFER[3];
 8002218:	78bb      	ldrb	r3, [r7, #2]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	b21a      	sxth	r2, r3
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b21a      	sxth	r2, r3
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <mpu_read+0xac>)
 8002228:	805a      	strh	r2, [r3, #2]
	rawData.az = BUFFER[4] << 8 | BUFFER[5];
 800222a:	793b      	ldrb	r3, [r7, #4]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	797b      	ldrb	r3, [r7, #5]
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <mpu_read+0xac>)
 800223a:	809a      	strh	r2, [r3, #4]
	// read the temperature
	rawData.temp = BUFFER[6] << 8 | BUFFER[7];
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b21a      	sxth	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <mpu_read+0xac>)
 800224e:	819a      	strh	r2, [r3, #12]
	// NOW WE SHIFT AND SET THE GYROSCOPE DATA
	rawData.gx = BUFFER[8] << 8 | BUFFER[9];
 8002250:	7a3b      	ldrb	r3, [r7, #8]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	7a7b      	ldrb	r3, [r7, #9]
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21a      	sxth	r2, r3
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <mpu_read+0xac>)
 8002260:	80da      	strh	r2, [r3, #6]
	rawData.gy = BUFFER[10] << 8 | BUFFER[11];
 8002262:	7abb      	ldrb	r3, [r7, #10]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	b21a      	sxth	r2, r3
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21a      	sxth	r2, r3
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <mpu_read+0xac>)
 8002272:	811a      	strh	r2, [r3, #8]
	rawData.gz = BUFFER[12] << 8 | BUFFER[13];
 8002274:	7b3b      	ldrb	r3, [r7, #12]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	b21b      	sxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b21a      	sxth	r2, r3
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <mpu_read+0xac>)
 8002284:	815a      	strh	r2, [r3, #10]


}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000128 	.word	0x20000128
 8002294:	200002b4 	.word	0x200002b4

08002298 <mpu_measure>:
void mpu_measure()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	mpu_read();
 800229c:	f7ff ffa4 	bl	80021e8 <mpu_read>
	// CONVER THE DATA WE READ BEFORE TO TYPE OF g(9.81m/s^2)
	sensorData.ax = rawData.ax/ACCCONSTANT;
 80022a0:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <mpu_measure+0x130>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fcb2 	bl	8000c10 <__aeabi_i2f>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <mpu_measure+0x134>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7fe fdb3 	bl	8000e20 <__aeabi_fdiv>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <mpu_measure+0x138>)
 80022c0:	601a      	str	r2, [r3, #0]
	sensorData.ay = rawData.ay/ACCCONSTANT;
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <mpu_measure+0x130>)
 80022c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fca1 	bl	8000c10 <__aeabi_i2f>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <mpu_measure+0x134>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7fe fda2 	bl	8000e20 <__aeabi_fdiv>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <mpu_measure+0x138>)
 80022e2:	605a      	str	r2, [r3, #4]
	sensorData.az = rawData.az/ACCCONSTANT;
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <mpu_measure+0x130>)
 80022e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fc90 	bl	8000c10 <__aeabi_i2f>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b36      	ldr	r3, [pc, #216]	; (80023cc <mpu_measure+0x134>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7fe fd91 	bl	8000e20 <__aeabi_fdiv>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <mpu_measure+0x138>)
 8002304:	609a      	str	r2, [r3, #8]
	// CONVERT GYROSCOPE DATA TO degrees/second
	sensorData.gx = rawData.gx/GYROCONSTANT-gyroCal.x;
 8002306:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <mpu_measure+0x130>)
 8002308:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fc7f 	bl	8000c10 <__aeabi_i2f>
 8002312:	4602      	mov	r2, r0
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <mpu_measure+0x13c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7fe fd80 	bl	8000e20 <__aeabi_fdiv>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <mpu_measure+0x140>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f7fe fbba 	bl	8000aa4 <__aeabi_fsub>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <mpu_measure+0x138>)
 8002336:	60da      	str	r2, [r3, #12]
	sensorData.gy = rawData.gy/GYROCONSTANT-gyroCal.y;
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <mpu_measure+0x130>)
 800233a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fc66 	bl	8000c10 <__aeabi_i2f>
 8002344:	4602      	mov	r2, r0
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <mpu_measure+0x13c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f7fe fd67 	bl	8000e20 <__aeabi_fdiv>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <mpu_measure+0x140>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe fba1 	bl	8000aa4 <__aeabi_fsub>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <mpu_measure+0x138>)
 8002368:	611a      	str	r2, [r3, #16]
	sensorData.gz = rawData.gz/GYROCONSTANT-gyroCal.z;
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <mpu_measure+0x130>)
 800236c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fc4d 	bl	8000c10 <__aeabi_i2f>
 8002376:	4602      	mov	r2, r0
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <mpu_measure+0x13c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f7fe fd4e 	bl	8000e20 <__aeabi_fdiv>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <mpu_measure+0x140>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f7fe fb88 	bl	8000aa4 <__aeabi_fsub>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <mpu_measure+0x138>)
 800239a:	615a      	str	r2, [r3, #20]
	sensorData.temp = (float)((int16_t)rawData.temp / (float)340.0 + (float)36.53);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <mpu_measure+0x130>)
 800239e:	899b      	ldrh	r3, [r3, #12]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fc34 	bl	8000c10 <__aeabi_i2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	490c      	ldr	r1, [pc, #48]	; (80023dc <mpu_measure+0x144>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fd37 	bl	8000e20 <__aeabi_fdiv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	490a      	ldr	r1, [pc, #40]	; (80023e0 <mpu_measure+0x148>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fb76 	bl	8000aa8 <__addsf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <mpu_measure+0x138>)
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200002b4 	.word	0x200002b4
 80023cc:	20000018 	.word	0x20000018
 80023d0:	200002c4 	.word	0x200002c4
 80023d4:	2000001c 	.word	0x2000001c
 80023d8:	200002e0 	.word	0x200002e0
 80023dc:	43aa0000 	.word	0x43aa0000
 80023e0:	42121eb8 	.word	0x42121eb8

080023e4 <calibrate_gyro>:
void calibrate_gyro()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
	float x = 0;
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
	float y = 0;
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
	float z = 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	607b      	str	r3, [r7, #4]
	for(int i =0;i<500;i++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	e01f      	b.n	8002442 <calibrate_gyro+0x5e>
	{
		mpu_measure();
 8002402:	f7ff ff49 	bl	8002298 <mpu_measure>
		x += sensorData.gx;
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <calibrate_gyro+0xa0>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4619      	mov	r1, r3
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7fe fb4b 	bl	8000aa8 <__addsf3>
 8002412:	4603      	mov	r3, r0
 8002414:	60fb      	str	r3, [r7, #12]
		y += sensorData.gy;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <calibrate_gyro+0xa0>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	4619      	mov	r1, r3
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	f7fe fb43 	bl	8000aa8 <__addsf3>
 8002422:	4603      	mov	r3, r0
 8002424:	60bb      	str	r3, [r7, #8]
		z += sensorData.gz;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <calibrate_gyro+0xa0>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fe fb3b 	bl	8000aa8 <__addsf3>
 8002432:	4603      	mov	r3, r0
 8002434:	607b      	str	r3, [r7, #4]
		HAL_Delay(5);
 8002436:	2005      	movs	r0, #5
 8002438:	f000 fa8a 	bl	8002950 <HAL_Delay>
	for(int i =0;i<500;i++)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002448:	dbdb      	blt.n	8002402 <calibrate_gyro+0x1e>
	} // IT TAKES 2.5 SECONDS TO CALIBRATE
	gyroCal.x = x/500.0;
 800244a:	490f      	ldr	r1, [pc, #60]	; (8002488 <calibrate_gyro+0xa4>)
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7fe fce7 	bl	8000e20 <__aeabi_fdiv>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <calibrate_gyro+0xa8>)
 8002458:	601a      	str	r2, [r3, #0]
	gyroCal.y = y/500.0;
 800245a:	490b      	ldr	r1, [pc, #44]	; (8002488 <calibrate_gyro+0xa4>)
 800245c:	68b8      	ldr	r0, [r7, #8]
 800245e:	f7fe fcdf 	bl	8000e20 <__aeabi_fdiv>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <calibrate_gyro+0xa8>)
 8002468:	605a      	str	r2, [r3, #4]
	gyroCal.z = z/500.0;
 800246a:	4907      	ldr	r1, [pc, #28]	; (8002488 <calibrate_gyro+0xa4>)
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7fe fcd7 	bl	8000e20 <__aeabi_fdiv>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <calibrate_gyro+0xa8>)
 8002478:	609a      	str	r2, [r3, #8]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200002c4 	.word	0x200002c4
 8002488:	43fa0000 	.word	0x43fa0000
 800248c:	200002e0 	.word	0x200002e0

08002490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_MspInit+0x5c>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4a14      	ldr	r2, [pc, #80]	; (80024ec <HAL_MspInit+0x5c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6193      	str	r3, [r2, #24]
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_MspInit+0x5c>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x5c>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x5c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x5c>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_MspInit+0x60>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_MspInit+0x60>)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000

080024f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_I2C_MspInit+0xd8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d124      	bne.n	800255e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800252c:	23c0      	movs	r3, #192	; 0xc0
 800252e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002530:	2312      	movs	r3, #18
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 0318 	add.w	r3, r7, #24
 800253c:	4619      	mov	r1, r3
 800253e:	4825      	ldr	r0, [pc, #148]	; (80025d4 <HAL_I2C_MspInit+0xe0>)
 8002540:	f000 fbba 	bl	8002cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 800254a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800254e:	61d3      	str	r3, [r2, #28]
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800255c:	e031      	b.n	80025c2 <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_I2C_MspInit+0xe4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d12c      	bne.n	80025c2 <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 800256e:	f043 0308 	orr.w	r3, r3, #8
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002580:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 0318 	add.w	r3, r7, #24
 8002592:	4619      	mov	r1, r3
 8002594:	480f      	ldr	r0, [pc, #60]	; (80025d4 <HAL_I2C_MspInit+0xe0>)
 8002596:	f000 fb8f 	bl	8002cb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 80025a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a4:	61d3      	str	r3, [r2, #28]
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_I2C_MspInit+0xdc>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2021      	movs	r0, #33	; 0x21
 80025b8:	f000 fac5 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80025bc:	2021      	movs	r0, #33	; 0x21
 80025be:	f000 fade 	bl	8002b7e <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	40005800 	.word	0x40005800

080025dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_SPI_MspInit+0x88>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d12f      	bne.n	800265c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 8002602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800262c:	23a0      	movs	r3, #160	; 0xa0
 800262e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	4619      	mov	r1, r3
 800263e:	480b      	ldr	r0, [pc, #44]	; (800266c <HAL_SPI_MspInit+0x90>)
 8002640:	f000 fb3a 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002644:	2340      	movs	r3, #64	; 0x40
 8002646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4619      	mov	r1, r3
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <HAL_SPI_MspInit+0x90>)
 8002658:	f000 fb2e 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800265c:	bf00      	nop
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40013000 	.word	0x40013000
 8002668:	40021000 	.word	0x40021000
 800266c:	40010800 	.word	0x40010800

08002670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d113      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_TIM_Base_MspInit+0x44>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_TIM_Base_MspInit+0x44>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_TIM_Base_MspInit+0x44>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	201c      	movs	r0, #28
 80026a0:	f000 fa51 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026a4:	201c      	movs	r0, #28
 80026a6:	f000 fa6a 	bl	8002b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_UART_MspInit+0x8c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d131      	bne.n	800273c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4619      	mov	r1, r3
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <HAL_UART_MspInit+0x94>)
 800271e:	f000 facb 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <HAL_UART_MspInit+0x94>)
 8002738:	f000 fabe 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013800 	.word	0x40013800
 8002748:	40021000 	.word	0x40021000
 800274c:	40010800 	.word	0x40010800

08002750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <NMI_Handler+0x4>

08002756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <MemManage_Handler+0x4>

08002762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <UsageFault_Handler+0x4>

0800276e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002796:	f000 f8bf 	bl	8002918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <TIM2_IRQHandler+0x10>)
 80027a6:	f004 feaf 	bl	8007508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000228 	.word	0x20000228

080027b4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <I2C2_EV_IRQHandler+0x10>)
 80027ba:	f001 fc1d 	bl	8003ff8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000017c 	.word	0x2000017c

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 faba 	bl	8007d70 <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20005000 	.word	0x20005000
 8002828:	00000400 	.word	0x00000400
 800282c:	20000320 	.word	0x20000320
 8002830:	20000338 	.word	0x20000338

08002834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002866:	f7ff ffe5 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286a:	f005 fa87 	bl	8007d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800286e:	f7ff fa05 	bl	8001c7c <main>
  bx lr
 8002872:	4770      	bx	lr
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002878:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800287c:	08008ca8 	.word	0x08008ca8
  ldr r2, =_sbss
 8002880:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002884:	20000338 	.word	0x20000338

08002888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC1_2_IRQHandler>
	...

0800288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_Init+0x28>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_Init+0x28>)
 8002896:	f043 0310 	orr.w	r3, r3, #16
 800289a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289c:	2003      	movs	r0, #3
 800289e:	f000 f947 	bl	8002b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a2:	200f      	movs	r0, #15
 80028a4:	f000 f808 	bl	80028b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a8:	f7ff fdf2 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_InitTick+0x54>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_InitTick+0x58>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f95f 	bl	8002b9a <HAL_SYSTICK_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00e      	b.n	8002904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	d80a      	bhi.n	8002902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ec:	2200      	movs	r2, #0
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f000 f927 	bl	8002b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f8:	4a06      	ldr	r2, [pc, #24]	; (8002914 <HAL_InitTick+0x5c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000020 	.word	0x20000020
 8002910:	20000028 	.word	0x20000028
 8002914:	20000024 	.word	0x20000024

08002918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_IncTick+0x1c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_IncTick+0x20>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4413      	add	r3, r2
 8002928:	4a03      	ldr	r2, [pc, #12]	; (8002938 <HAL_IncTick+0x20>)
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000028 	.word	0x20000028
 8002938:	20000324 	.word	0x20000324

0800293c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return uwTick;
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <HAL_GetTick+0x10>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20000324 	.word	0x20000324

08002950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7ff fff0 	bl	800293c <HAL_GetTick>
 800295c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d005      	beq.n	8002976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_Delay+0x44>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002976:	bf00      	nop
 8002978:	f7ff ffe0 	bl	800293c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	429a      	cmp	r2, r3
 8002986:	d8f7      	bhi.n	8002978 <HAL_Delay+0x28>
  {
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000028 	.word	0x20000028

08002998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4906      	ldr	r1, [pc, #24]	; (8002a30 <__NVIC_EnableIRQ+0x34>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002afc:	d301      	bcc.n	8002b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00f      	b.n	8002b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <SysTick_Config+0x40>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0a:	210f      	movs	r1, #15
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f7ff ff90 	bl	8002a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <SysTick_Config+0x40>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <SysTick_Config+0x40>)
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	e000e010 	.word	0xe000e010

08002b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff2d 	bl	8002998 <__NVIC_SetPriorityGrouping>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b58:	f7ff ff42 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff ff90 	bl	8002a88 <NVIC_EncodePriority>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff5f 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff35 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ffa2 	bl	8002aec <SysTick_Config>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d005      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e051      	b.n	8002c7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 020e 	bic.w	r2, r2, #14
 8002be4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_DMA_Abort_IT+0xd0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d029      	beq.n	8002c54 <HAL_DMA_Abort_IT+0xa0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_DMA_Abort_IT+0xd4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d022      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x9c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_DMA_Abort_IT+0xd8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d01a      	beq.n	8002c4a <HAL_DMA_Abort_IT+0x96>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_DMA_Abort_IT+0xdc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d012      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x90>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_DMA_Abort_IT+0xe0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00a      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x8a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_DMA_Abort_IT+0xe4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d102      	bne.n	8002c38 <HAL_DMA_Abort_IT+0x84>
 8002c32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c36:	e00e      	b.n	8002c56 <HAL_DMA_Abort_IT+0xa2>
 8002c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3c:	e00b      	b.n	8002c56 <HAL_DMA_Abort_IT+0xa2>
 8002c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c42:	e008      	b.n	8002c56 <HAL_DMA_Abort_IT+0xa2>
 8002c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c48:	e005      	b.n	8002c56 <HAL_DMA_Abort_IT+0xa2>
 8002c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4e:	e002      	b.n	8002c56 <HAL_DMA_Abort_IT+0xa2>
 8002c50:	2310      	movs	r3, #16
 8002c52:	e000      	b.n	8002c56 <HAL_DMA_Abort_IT+0xa2>
 8002c54:	2301      	movs	r3, #1
 8002c56:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_DMA_Abort_IT+0xe8>)
 8002c58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    } 
  }
  return status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40020008 	.word	0x40020008
 8002c88:	4002001c 	.word	0x4002001c
 8002c8c:	40020030 	.word	0x40020030
 8002c90:	40020044 	.word	0x40020044
 8002c94:	40020058 	.word	0x40020058
 8002c98:	4002006c 	.word	0x4002006c
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b08b      	sub	sp, #44	; 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e169      	b.n	8002fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f040 8158 	bne.w	8002f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a9a      	ldr	r2, [pc, #616]	; (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d05e      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002cf4:	4a98      	ldr	r2, [pc, #608]	; (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d875      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002cfa:	4a98      	ldr	r2, [pc, #608]	; (8002f5c <HAL_GPIO_Init+0x2a4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d058      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d00:	4a96      	ldr	r2, [pc, #600]	; (8002f5c <HAL_GPIO_Init+0x2a4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d86f      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d06:	4a96      	ldr	r2, [pc, #600]	; (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d052      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d0c:	4a94      	ldr	r2, [pc, #592]	; (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d869      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d12:	4a94      	ldr	r2, [pc, #592]	; (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04c      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d18:	4a92      	ldr	r2, [pc, #584]	; (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d863      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d1e:	4a92      	ldr	r2, [pc, #584]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d046      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d24:	4a90      	ldr	r2, [pc, #576]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d85d      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d82a      	bhi.n	8002d84 <HAL_GPIO_Init+0xcc>
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d859      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_GPIO_Init+0x80>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002db3 	.word	0x08002db3
 8002d3c:	08002d8d 	.word	0x08002d8d
 8002d40:	08002d9f 	.word	0x08002d9f
 8002d44:	08002de1 	.word	0x08002de1
 8002d48:	08002de7 	.word	0x08002de7
 8002d4c:	08002de7 	.word	0x08002de7
 8002d50:	08002de7 	.word	0x08002de7
 8002d54:	08002de7 	.word	0x08002de7
 8002d58:	08002de7 	.word	0x08002de7
 8002d5c:	08002de7 	.word	0x08002de7
 8002d60:	08002de7 	.word	0x08002de7
 8002d64:	08002de7 	.word	0x08002de7
 8002d68:	08002de7 	.word	0x08002de7
 8002d6c:	08002de7 	.word	0x08002de7
 8002d70:	08002de7 	.word	0x08002de7
 8002d74:	08002de7 	.word	0x08002de7
 8002d78:	08002de7 	.word	0x08002de7
 8002d7c:	08002d95 	.word	0x08002d95
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	4a79      	ldr	r2, [pc, #484]	; (8002f6c <HAL_GPIO_Init+0x2b4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d8a:	e02c      	b.n	8002de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e029      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e024      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	3308      	adds	r3, #8
 8002da4:	623b      	str	r3, [r7, #32]
          break;
 8002da6:	e01f      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	330c      	adds	r3, #12
 8002dae:	623b      	str	r3, [r7, #32]
          break;
 8002db0:	e01a      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e013      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	611a      	str	r2, [r3, #16]
          break;
 8002dd2:	e009      	b.n	8002de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	615a      	str	r2, [r3, #20]
          break;
 8002dde:	e003      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          break;
 8002de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d801      	bhi.n	8002df2 <HAL_GPIO_Init+0x13a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_Init+0x13e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d802      	bhi.n	8002e04 <HAL_GPIO_Init+0x14c>
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	e002      	b.n	8002e0a <HAL_GPIO_Init+0x152>
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	3b08      	subs	r3, #8
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	210f      	movs	r1, #15
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80b1 	beq.w	8002f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e38:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6193      	str	r3, [r2, #24]
 8002e44:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_GPIO_Init+0x2bc>)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <HAL_GPIO_Init+0x2c0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_GPIO_Init+0x1ec>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	; (8002f7c <HAL_GPIO_Init+0x2c4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00d      	beq.n	8002ea0 <HAL_GPIO_Init+0x1e8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3e      	ldr	r2, [pc, #248]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <HAL_GPIO_Init+0x1e4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3d      	ldr	r2, [pc, #244]	; (8002f84 <HAL_GPIO_Init+0x2cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_GPIO_Init+0x1e0>
 8002e94:	2303      	movs	r3, #3
 8002e96:	e006      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e004      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	f002 0203 	and.w	r2, r2, #3
 8002eac:	0092      	lsls	r2, r2, #2
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eb6:	492f      	ldr	r1, [pc, #188]	; (8002f74 <HAL_GPIO_Init+0x2bc>)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	492c      	ldr	r1, [pc, #176]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4928      	ldr	r1, [pc, #160]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4922      	ldr	r1, [pc, #136]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	491e      	ldr	r1, [pc, #120]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4918      	ldr	r1, [pc, #96]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	4914      	ldr	r1, [pc, #80]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
 8002f54:	e021      	b.n	8002f9a <HAL_GPIO_Init+0x2e2>
 8002f56:	bf00      	nop
 8002f58:	10320000 	.word	0x10320000
 8002f5c:	10310000 	.word	0x10310000
 8002f60:	10220000 	.word	0x10220000
 8002f64:	10210000 	.word	0x10210000
 8002f68:	10120000 	.word	0x10120000
 8002f6c:	10110000 	.word	0x10110000
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010800 	.word	0x40010800
 8002f7c:	40010c00 	.word	0x40010c00
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	4909      	ldr	r1, [pc, #36]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f47f ae8e 	bne.w	8002ccc <HAL_GPIO_Init+0x14>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	372c      	adds	r7, #44	; 0x2c
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e12b      	b.n	800325a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fa6c 	bl	80024f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003054:	f003 fc04 	bl	8006860 <HAL_RCC_GetPCLK1Freq>
 8003058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a81      	ldr	r2, [pc, #516]	; (8003264 <HAL_I2C_Init+0x274>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d807      	bhi.n	8003074 <HAL_I2C_Init+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_I2C_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e006      	b.n	8003082 <HAL_I2C_Init+0x92>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a7d      	ldr	r2, [pc, #500]	; (800326c <HAL_I2C_Init+0x27c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0e7      	b.n	800325a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a78      	ldr	r2, [pc, #480]	; (8003270 <HAL_I2C_Init+0x280>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0c9b      	lsrs	r3, r3, #18
 8003094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_I2C_Init+0x274>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d802      	bhi.n	80030c4 <HAL_I2C_Init+0xd4>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3301      	adds	r3, #1
 80030c2:	e009      	b.n	80030d8 <HAL_I2C_Init+0xe8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a69      	ldr	r2, [pc, #420]	; (8003274 <HAL_I2C_Init+0x284>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	3301      	adds	r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	495c      	ldr	r1, [pc, #368]	; (8003264 <HAL_I2C_Init+0x274>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d819      	bhi.n	800312c <HAL_I2C_Init+0x13c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e59      	subs	r1, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fbb1 f3f3 	udiv	r3, r1, r3
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800310c:	400b      	ands	r3, r1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_I2C_Init+0x138>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e59      	subs	r1, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003126:	e051      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003128:	2304      	movs	r3, #4
 800312a:	e04f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_I2C_Init+0x168>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e012      	b.n	800317e <HAL_I2C_Init+0x18e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Init+0x196>
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <HAL_I2C_Init+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e58      	subs	r0, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6911      	ldr	r1, [r2, #16]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	000186a0 	.word	0x000186a0
 8003268:	001e847f 	.word	0x001e847f
 800326c:	003d08ff 	.word	0x003d08ff
 8003270:	431bde83 	.word	0x431bde83
 8003274:	10624dd3 	.word	0x10624dd3

08003278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	461a      	mov	r2, r3
 8003284:	460b      	mov	r3, r1
 8003286:	817b      	strh	r3, [r7, #10]
 8003288:	4613      	mov	r3, r2
 800328a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fb56 	bl	800293c <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 80e0 	bne.w	8003460 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2319      	movs	r3, #25
 80032a6:	2201      	movs	r2, #1
 80032a8:	4970      	ldr	r1, [pc, #448]	; (800346c <HAL_I2C_Master_Transmit+0x1f4>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f002 fcdc 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e0d3      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2C_Master_Transmit+0x50>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0cc      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d007      	beq.n	80032ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2221      	movs	r2, #33	; 0x21
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2210      	movs	r2, #16
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a50      	ldr	r2, [pc, #320]	; (8003470 <HAL_I2C_Master_Transmit+0x1f8>)
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f002 f920 	bl	800557c <I2C_MasterRequestWrite>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e08d      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800335c:	e066      	b.n	800342c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f002 fd56 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_I2C_Master_Transmit+0x188>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6a39      	ldr	r1, [r7, #32]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f002 fd46 	bl	8005e96 <I2C_WaitOnBTFFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e01a      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d194      	bne.n	800335e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	00100002 	.word	0x00100002
 8003470:	ffff0000 	.word	0xffff0000

08003474 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	461a      	mov	r2, r3
 8003480:	460b      	mov	r3, r1
 8003482:	817b      	strh	r3, [r7, #10]
 8003484:	4613      	mov	r3, r2
 8003486:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff fa56 	bl	800293c <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 823f 	bne.w	800391e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2319      	movs	r3, #25
 80034a6:	2201      	movs	r2, #1
 80034a8:	497f      	ldr	r1, [pc, #508]	; (80036a8 <HAL_I2C_Master_Receive+0x234>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f002 fbdc 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	e232      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2C_Master_Receive+0x54>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e22b      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d007      	beq.n	80034ee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2222      	movs	r2, #34	; 0x22
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2210      	movs	r2, #16
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	893a      	ldrh	r2, [r7, #8]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a5f      	ldr	r2, [pc, #380]	; (80036ac <HAL_I2C_Master_Receive+0x238>)
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f002 f8a2 	bl	8005680 <I2C_MasterRequestRead>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1ec      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d113      	bne.n	8003576 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e1c0      	b.n	80038f8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	2b01      	cmp	r3, #1
 800357c:	d11e      	bne.n	80035bc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800358e:	b672      	cpsid	i
}
 8003590:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035b8:	b662      	cpsie	i
}
 80035ba:	e035      	b.n	8003628 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d11e      	bne.n	8003602 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035d4:	b672      	cpsid	i
}
 80035d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035fe:	b662      	cpsie	i
}
 8003600:	e012      	b.n	8003628 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003628:	e166      	b.n	80038f8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	2b03      	cmp	r3, #3
 8003630:	f200 811f 	bhi.w	8003872 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	2b01      	cmp	r3, #1
 800363a:	d123      	bne.n	8003684 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f002 fc9b 	bl	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e167      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003682:	e139      	b.n	80038f8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b02      	cmp	r3, #2
 800368a:	d152      	bne.n	8003732 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	2200      	movs	r2, #0
 8003694:	4906      	ldr	r1, [pc, #24]	; (80036b0 <HAL_I2C_Master_Receive+0x23c>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f002 fae6 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e13c      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
 80036a6:	bf00      	nop
 80036a8:	00100002 	.word	0x00100002
 80036ac:	ffff0000 	.word	0xffff0000
 80036b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036b4:	b672      	cpsid	i
}
 80036b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036fa:	b662      	cpsie	i
}
 80036fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003730:	e0e2      	b.n	80038f8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	2200      	movs	r2, #0
 800373a:	497b      	ldr	r1, [pc, #492]	; (8003928 <HAL_I2C_Master_Receive+0x4b4>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f002 fa93 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0e9      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800375c:	b672      	cpsid	i
}
 800375e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003792:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_I2C_Master_Receive+0x4b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_I2C_Master_Receive+0x4bc>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0a1a      	lsrs	r2, r3, #8
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00da      	lsls	r2, r3, #3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d118      	bne.n	80037ea <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037da:	b662      	cpsie	i
}
 80037dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e09a      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d1d9      	bne.n	80037ac <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800383a:	b662      	cpsie	i
}
 800383c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003870:	e042      	b.n	80038f8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f002 fb80 	bl	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e04c      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d118      	bne.n	80038f8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f ae94 	bne.w	800362a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00010004 	.word	0x00010004
 800392c:	20000020 	.word	0x20000020
 8003930:	14f8b589 	.word	0x14f8b589

08003934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	461a      	mov	r2, r3
 8003942:	4603      	mov	r3, r0
 8003944:	817b      	strh	r3, [r7, #10]
 8003946:	460b      	mov	r3, r1
 8003948:	813b      	strh	r3, [r7, #8]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394e:	f7fe fff5 	bl	800293c <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	f040 80d9 	bne.w	8003b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2319      	movs	r3, #25
 8003968:	2201      	movs	r2, #1
 800396a:	496d      	ldr	r1, [pc, #436]	; (8003b20 <HAL_I2C_Mem_Write+0x1ec>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f002 f97b 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	e0cc      	b.n	8003b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2C_Mem_Write+0x56>
 8003986:	2302      	movs	r3, #2
 8003988:	e0c5      	b.n	8003b16 <HAL_I2C_Mem_Write+0x1e2>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d007      	beq.n	80039b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	; 0x21
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a4d      	ldr	r2, [pc, #308]	; (8003b24 <HAL_I2C_Mem_Write+0x1f0>)
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f2:	88f8      	ldrh	r0, [r7, #6]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4603      	mov	r3, r0
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f001 ff0a 	bl	800581c <I2C_RequestMemoryWrite>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d052      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e081      	b.n	8003b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f002 f9fc 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d107      	bne.n	8003a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06b      	b.n	8003b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_I2C_Mem_Write+0x180>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d017      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1aa      	bne.n	8003a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f002 f9e8 	bl	8005e96 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d107      	bne.n	8003ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e016      	b.n	8003b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
  }
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	00100002 	.word	0x00100002
 8003b24:	ffff0000 	.word	0xffff0000

08003b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	813b      	strh	r3, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b46:	f7fe fef9 	bl	800293c <HAL_GetTick>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	f040 8244 	bne.w	8003fe2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2319      	movs	r3, #25
 8003b60:	2201      	movs	r2, #1
 8003b62:	4982      	ldr	r1, [pc, #520]	; (8003d6c <HAL_I2C_Mem_Read+0x244>)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f002 f87f 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
 8003b72:	e237      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2C_Mem_Read+0x5a>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e230      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d007      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2222      	movs	r2, #34	; 0x22
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2240      	movs	r2, #64	; 0x40
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a62      	ldr	r2, [pc, #392]	; (8003d70 <HAL_I2C_Mem_Read+0x248>)
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bea:	88f8      	ldrh	r0, [r7, #6]
 8003bec:	893a      	ldrh	r2, [r7, #8]
 8003bee:	8979      	ldrh	r1, [r7, #10]
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 fea4 	bl	8005948 <I2C_RequestMemoryRead>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e1ec      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d113      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e1c0      	b.n	8003fbc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d11e      	bne.n	8003c80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c52:	b672      	cpsid	i
}
 8003c54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c7c:	b662      	cpsie	i
}
 8003c7e:	e035      	b.n	8003cec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d11e      	bne.n	8003cc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c98:	b672      	cpsid	i
}
 8003c9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc2:	b662      	cpsie	i
}
 8003cc4:	e012      	b.n	8003cec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003cec:	e166      	b.n	8003fbc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	f200 811f 	bhi.w	8003f36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d123      	bne.n	8003d48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f002 f939 	bl	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e167      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d46:	e139      	b.n	8003fbc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d152      	bne.n	8003df6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	2200      	movs	r2, #0
 8003d58:	4906      	ldr	r1, [pc, #24]	; (8003d74 <HAL_I2C_Mem_Read+0x24c>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f001 ff84 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e13c      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
 8003d6a:	bf00      	nop
 8003d6c:	00100002 	.word	0x00100002
 8003d70:	ffff0000 	.word	0xffff0000
 8003d74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d78:	b672      	cpsid	i
}
 8003d7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dbe:	b662      	cpsie	i
}
 8003dc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df4:	e0e2      	b.n	8003fbc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	497b      	ldr	r1, [pc, #492]	; (8003fec <HAL_I2C_Mem_Read+0x4c4>)
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f001 ff31 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0e9      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e20:	b672      	cpsid	i
}
 8003e22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e56:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_I2C_Mem_Read+0x4c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	4a65      	ldr	r2, [pc, #404]	; (8003ff4 <HAL_I2C_Mem_Read+0x4cc>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a1a      	lsrs	r2, r3, #8
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00da      	lsls	r2, r3, #3
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d118      	bne.n	8003eae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e9e:	b662      	cpsie	i
}
 8003ea0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e09a      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d1d9      	bne.n	8003e70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003efe:	b662      	cpsie	i
}
 8003f00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f34:	e042      	b.n	8003fbc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f002 f81e 	bl	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e04c      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d118      	bne.n	8003fbc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f ae94 	bne.w	8003cee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e000      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	00010004 	.word	0x00010004
 8003ff0:	20000020 	.word	0x20000020
 8003ff4:	14f8b589 	.word	0x14f8b589

08003ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004018:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b10      	cmp	r3, #16
 8004026:	d003      	beq.n	8004030 <HAL_I2C_EV_IRQHandler+0x38>
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	f040 80c1 	bne.w	80041b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <HAL_I2C_EV_IRQHandler+0x6e>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004050:	d003      	beq.n	800405a <HAL_I2C_EV_IRQHandler+0x62>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004058:	d101      	bne.n	800405e <HAL_I2C_EV_IRQHandler+0x66>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_I2C_EV_IRQHandler+0x68>
 800405e:	2300      	movs	r3, #0
 8004060:	2b01      	cmp	r3, #1
 8004062:	f000 8132 	beq.w	80042ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_I2C_EV_IRQHandler+0x92>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	0a5b      	lsrs	r3, r3, #9
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f002 f801 	bl	8006084 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fcc8 	bl	8004a18 <I2C_Master_SB>
 8004088:	e092      	b.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	08db      	lsrs	r3, r3, #3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0xb2>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	0a5b      	lsrs	r3, r3, #9
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fd3d 	bl	8004b22 <I2C_Master_ADD10>
 80040a8:	e082      	b.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_I2C_EV_IRQHandler+0xd2>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	0a5b      	lsrs	r3, r3, #9
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fd56 	bl	8004b74 <I2C_Master_ADDR>
 80040c8:	e072      	b.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03b      	beq.n	800414e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e4:	f000 80f3 	beq.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	09db      	lsrs	r3, r3, #7
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <HAL_I2C_EV_IRQHandler+0x11c>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_I2C_EV_IRQHandler+0x11c>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d103      	bne.n	8004114 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f942 	bl	8004396 <I2C_MasterTransmit_TXE>
 8004112:	e04d      	b.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80d6 	beq.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	0a5b      	lsrs	r3, r3, #9
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80cf 	beq.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004130:	7bbb      	ldrb	r3, [r7, #14]
 8004132:	2b21      	cmp	r3, #33	; 0x21
 8004134:	d103      	bne.n	800413e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f9c9 	bl	80044ce <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800413c:	e0c7      	b.n	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	f040 80c4 	bne.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa37 	bl	80045ba <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800414c:	e0bf      	b.n	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	f000 80b7 	beq.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <HAL_I2C_EV_IRQHandler+0x194>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	0a9b      	lsrs	r3, r3, #10
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_I2C_EV_IRQHandler+0x194>
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 faac 	bl	80046e2 <I2C_MasterReceive_RXNE>
 800418a:	e011      	b.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 809a 	beq.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8093 	beq.w	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fb4b 	bl	8004844 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ae:	e08e      	b.n	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80041b0:	e08d      	b.n	80042ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e007      	b.n	80041d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d012      	beq.n	8004206 <HAL_I2C_EV_IRQHandler+0x20e>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	0a5b      	lsrs	r3, r3, #9
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00c      	beq.n	8004206 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 ff0f 	bl	8005022 <I2C_Slave_ADDR>
 8004204:	e066      	b.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_I2C_EV_IRQHandler+0x22e>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	0a5b      	lsrs	r3, r3, #9
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 ff4a 	bl	80050b8 <I2C_Slave_STOPF>
 8004224:	e056      	b.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004226:	7bbb      	ldrb	r3, [r7, #14]
 8004228:	2b21      	cmp	r3, #33	; 0x21
 800422a:	d002      	beq.n	8004232 <HAL_I2C_EV_IRQHandler+0x23a>
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	2b29      	cmp	r3, #41	; 0x29
 8004230:	d125      	bne.n	800427e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	09db      	lsrs	r3, r3, #7
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00f      	beq.n	800425e <HAL_I2C_EV_IRQHandler+0x266>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	0a9b      	lsrs	r3, r3, #10
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_I2C_EV_IRQHandler+0x266>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fe27 	bl	8004eaa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425c:	e039      	b.n	80042d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d033      	beq.n	80042d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	0a5b      	lsrs	r3, r3, #9
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02d      	beq.n	80042d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fe54 	bl	8004f24 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800427c:	e029      	b.n	80042d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00f      	beq.n	80042aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	0a9b      	lsrs	r3, r3, #10
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fe5e 	bl	8004f64 <I2C_SlaveReceive_RXNE>
 80042a8:	e014      	b.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00e      	beq.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	0a5b      	lsrs	r3, r3, #9
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fe8c 	bl	8004fe0 <I2C_SlaveReceive_BTF>
 80042c8:	e004      	b.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	70fb      	strb	r3, [r7, #3]
 800432e:	4613      	mov	r3, r2
 8004330:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ac:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d150      	bne.n	800445e <I2C_MasterTransmit_TXE+0xc8>
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b21      	cmp	r3, #33	; 0x21
 80043c0:	d14d      	bne.n	800445e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d01d      	beq.n	8004404 <I2C_MasterTransmit_TXE+0x6e>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d01a      	beq.n	8004404 <I2C_MasterTransmit_TXE+0x6e>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043d4:	d016      	beq.n	8004404 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043e4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2211      	movs	r2, #17
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff6c 	bl	80042da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004402:	e060      	b.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004412:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d107      	bne.n	800444e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ff81 	bl	800434e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800444c:	e03b      	b.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ff3f 	bl	80042da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800445c:	e033      	b.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b21      	cmp	r3, #33	; 0x21
 8004462:	d005      	beq.n	8004470 <I2C_MasterTransmit_TXE+0xda>
 8004464:	7bbb      	ldrb	r3, [r7, #14]
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d12d      	bne.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b22      	cmp	r3, #34	; 0x22
 800446e:	d12a      	bne.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800448a:	e01c      	b.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d103      	bne.n	80044a0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f88e 	bl	80045ba <I2C_MemoryTransmit_TXE_BTF>
}
 800449e:	e012      	b.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044c4:	e7ff      	b.n	80044c6 <I2C_MasterTransmit_TXE+0x130>
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b21      	cmp	r3, #33	; 0x21
 80044e6:	d164      	bne.n	80045b2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004516:	e04c      	b.n	80045b2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d01d      	beq.n	800455a <I2C_MasterTransmit_BTF+0x8c>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b20      	cmp	r3, #32
 8004522:	d01a      	beq.n	800455a <I2C_MasterTransmit_BTF+0x8c>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800452a:	d016      	beq.n	800455a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2211      	movs	r2, #17
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fec1 	bl	80042da <HAL_I2C_MasterTxCpltCallback>
}
 8004558:	e02b      	b.n	80045b2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004568:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004578:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d107      	bne.n	80045a4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fed6 	bl	800434e <HAL_I2C_MemTxCpltCallback>
}
 80045a2:	e006      	b.n	80045b2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fe94 	bl	80042da <HAL_I2C_MasterTxCpltCallback>
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11d      	bne.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10b      	bne.n	80045f2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045f0:	e073      	b.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	121b      	asrs	r3, r3, #8
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800460c:	e065      	b.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10b      	bne.n	800462e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	b2da      	uxtb	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800462c:	e055      	b.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	2b02      	cmp	r3, #2
 8004634:	d151      	bne.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b22      	cmp	r3, #34	; 0x22
 800463a:	d10d      	bne.n	8004658 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004656:	e040      	b.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d015      	beq.n	800468e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b21      	cmp	r3, #33	; 0x21
 8004666:	d112      	bne.n	800468e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800468c:	e025      	b.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d120      	bne.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b21      	cmp	r3, #33	; 0x21
 800469c:	d11d      	bne.n	80046da <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046bc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fe3a 	bl	800434e <HAL_I2C_MemTxCpltCallback>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b22      	cmp	r3, #34	; 0x22
 80046f4:	f040 80a2 	bne.w	800483c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d921      	bls.n	800474a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b03      	cmp	r3, #3
 8004734:	f040 8082 	bne.w	800483c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004748:	e078      	b.n	800483c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	2b02      	cmp	r3, #2
 8004750:	d074      	beq.n	800483c <I2C_MasterReceive_RXNE+0x15a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <I2C_MasterReceive_RXNE+0x7c>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d16e      	bne.n	800483c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 fbda 	bl	8005f18 <I2C_WaitOnSTOPRequestThroughIT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d142      	bne.n	80047f0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004788:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d10a      	bne.n	80047da <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fdc4 	bl	8004360 <HAL_I2C_MemRxCpltCallback>
}
 80047d8:	e030      	b.n	800483c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2212      	movs	r2, #18
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff fd7f 	bl	80042ec <HAL_I2C_MasterRxCpltCallback>
}
 80047ee:	e025      	b.n	800483c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fd9b 	bl	8004372 <HAL_I2C_ErrorCallback>
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b04      	cmp	r3, #4
 800485a:	d11b      	bne.n	8004894 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004892:	e0bd      	b.n	8004a10 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b03      	cmp	r3, #3
 800489c:	d129      	bne.n	80048f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d00a      	beq.n	80048ca <I2C_MasterReceive_BTF+0x86>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d007      	beq.n	80048ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048f0:	e08e      	b.n	8004a10 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d176      	bne.n	80049ea <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d002      	beq.n	8004908 <I2C_MasterReceive_BTF+0xc4>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b10      	cmp	r3, #16
 8004906:	d108      	bne.n	800491a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e019      	b.n	800494e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d002      	beq.n	8004926 <I2C_MasterReceive_BTF+0xe2>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d108      	bne.n	8004938 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e00a      	b.n	800494e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d007      	beq.n	800494e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d10a      	bne.n	80049d4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fcc7 	bl	8004360 <HAL_I2C_MemRxCpltCallback>
}
 80049d2:	e01d      	b.n	8004a10 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2212      	movs	r2, #18
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fc82 	bl	80042ec <HAL_I2C_MasterRxCpltCallback>
}
 80049e8:	e012      	b.n	8004a10 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d117      	bne.n	8004a5c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a44:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a46:	e067      	b.n	8004b18 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	611a      	str	r2, [r3, #16]
}
 8004a5a:	e05d      	b.n	8004b18 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a64:	d133      	bne.n	8004ace <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b21      	cmp	r3, #33	; 0x21
 8004a70:	d109      	bne.n	8004a86 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a82:	611a      	str	r2, [r3, #16]
 8004a84:	e008      	b.n	8004a98 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <I2C_Master_SB+0x92>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d032      	beq.n	8004b18 <I2C_Master_SB+0x100>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02d      	beq.n	8004b18 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aca:	605a      	str	r2, [r3, #4]
}
 8004acc:	e024      	b.n	8004b18 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10e      	bne.n	8004af4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	11db      	asrs	r3, r3, #7
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f003 0306 	and.w	r3, r3, #6
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f063 030f 	orn	r3, r3, #15
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]
}
 8004af2:	e011      	b.n	8004b18 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10d      	bne.n	8004b18 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	11db      	asrs	r3, r3, #7
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0306 	and.w	r3, r3, #6
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f063 030e 	orn	r3, r3, #14
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <I2C_Master_ADD10+0x26>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d108      	bne.n	8004b5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00c      	beq.n	8004b6a <I2C_Master_ADD10+0x48>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b68:	605a      	str	r2, [r3, #4]
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b091      	sub	sp, #68	; 0x44
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b22      	cmp	r3, #34	; 0x22
 8004b9c:	f040 8174 	bne.w	8004e88 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10f      	bne.n	8004bc8 <I2C_Master_ADDR+0x54>
 8004ba8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d10b      	bne.n	8004bc8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	e16b      	b.n	8004ea0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11d      	bne.n	8004c0c <I2C_Master_ADDR+0x98>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bd8:	d118      	bne.n	8004c0c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	651a      	str	r2, [r3, #80]	; 0x50
 8004c0a:	e149      	b.n	8004ea0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d113      	bne.n	8004c3e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e120      	b.n	8004e80 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 808a 	bne.w	8004d5e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c50:	d137      	bne.n	8004cc2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c60:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d113      	bne.n	8004c9a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c80:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	e0f2      	b.n	8004e80 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	623b      	str	r3, [r7, #32]
 8004cae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e0de      	b.n	8004e80 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d02e      	beq.n	8004d26 <I2C_Master_ADDR+0x1b2>
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d02b      	beq.n	8004d26 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd0:	2b12      	cmp	r3, #18
 8004cd2:	d102      	bne.n	8004cda <I2C_Master_ADDR+0x166>
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d125      	bne.n	8004d26 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d00e      	beq.n	8004cfe <I2C_Master_ADDR+0x18a>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d00b      	beq.n	8004cfe <I2C_Master_ADDR+0x18a>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d008      	beq.n	8004cfe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e007      	b.n	8004d0e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	e0ac      	b.n	8004e80 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e090      	b.n	8004e80 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d158      	bne.n	8004e1a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d021      	beq.n	8004db2 <I2C_Master_ADDR+0x23e>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d01e      	beq.n	8004db2 <I2C_Master_ADDR+0x23e>
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d01b      	beq.n	8004db2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e012      	b.n	8004dd8 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dc0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d14b      	bne.n	8004e80 <I2C_Master_ADDR+0x30c>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dee:	d00b      	beq.n	8004e08 <I2C_Master_ADDR+0x294>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d008      	beq.n	8004e08 <I2C_Master_ADDR+0x294>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d005      	beq.n	8004e08 <I2C_Master_ADDR+0x294>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d002      	beq.n	8004e08 <I2C_Master_ADDR+0x294>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d13b      	bne.n	8004e80 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e16:	605a      	str	r2, [r3, #4]
 8004e18:	e032      	b.n	8004e80 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e28:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e38:	d117      	bne.n	8004e6a <I2C_Master_ADDR+0x2f6>
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e40:	d00b      	beq.n	8004e5a <I2C_Master_ADDR+0x2e6>
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d008      	beq.n	8004e5a <I2C_Master_ADDR+0x2e6>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d005      	beq.n	8004e5a <I2C_Master_ADDR+0x2e6>
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d002      	beq.n	8004e5a <I2C_Master_ADDR+0x2e6>
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d107      	bne.n	8004e6a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e86:	e00b      	b.n	8004ea0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
}
 8004e9e:	e7ff      	b.n	8004ea0 <I2C_Master_ADDR+0x32c>
 8004ea0:	bf00      	nop
 8004ea2:	3744      	adds	r7, #68	; 0x44
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02b      	beq.n	8004f1c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d114      	bne.n	8004f1c <I2C_SlaveTransmit_TXE+0x72>
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b29      	cmp	r3, #41	; 0x29
 8004ef6:	d111      	bne.n	8004f1c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2221      	movs	r2, #33	; 0x21
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2228      	movs	r2, #40	; 0x28
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff f9f1 	bl	80042fe <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02c      	beq.n	8004fd8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d114      	bne.n	8004fd8 <I2C_SlaveReceive_RXNE+0x74>
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb2:	d111      	bne.n	8004fd8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2222      	movs	r2, #34	; 0x22
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2228      	movs	r2, #40	; 0x28
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff f99c 	bl	8004310 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800502c:	2300      	movs	r3, #0
 800502e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800503c:	2b28      	cmp	r3, #40	; 0x28
 800503e:	d127      	bne.n	8005090 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	81bb      	strh	r3, [r7, #12]
 8005072:	e002      	b.n	800507a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005082:	89ba      	ldrh	r2, [r7, #12]
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff f94a 	bl	8004322 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800508e:	e00e      	b.n	80050ae <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050d8:	2300      	movs	r3, #0
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005114:	d172      	bne.n	80051fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	2b22      	cmp	r3, #34	; 0x22
 800511a:	d002      	beq.n	8005122 <I2C_Slave_STOPF+0x6a>
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b2a      	cmp	r3, #42	; 0x2a
 8005120:	d135      	bne.n	800518e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0204 	orr.w	r2, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005154:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd fda0 	bl	8002ca0 <HAL_DMA_GetState>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d049      	beq.n	80051fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4a69      	ldr	r2, [pc, #420]	; (8005310 <I2C_Slave_STOPF+0x258>)
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4618      	mov	r0, r3
 8005174:	f7fd fd1e 	bl	8002bb4 <HAL_DMA_Abort_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d03d      	beq.n	80051fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005188:	4610      	mov	r0, r2
 800518a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800518c:	e035      	b.n	80051fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f043 0204 	orr.w	r2, r3, #4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fd fd6a 	bl	8002ca0 <HAL_DMA_GetState>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d014      	beq.n	80051fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	4a4e      	ldr	r2, [pc, #312]	; (8005310 <I2C_Slave_STOPF+0x258>)
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd fce8 	bl	8002bb4 <HAL_DMA_Abort_IT>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
 80051f8:	e000      	b.n	80051fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d03e      	beq.n	8005284 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b04      	cmp	r3, #4
 8005212:	d112      	bne.n	800523a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d112      	bne.n	800526e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f043 0204 	orr.w	r2, r3, #4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f843 	bl	8005318 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005292:	e039      	b.n	8005308 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b2a      	cmp	r3, #42	; 0x2a
 8005298:	d109      	bne.n	80052ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2228      	movs	r2, #40	; 0x28
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff f831 	bl	8004310 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b28      	cmp	r3, #40	; 0x28
 80052b8:	d111      	bne.n	80052de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <I2C_Slave_STOPF+0x25c>)
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff f830 	bl	800433c <HAL_I2C_ListenCpltCallback>
}
 80052dc:	e014      	b.n	8005308 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	2b22      	cmp	r3, #34	; 0x22
 80052e4:	d002      	beq.n	80052ec <I2C_Slave_STOPF+0x234>
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	d10d      	bne.n	8005308 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff f804 	bl	8004310 <HAL_I2C_SlaveRxCpltCallback>
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	08005b19 	.word	0x08005b19
 8005314:	ffff0000 	.word	0xffff0000

08005318 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	2b10      	cmp	r3, #16
 8005334:	d002      	beq.n	800533c <I2C_ITError+0x24>
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d10a      	bne.n	8005352 <I2C_ITError+0x3a>
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b22      	cmp	r3, #34	; 0x22
 8005340:	d107      	bne.n	8005352 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005350:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005358:	2b28      	cmp	r3, #40	; 0x28
 800535a:	d107      	bne.n	800536c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2228      	movs	r2, #40	; 0x28
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800536a:	e015      	b.n	8005398 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537a:	d00a      	beq.n	8005392 <I2C_ITError+0x7a>
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b60      	cmp	r3, #96	; 0x60
 8005380:	d007      	beq.n	8005392 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a6:	d161      	bne.n	800546c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d020      	beq.n	8005406 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	4a6a      	ldr	r2, [pc, #424]	; (8005574 <I2C_ITError+0x25c>)
 80053ca:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fd fbef 	bl	8002bb4 <HAL_DMA_Abort_IT>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8089 	beq.w	80054f0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
 8005404:	e074      	b.n	80054f0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	4a5a      	ldr	r2, [pc, #360]	; (8005574 <I2C_ITError+0x25c>)
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	4618      	mov	r0, r3
 8005414:	f7fd fbce 	bl	8002bb4 <HAL_DMA_Abort_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d068      	beq.n	80054f0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d10b      	bne.n	8005444 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005466:	4610      	mov	r0, r2
 8005468:	4798      	blx	r3
 800546a:	e041      	b.n	80054f0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b60      	cmp	r3, #96	; 0x60
 8005476:	d125      	bne.n	80054c4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d10b      	bne.n	80054ac <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fe ff61 	bl	8004384 <HAL_I2C_AbortCpltCallback>
 80054c2:	e015      	b.n	80054f0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d10b      	bne.n	80054ea <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe ff41 	bl	8004372 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10e      	bne.n	800551e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800552c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b04      	cmp	r3, #4
 8005540:	d113      	bne.n	800556a <I2C_ITError+0x252>
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b28      	cmp	r3, #40	; 0x28
 8005546:	d110      	bne.n	800556a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a0b      	ldr	r2, [pc, #44]	; (8005578 <I2C_ITError+0x260>)
 800554c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fe fee9 	bl	800433c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	08005b19 	.word	0x08005b19
 8005578:	ffff0000 	.word	0xffff0000

0800557c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	460b      	mov	r3, r1
 800558a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d006      	beq.n	80055a6 <I2C_MasterRequestWrite+0x2a>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d003      	beq.n	80055a6 <I2C_MasterRequestWrite+0x2a>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a4:	d108      	bne.n	80055b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e00b      	b.n	80055d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b12      	cmp	r3, #18
 80055be:	d107      	bne.n	80055d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fb43 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00d      	beq.n	8005604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f6:	d103      	bne.n	8005600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e035      	b.n	8005670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560c:	d108      	bne.n	8005620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e01b      	b.n	8005658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005620:	897b      	ldrh	r3, [r7, #10]
 8005622:	11db      	asrs	r3, r3, #7
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0306 	and.w	r3, r3, #6
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f063 030f 	orn	r3, r3, #15
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	490e      	ldr	r1, [pc, #56]	; (8005678 <I2C_MasterRequestWrite+0xfc>)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fb69 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e010      	b.n	8005670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4907      	ldr	r1, [pc, #28]	; (800567c <I2C_MasterRequestWrite+0x100>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fb59 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	00010008 	.word	0x00010008
 800567c:	00010002 	.word	0x00010002

08005680 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	460b      	mov	r3, r1
 800568e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d006      	beq.n	80056ba <I2C_MasterRequestRead+0x3a>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d003      	beq.n	80056ba <I2C_MasterRequestRead+0x3a>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b8:	d108      	bne.n	80056cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	e00b      	b.n	80056e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	2b11      	cmp	r3, #17
 80056d2:	d107      	bne.n	80056e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fab9 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570a:	d103      	bne.n	8005714 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e079      	b.n	800580c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005720:	d108      	bne.n	8005734 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]
 8005732:	e05f      	b.n	80057f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005734:	897b      	ldrh	r3, [r7, #10]
 8005736:	11db      	asrs	r3, r3, #7
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0306 	and.w	r3, r3, #6
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f063 030f 	orn	r3, r3, #15
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4930      	ldr	r1, [pc, #192]	; (8005814 <I2C_MasterRequestRead+0x194>)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fadf 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e054      	b.n	800580c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005762:	897b      	ldrh	r3, [r7, #10]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4929      	ldr	r1, [pc, #164]	; (8005818 <I2C_MasterRequestRead+0x198>)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 facf 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e044      	b.n	800580c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fa57 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d103      	bne.n	80057d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e017      	b.n	800580c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80057dc:	897b      	ldrh	r3, [r7, #10]
 80057de:	11db      	asrs	r3, r3, #7
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 0306 	and.w	r3, r3, #6
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f063 030e 	orn	r3, r3, #14
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4907      	ldr	r1, [pc, #28]	; (8005818 <I2C_MasterRequestRead+0x198>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa8b 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	00010008 	.word	0x00010008
 8005818:	00010002 	.word	0x00010002

0800581c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	4608      	mov	r0, r1
 8005826:	4611      	mov	r1, r2
 8005828:	461a      	mov	r2, r3
 800582a:	4603      	mov	r3, r0
 800582c:	817b      	strh	r3, [r7, #10]
 800582e:	460b      	mov	r3, r1
 8005830:	813b      	strh	r3, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	2200      	movs	r2, #0
 800584e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fa08 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586c:	d103      	bne.n	8005876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e05f      	b.n	800593a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800587a:	897b      	ldrh	r3, [r7, #10]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	6a3a      	ldr	r2, [r7, #32]
 800588e:	492d      	ldr	r1, [pc, #180]	; (8005944 <I2C_RequestMemoryWrite+0x128>)
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fa40 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e04c      	b.n	800593a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	6a39      	ldr	r1, [r7, #32]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 faaa 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d107      	bne.n	80058de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e02b      	b.n	800593a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d105      	bne.n	80058f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058e8:	893b      	ldrh	r3, [r7, #8]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	e021      	b.n	8005938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058f4:	893b      	ldrh	r3, [r7, #8]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005904:	6a39      	ldr	r1, [r7, #32]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fa84 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00d      	beq.n	800592e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b04      	cmp	r3, #4
 8005918:	d107      	bne.n	800592a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e005      	b.n	800593a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800592e:	893b      	ldrh	r3, [r7, #8]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	00010002 	.word	0x00010002

08005948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	461a      	mov	r2, r3
 8005956:	4603      	mov	r3, r0
 8005958:	817b      	strh	r3, [r7, #10]
 800595a:	460b      	mov	r3, r1
 800595c:	813b      	strh	r3, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2200      	movs	r2, #0
 800598a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f96a 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a8:	d103      	bne.n	80059b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0aa      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059b6:	897b      	ldrh	r3, [r7, #10]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	4952      	ldr	r1, [pc, #328]	; (8005b14 <I2C_RequestMemoryRead+0x1cc>)
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f9a2 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e097      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f4:	6a39      	ldr	r1, [r7, #32]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fa0c 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d107      	bne.n	8005a1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e076      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d105      	bne.n	8005a30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a24:	893b      	ldrh	r3, [r7, #8]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	611a      	str	r2, [r3, #16]
 8005a2e:	e021      	b.n	8005a74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a30:	893b      	ldrh	r3, [r7, #8]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a40:	6a39      	ldr	r1, [r7, #32]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f9e6 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d107      	bne.n	8005a66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e050      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a6a:	893b      	ldrh	r3, [r7, #8]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	6a39      	ldr	r1, [r7, #32]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f9cb 	bl	8005e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d107      	bne.n	8005a9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e035      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f8d3 	bl	8005c68 <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00d      	beq.n	8005ae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d103      	bne.n	8005ae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e013      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ae4:	897b      	ldrh	r3, [r7, #10]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	4906      	ldr	r1, [pc, #24]	; (8005b14 <I2C_RequestMemoryRead+0x1cc>)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f90b 	bl	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	00010002 	.word	0x00010002

08005b18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b32:	4b4b      	ldr	r3, [pc, #300]	; (8005c60 <I2C_DMAAbort+0x148>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	08db      	lsrs	r3, r3, #3
 8005b38:	4a4a      	ldr	r2, [pc, #296]	; (8005c64 <I2C_DMAAbort+0x14c>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0a1a      	lsrs	r2, r3, #8
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	00da      	lsls	r2, r3, #3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b5e:	e00a      	b.n	8005b76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b74:	d0ea      	beq.n	8005b4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	2200      	movs	r2, #0
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	2200      	movs	r2, #0
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	2200      	movs	r2, #0
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	2200      	movs	r2, #0
 8005bca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b60      	cmp	r3, #96	; 0x60
 8005be6:	d10e      	bne.n	8005c06 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bfe:	6978      	ldr	r0, [r7, #20]
 8005c00:	f7fe fbc0 	bl	8004384 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c04:	e027      	b.n	8005c56 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c0c:	2b28      	cmp	r3, #40	; 0x28
 8005c0e:	d117      	bne.n	8005c40 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2228      	movs	r2, #40	; 0x28
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c3e:	e007      	b.n	8005c50 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c50:	6978      	ldr	r0, [r7, #20]
 8005c52:	f7fe fb8e 	bl	8004372 <HAL_I2C_ErrorCallback>
}
 8005c56:	bf00      	nop
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000020 	.word	0x20000020
 8005c64:	14f8b589 	.word	0x14f8b589

08005c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c78:	e025      	b.n	8005cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d021      	beq.n	8005cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fc fe5b 	bl	800293c <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d116      	bne.n	8005cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e023      	b.n	8005d0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	0c1b      	lsrs	r3, r3, #16
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d10d      	bne.n	8005cec <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bf0c      	ite	eq
 8005ce2:	2301      	moveq	r3, #1
 8005ce4:	2300      	movne	r3, #0
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	e00c      	b.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	43da      	mvns	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d0b6      	beq.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d24:	e051      	b.n	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d34:	d123      	bne.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e046      	b.n	8005e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d021      	beq.n	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fc fdd9 	bl	800293c <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e020      	b.n	8005e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d10c      	bne.n	8005dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bf14      	ite	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	2300      	moveq	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	e00b      	b.n	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	43da      	mvns	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d18d      	bne.n	8005d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e20:	e02d      	b.n	8005e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f900 	bl	8006028 <I2C_IsAcknowledgeFailed>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e02d      	b.n	8005e8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d021      	beq.n	8005e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3a:	f7fc fd7f 	bl	800293c <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d302      	bcc.n	8005e50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d116      	bne.n	8005e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e007      	b.n	8005e8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e88:	2b80      	cmp	r3, #128	; 0x80
 8005e8a:	d1ca      	bne.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ea2:	e02d      	b.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8bf 	bl	8006028 <I2C_IsAcknowledgeFailed>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e02d      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d021      	beq.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7fc fd3e 	bl	800293c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e007      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d1ca      	bne.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	0a1a      	lsrs	r2, r3, #8
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d107      	bne.n	8005f56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e008      	b.n	8005f68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f64:	d0e9      	beq.n	8005f3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000020 	.word	0x20000020
 8005f78:	14f8b589 	.word	0x14f8b589

08005f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f88:	e042      	b.n	8006010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d119      	bne.n	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0210 	mvn.w	r2, #16
 8005fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e029      	b.n	8006020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fcc:	f7fc fcb6 	bl	800293c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d302      	bcc.n	8005fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d116      	bne.n	8006010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0220 	orr.w	r2, r3, #32
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e007      	b.n	8006020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d1b5      	bne.n	8005f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d11b      	bne.n	8006078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0204 	orr.w	r2, r3, #4
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006094:	d103      	bne.n	800609e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800609c:	e007      	b.n	80060ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80060a6:	d102      	bne.n	80060ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2208      	movs	r2, #8
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e272      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8087 	beq.w	80061e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d8:	4b92      	ldr	r3, [pc, #584]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d00c      	beq.n	80060fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060e4:	4b8f      	ldr	r3, [pc, #572]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d112      	bne.n	8006116 <HAL_RCC_OscConfig+0x5e>
 80060f0:	4b8c      	ldr	r3, [pc, #560]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fc:	d10b      	bne.n	8006116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fe:	4b89      	ldr	r3, [pc, #548]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d06c      	beq.n	80061e4 <HAL_RCC_OscConfig+0x12c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d168      	bne.n	80061e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e24c      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611e:	d106      	bne.n	800612e <HAL_RCC_OscConfig+0x76>
 8006120:	4b80      	ldr	r3, [pc, #512]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a7f      	ldr	r2, [pc, #508]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e02e      	b.n	800618c <HAL_RCC_OscConfig+0xd4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x98>
 8006136:	4b7b      	ldr	r3, [pc, #492]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a7a      	ldr	r2, [pc, #488]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800613c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b78      	ldr	r3, [pc, #480]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a77      	ldr	r2, [pc, #476]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e01d      	b.n	800618c <HAL_RCC_OscConfig+0xd4>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006158:	d10c      	bne.n	8006174 <HAL_RCC_OscConfig+0xbc>
 800615a:	4b72      	ldr	r3, [pc, #456]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a71      	ldr	r2, [pc, #452]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4b6f      	ldr	r3, [pc, #444]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6e      	ldr	r2, [pc, #440]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800616c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	e00b      	b.n	800618c <HAL_RCC_OscConfig+0xd4>
 8006174:	4b6b      	ldr	r3, [pc, #428]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6a      	ldr	r2, [pc, #424]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800617a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4b68      	ldr	r3, [pc, #416]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a67      	ldr	r2, [pc, #412]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800618a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fc fbd2 	bl	800293c <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800619c:	f7fc fbce 	bl	800293c <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	; 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e200      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	4b5d      	ldr	r3, [pc, #372]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0xe4>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fc fbbe 	bl	800293c <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fc fbba 	bl	800293c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	; 0x64
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e1ec      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d6:	4b53      	ldr	r3, [pc, #332]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x10c>
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d063      	beq.n	80062ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061f2:	4b4c      	ldr	r3, [pc, #304]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061fe:	4b49      	ldr	r3, [pc, #292]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b08      	cmp	r3, #8
 8006208:	d11c      	bne.n	8006244 <HAL_RCC_OscConfig+0x18c>
 800620a:	4b46      	ldr	r3, [pc, #280]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d116      	bne.n	8006244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006216:	4b43      	ldr	r3, [pc, #268]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_RCC_OscConfig+0x176>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e1c0      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4939      	ldr	r1, [pc, #228]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006242:	e03a      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800624c:	4b36      	ldr	r3, [pc, #216]	; (8006328 <HAL_RCC_OscConfig+0x270>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006252:	f7fc fb73 	bl	800293c <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625a:	f7fc fb6f 	bl	800293c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e1a1      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626c:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006278:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4927      	ldr	r1, [pc, #156]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	e015      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <HAL_RCC_OscConfig+0x270>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fc fb52 	bl	800293c <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629c:	f7fc fb4e 	bl	800293c <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e180      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d03a      	beq.n	800633c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d019      	beq.n	8006302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d4:	f7fc fb32 	bl	800293c <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062dc:	f7fc fb2e 	bl	800293c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e160      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f000 fad8 	bl	80068b0 <RCC_Delay>
 8006300:	e01c      	b.n	800633c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006308:	f7fc fb18 	bl	800293c <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800630e:	e00f      	b.n	8006330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006310:	f7fc fb14 	bl	800293c <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d908      	bls.n	8006330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e146      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
 8006322:	bf00      	nop
 8006324:	40021000 	.word	0x40021000
 8006328:	42420000 	.word	0x42420000
 800632c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	4b92      	ldr	r3, [pc, #584]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e9      	bne.n	8006310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80a6 	beq.w	8006496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634e:	4b8b      	ldr	r3, [pc, #556]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10d      	bne.n	8006376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	4b88      	ldr	r3, [pc, #544]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	4a87      	ldr	r2, [pc, #540]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006364:	61d3      	str	r3, [r2, #28]
 8006366:	4b85      	ldr	r3, [pc, #532]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006376:	4b82      	ldr	r3, [pc, #520]	; (8006580 <HAL_RCC_OscConfig+0x4c8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d118      	bne.n	80063b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006382:	4b7f      	ldr	r3, [pc, #508]	; (8006580 <HAL_RCC_OscConfig+0x4c8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7e      	ldr	r2, [pc, #504]	; (8006580 <HAL_RCC_OscConfig+0x4c8>)
 8006388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800638e:	f7fc fad5 	bl	800293c <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006396:	f7fc fad1 	bl	800293c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b64      	cmp	r3, #100	; 0x64
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e103      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a8:	4b75      	ldr	r3, [pc, #468]	; (8006580 <HAL_RCC_OscConfig+0x4c8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f0      	beq.n	8006396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d106      	bne.n	80063ca <HAL_RCC_OscConfig+0x312>
 80063bc:	4b6f      	ldr	r3, [pc, #444]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4a6e      	ldr	r2, [pc, #440]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	6213      	str	r3, [r2, #32]
 80063c8:	e02d      	b.n	8006426 <HAL_RCC_OscConfig+0x36e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_RCC_OscConfig+0x334>
 80063d2:	4b6a      	ldr	r3, [pc, #424]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	4a69      	ldr	r2, [pc, #420]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	6213      	str	r3, [r2, #32]
 80063de:	4b67      	ldr	r3, [pc, #412]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	4a66      	ldr	r2, [pc, #408]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063e4:	f023 0304 	bic.w	r3, r3, #4
 80063e8:	6213      	str	r3, [r2, #32]
 80063ea:	e01c      	b.n	8006426 <HAL_RCC_OscConfig+0x36e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b05      	cmp	r3, #5
 80063f2:	d10c      	bne.n	800640e <HAL_RCC_OscConfig+0x356>
 80063f4:	4b61      	ldr	r3, [pc, #388]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	4a60      	ldr	r2, [pc, #384]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80063fa:	f043 0304 	orr.w	r3, r3, #4
 80063fe:	6213      	str	r3, [r2, #32]
 8006400:	4b5e      	ldr	r3, [pc, #376]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6213      	str	r3, [r2, #32]
 800640c:	e00b      	b.n	8006426 <HAL_RCC_OscConfig+0x36e>
 800640e:	4b5b      	ldr	r3, [pc, #364]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	4a5a      	ldr	r2, [pc, #360]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	6213      	str	r3, [r2, #32]
 800641a:	4b58      	ldr	r3, [pc, #352]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4a57      	ldr	r2, [pc, #348]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d015      	beq.n	800645a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642e:	f7fc fa85 	bl	800293c <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006434:	e00a      	b.n	800644c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fc fa81 	bl	800293c <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0b1      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800644c:	4b4b      	ldr	r3, [pc, #300]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0ee      	beq.n	8006436 <HAL_RCC_OscConfig+0x37e>
 8006458:	e014      	b.n	8006484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645a:	f7fc fa6f 	bl	800293c <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006460:	e00a      	b.n	8006478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006462:	f7fc fa6b 	bl	800293c <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e09b      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006478:	4b40      	ldr	r3, [pc, #256]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1ee      	bne.n	8006462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d105      	bne.n	8006496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800648a:	4b3c      	ldr	r3, [pc, #240]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4a3b      	ldr	r2, [pc, #236]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8087 	beq.w	80065ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064a0:	4b36      	ldr	r3, [pc, #216]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 030c 	and.w	r3, r3, #12
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d061      	beq.n	8006570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d146      	bne.n	8006542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b4:	4b33      	ldr	r3, [pc, #204]	; (8006584 <HAL_RCC_OscConfig+0x4cc>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ba:	f7fc fa3f 	bl	800293c <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c2:	f7fc fa3b 	bl	800293c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e06d      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d108      	bne.n	80064fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064ea:	4b24      	ldr	r3, [pc, #144]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4921      	ldr	r1, [pc, #132]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064fc:	4b1f      	ldr	r3, [pc, #124]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a19      	ldr	r1, [r3, #32]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	430b      	orrs	r3, r1
 800650e:	491b      	ldr	r1, [pc, #108]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <HAL_RCC_OscConfig+0x4cc>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fc fa0f 	bl	800293c <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006522:	f7fc fa0b 	bl	800293c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e03d      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x46a>
 8006540:	e035      	b.n	80065ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006542:	4b10      	ldr	r3, [pc, #64]	; (8006584 <HAL_RCC_OscConfig+0x4cc>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fc f9f8 	bl	800293c <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006550:	f7fc f9f4 	bl	800293c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e026      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_RCC_OscConfig+0x4c4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x498>
 800656e:	e01e      	b.n	80065ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d107      	bne.n	8006588 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e019      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
 800657c:	40021000 	.word	0x40021000
 8006580:	40007000 	.word	0x40007000
 8006584:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCC_OscConfig+0x500>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	429a      	cmp	r2, r3
 800659a:	d106      	bne.n	80065aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d001      	beq.n	80065ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40021000 	.word	0x40021000

080065bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0d0      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065d0:	4b6a      	ldr	r3, [pc, #424]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d910      	bls.n	8006600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065de:	4b67      	ldr	r3, [pc, #412]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f023 0207 	bic.w	r2, r3, #7
 80065e6:	4965      	ldr	r1, [pc, #404]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ee:	4b63      	ldr	r3, [pc, #396]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d001      	beq.n	8006600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0b8      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d020      	beq.n	800664e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006618:	4b59      	ldr	r3, [pc, #356]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a58      	ldr	r2, [pc, #352]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800661e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006630:	4b53      	ldr	r3, [pc, #332]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4a52      	ldr	r2, [pc, #328]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800663a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800663c:	4b50      	ldr	r3, [pc, #320]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	494d      	ldr	r1, [pc, #308]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800664a:	4313      	orrs	r3, r2
 800664c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d040      	beq.n	80066dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d107      	bne.n	8006672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006662:	4b47      	ldr	r3, [pc, #284]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d115      	bne.n	800669a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e07f      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d107      	bne.n	800668a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667a:	4b41      	ldr	r3, [pc, #260]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e073      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668a:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e06b      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800669a:	4b39      	ldr	r3, [pc, #228]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f023 0203 	bic.w	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4936      	ldr	r1, [pc, #216]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066ac:	f7fc f946 	bl	800293c <HAL_GetTick>
 80066b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b2:	e00a      	b.n	80066ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b4:	f7fc f942 	bl	800293c <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e053      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 020c 	and.w	r2, r3, #12
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	429a      	cmp	r2, r3
 80066da:	d1eb      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066dc:	4b27      	ldr	r3, [pc, #156]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d210      	bcs.n	800670c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 0207 	bic.w	r2, r3, #7
 80066f2:	4922      	ldr	r1, [pc, #136]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fa:	4b20      	ldr	r3, [pc, #128]	; (800677c <HAL_RCC_ClockConfig+0x1c0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d001      	beq.n	800670c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e032      	b.n	8006772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006718:	4b19      	ldr	r3, [pc, #100]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4916      	ldr	r1, [pc, #88]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006726:	4313      	orrs	r3, r2
 8006728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006736:	4b12      	ldr	r3, [pc, #72]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	490e      	ldr	r1, [pc, #56]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006746:	4313      	orrs	r3, r2
 8006748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800674a:	f000 f821 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 800674e:	4602      	mov	r2, r0
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	490a      	ldr	r1, [pc, #40]	; (8006784 <HAL_RCC_ClockConfig+0x1c8>)
 800675c:	5ccb      	ldrb	r3, [r1, r3]
 800675e:	fa22 f303 	lsr.w	r3, r2, r3
 8006762:	4a09      	ldr	r2, [pc, #36]	; (8006788 <HAL_RCC_ClockConfig+0x1cc>)
 8006764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <HAL_RCC_ClockConfig+0x1d0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f7fc f8a4 	bl	80028b8 <HAL_InitTick>

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40022000 	.word	0x40022000
 8006780:	40021000 	.word	0x40021000
 8006784:	08008be0 	.word	0x08008be0
 8006788:	20000020 	.word	0x20000020
 800678c:	20000024 	.word	0x20000024

08006790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006790:	b490      	push	{r4, r7}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006796:	4b29      	ldr	r3, [pc, #164]	; (800683c <HAL_RCC_GetSysClockFreq+0xac>)
 8006798:	1d3c      	adds	r4, r7, #4
 800679a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800679c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80067a0:	f240 2301 	movw	r3, #513	; 0x201
 80067a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067ba:	4b21      	ldr	r3, [pc, #132]	; (8006840 <HAL_RCC_GetSysClockFreq+0xb0>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d002      	beq.n	80067d0 <HAL_RCC_GetSysClockFreq+0x40>
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d003      	beq.n	80067d6 <HAL_RCC_GetSysClockFreq+0x46>
 80067ce:	e02b      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80067d2:	623b      	str	r3, [r7, #32]
      break;
 80067d4:	e02b      	b.n	800682e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	0c9b      	lsrs	r3, r3, #18
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	3328      	adds	r3, #40	; 0x28
 80067e0:	443b      	add	r3, r7
 80067e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80067e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d012      	beq.n	8006818 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067f2:	4b13      	ldr	r3, [pc, #76]	; (8006840 <HAL_RCC_GetSysClockFreq+0xb0>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	0c5b      	lsrs	r3, r3, #17
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	3328      	adds	r3, #40	; 0x28
 80067fe:	443b      	add	r3, r7
 8006800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4a0e      	ldr	r2, [pc, #56]	; (8006844 <HAL_RCC_GetSysClockFreq+0xb4>)
 800680a:	fb03 f202 	mul.w	r2, r3, r2
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
 8006816:	e004      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4a0b      	ldr	r2, [pc, #44]	; (8006848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800681c:	fb02 f303 	mul.w	r3, r2, r3
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	623b      	str	r3, [r7, #32]
      break;
 8006826:	e002      	b.n	800682e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <HAL_RCC_GetSysClockFreq+0xb4>)
 800682a:	623b      	str	r3, [r7, #32]
      break;
 800682c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800682e:	6a3b      	ldr	r3, [r7, #32]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bc90      	pop	{r4, r7}
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	08008bc0 	.word	0x08008bc0
 8006840:	40021000 	.word	0x40021000
 8006844:	007a1200 	.word	0x007a1200
 8006848:	003d0900 	.word	0x003d0900

0800684c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006850:	4b02      	ldr	r3, [pc, #8]	; (800685c <HAL_RCC_GetHCLKFreq+0x10>)
 8006852:	681b      	ldr	r3, [r3, #0]
}
 8006854:	4618      	mov	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr
 800685c:	20000020 	.word	0x20000020

08006860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006864:	f7ff fff2 	bl	800684c <HAL_RCC_GetHCLKFreq>
 8006868:	4602      	mov	r2, r0
 800686a:	4b05      	ldr	r3, [pc, #20]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	4903      	ldr	r1, [pc, #12]	; (8006884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006876:	5ccb      	ldrb	r3, [r1, r3]
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800687c:	4618      	mov	r0, r3
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40021000 	.word	0x40021000
 8006884:	08008bf0 	.word	0x08008bf0

08006888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800688c:	f7ff ffde 	bl	800684c <HAL_RCC_GetHCLKFreq>
 8006890:	4602      	mov	r2, r0
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	0adb      	lsrs	r3, r3, #11
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	4903      	ldr	r1, [pc, #12]	; (80068ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800689e:	5ccb      	ldrb	r3, [r1, r3]
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000
 80068ac:	08008bf0 	.word	0x08008bf0

080068b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <RCC_Delay+0x34>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <RCC_Delay+0x38>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0a5b      	lsrs	r3, r3, #9
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068cc:	bf00      	nop
  }
  while (Delay --);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1e5a      	subs	r2, r3, #1
 80068d2:	60fa      	str	r2, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f9      	bne.n	80068cc <RCC_Delay+0x1c>
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr
 80068e4:	20000020 	.word	0x20000020
 80068e8:	10624dd3 	.word	0x10624dd3

080068ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e076      	b.n	80069ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	d108      	bne.n	8006918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690e:	d009      	beq.n	8006924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	61da      	str	r2, [r3, #28]
 8006916:	e005      	b.n	8006924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fb fe4c 	bl	80025dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a8:	ea42 0103 	orr.w	r1, r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	0c1a      	lsrs	r2, r3, #16
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f002 0204 	and.w	r2, r2, #4
 80069ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_SPI_Transmit+0x22>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e126      	b.n	8006c64 <HAL_SPI_Transmit+0x270>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a1e:	f7fb ff8d 	bl	800293c <HAL_GetTick>
 8006a22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
 8006a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a38:	e10b      	b.n	8006c52 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Transmit+0x52>
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a4a:	e102      	b.n	8006c52 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	88fa      	ldrh	r2, [r7, #6]
 8006a6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a92:	d10f      	bne.n	8006ab4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d007      	beq.n	8006ad2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ada:	d14b      	bne.n	8006b74 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_SPI_Transmit+0xf6>
 8006ae4:	8afb      	ldrh	r3, [r7, #22]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d13e      	bne.n	8006b68 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	1c9a      	adds	r2, r3, #2
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b0e:	e02b      	b.n	8006b68 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d112      	bne.n	8006b44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	881a      	ldrh	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	1c9a      	adds	r2, r3, #2
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b42:	e011      	b.n	8006b68 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b44:	f7fb fefa 	bl	800293c <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d803      	bhi.n	8006b5c <HAL_SPI_Transmit+0x168>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d102      	bne.n	8006b62 <HAL_SPI_Transmit+0x16e>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b66:	e074      	b.n	8006c52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1ce      	bne.n	8006b10 <HAL_SPI_Transmit+0x11c>
 8006b72:	e04c      	b.n	8006c0e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Transmit+0x18e>
 8006b7c:	8afb      	ldrh	r3, [r7, #22]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d140      	bne.n	8006c04 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ba8:	e02c      	b.n	8006c04 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d113      	bne.n	8006be0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bde:	e011      	b.n	8006c04 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be0:	f7fb feac 	bl	800293c <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d803      	bhi.n	8006bf8 <HAL_SPI_Transmit+0x204>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d102      	bne.n	8006bfe <HAL_SPI_Transmit+0x20a>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c02:	e026      	b.n	8006c52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1cd      	bne.n	8006baa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fbb8 	bl	8007388 <SPI_EndRxTxTransaction>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e000      	b.n	8006c52 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c88:	d112      	bne.n	8006cb0 <HAL_SPI_Receive+0x44>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10e      	bne.n	8006cb0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2204      	movs	r2, #4
 8006c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f8f1 	bl	8006e8e <HAL_SPI_TransmitReceive>
 8006cac:	4603      	mov	r3, r0
 8006cae:	e0ea      	b.n	8006e86 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_SPI_Receive+0x52>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e0e3      	b.n	8006e86 <HAL_SPI_Receive+0x21a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cc6:	f7fb fe39 	bl	800293c <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cdc:	e0ca      	b.n	8006e74 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_SPI_Receive+0x7e>
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cee:	e0c1      	b.n	8006e74 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	88fa      	ldrh	r2, [r7, #6]
 8006d08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	88fa      	ldrh	r2, [r7, #6]
 8006d0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d36:	d10f      	bne.n	8006d58 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d007      	beq.n	8006d76 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d162      	bne.n	8006e44 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d7e:	e02e      	b.n	8006dde <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d115      	bne.n	8006dba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f103 020c 	add.w	r2, r3, #12
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006db8:	e011      	b.n	8006dde <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dba:	f7fb fdbf 	bl	800293c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d803      	bhi.n	8006dd2 <HAL_SPI_Receive+0x166>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d102      	bne.n	8006dd8 <HAL_SPI_Receive+0x16c>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ddc:	e04a      	b.n	8006e74 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1cb      	bne.n	8006d80 <HAL_SPI_Receive+0x114>
 8006de8:	e031      	b.n	8006e4e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d113      	bne.n	8006e20 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	b292      	uxth	r2, r2
 8006e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	1c9a      	adds	r2, r3, #2
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e1e:	e011      	b.n	8006e44 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e20:	f7fb fd8c 	bl	800293c <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d803      	bhi.n	8006e38 <HAL_SPI_Receive+0x1cc>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d102      	bne.n	8006e3e <HAL_SPI_Receive+0x1d2>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e42:	e017      	b.n	8006e74 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1cd      	bne.n	8006dea <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 fa46 	bl	80072e4 <SPI_EndRxTransaction>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]
 8006e70:	e000      	b.n	8006e74 <HAL_SPI_Receive+0x208>
  }

error :
 8006e72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b08c      	sub	sp, #48	; 0x30
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x26>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e18a      	b.n	80071ca <HAL_SPI_TransmitReceive+0x33c>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ebc:	f7fb fd3e 	bl	800293c <HAL_GetTick>
 8006ec0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ed2:	887b      	ldrh	r3, [r7, #2]
 8006ed4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d00f      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x70>
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ee4:	d107      	bne.n	8006ef6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <HAL_SPI_TransmitReceive+0x68>
 8006eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d003      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006efc:	e15b      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x82>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x82>
 8006f0a:	887b      	ldrh	r3, [r7, #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f16:	e14e      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d003      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2205      	movs	r2, #5
 8006f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	887a      	ldrh	r2, [r7, #2]
 8006f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	887a      	ldrh	r2, [r7, #2]
 8006f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	887a      	ldrh	r2, [r7, #2]
 8006f4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	887a      	ldrh	r2, [r7, #2]
 8006f54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d007      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f88:	d178      	bne.n	800707c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x10a>
 8006f92:	8b7b      	ldrh	r3, [r7, #26]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d166      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	881a      	ldrh	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fbc:	e053      	b.n	8007066 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d11b      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x176>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d016      	beq.n	8007004 <HAL_SPI_TransmitReceive+0x176>
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d113      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b01      	cmp	r3, #1
 8007010:	d119      	bne.n	8007046 <HAL_SPI_TransmitReceive+0x1b8>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d014      	beq.n	8007046 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	b292      	uxth	r2, r2
 8007028:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	1c9a      	adds	r2, r3, #2
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007042:	2301      	movs	r3, #1
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007046:	f7fb fc79 	bl	800293c <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007052:	429a      	cmp	r2, r3
 8007054:	d807      	bhi.n	8007066 <HAL_SPI_TransmitReceive+0x1d8>
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d003      	beq.n	8007066 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007064:	e0a7      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1a6      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x130>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1a1      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x130>
 800707a:	e07c      	b.n	8007176 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_SPI_TransmitReceive+0x1fc>
 8007084:	8b7b      	ldrh	r3, [r7, #26]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d16b      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	7812      	ldrb	r2, [r2, #0]
 8007096:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b0:	e057      	b.n	8007162 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d11c      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x26c>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <HAL_SPI_TransmitReceive+0x26c>
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d114      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d119      	bne.n	800713c <HAL_SPI_TransmitReceive+0x2ae>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d014      	beq.n	800713c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007138:	2301      	movs	r3, #1
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800713c:	f7fb fbfe 	bl	800293c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007148:	429a      	cmp	r2, r3
 800714a:	d803      	bhi.n	8007154 <HAL_SPI_TransmitReceive+0x2c6>
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d102      	bne.n	800715a <HAL_SPI_TransmitReceive+0x2cc>
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007160:	e029      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1a2      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x224>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d19d      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f904 	bl	8007388 <SPI_EndRxTxTransaction>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d006      	beq.n	8007194 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007192:	e010      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	e000      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80071b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3730      	adds	r7, #48	; 0x30
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071e4:	f7fb fbaa 	bl	800293c <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071f4:	f7fb fba2 	bl	800293c <HAL_GetTick>
 80071f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071fa:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	015b      	lsls	r3, r3, #5
 8007200:	0d1b      	lsrs	r3, r3, #20
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	fb02 f303 	mul.w	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800720a:	e054      	b.n	80072b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d050      	beq.n	80072b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007214:	f7fb fb92 	bl	800293c <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	429a      	cmp	r2, r3
 8007222:	d902      	bls.n	800722a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d13d      	bne.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007242:	d111      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800724c:	d004      	beq.n	8007258 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007256:	d107      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007270:	d10f      	bne.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e017      	b.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4013      	ands	r3, r2
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	bf0c      	ite	eq
 80072c6:	2301      	moveq	r3, #1
 80072c8:	2300      	movne	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d19b      	bne.n	800720c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000020 	.word	0x20000020

080072e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f8:	d111      	bne.n	800731e <SPI_EndRxTransaction+0x3a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007302:	d004      	beq.n	800730e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730c:	d107      	bne.n	800731e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007326:	d117      	bne.n	8007358 <SPI_EndRxTransaction+0x74>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007330:	d112      	bne.n	8007358 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	2101      	movs	r1, #1
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ff49 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01a      	beq.n	800737e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e013      	b.n	8007380 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	2180      	movs	r1, #128	; 0x80
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff ff36 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	f043 0220 	orr.w	r2, r3, #32
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e000      	b.n	8007380 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff ff18 	bl	80071d4 <SPI_WaitFlagStateUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f043 0220 	orr.w	r2, r3, #32
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e000      	b.n	80073bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e041      	b.n	800745a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fb f940 	bl	8002670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f000 fa70 	bl	80078e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e03a      	b.n	80074f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a18      	ldr	r2, [pc, #96]	; (80074fc <HAL_TIM_Base_Start_IT+0x98>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x58>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d009      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x58>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a14      	ldr	r2, [pc, #80]	; (8007500 <HAL_TIM_Base_Start_IT+0x9c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x58>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a13      	ldr	r2, [pc, #76]	; (8007504 <HAL_TIM_Base_Start_IT+0xa0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d111      	bne.n	80074e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d010      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	e007      	b.n	80074f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	40012c00 	.word	0x40012c00
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800

08007508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0202 	mvn.w	r2, #2
 8007534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9b1 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9a4 	bl	80078a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f9b3 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b04      	cmp	r3, #4
 8007570:	d122      	bne.n	80075b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b04      	cmp	r3, #4
 800757e:	d11b      	bne.n	80075b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0204 	mvn.w	r2, #4
 8007588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f987 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 80075a4:	e005      	b.n	80075b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f97a 	bl	80078a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f989 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d122      	bne.n	800760c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d11b      	bne.n	800760c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0208 	mvn.w	r2, #8
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2204      	movs	r2, #4
 80075e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f95d 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f950 	bl	80078a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f95f 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b10      	cmp	r3, #16
 8007618:	d122      	bne.n	8007660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d11b      	bne.n	8007660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0210 	mvn.w	r2, #16
 8007630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2208      	movs	r2, #8
 8007636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f933 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f926 	bl	80078a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f935 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10e      	bne.n	800768c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d107      	bne.n	800768c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0201 	mvn.w	r2, #1
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fa f9e2 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b80      	cmp	r3, #128	; 0x80
 8007698:	d10e      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a4:	2b80      	cmp	r3, #128	; 0x80
 80076a6:	d107      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa77 	bl	8007ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d10e      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d107      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8f9 	bl	80078d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d10e      	bne.n	8007710 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d107      	bne.n	8007710 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0220 	mvn.w	r2, #32
 8007708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa42 	bl	8007b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <HAL_TIM_ConfigClockSource+0x18>
 800772c:	2302      	movs	r3, #2
 800772e:	e0b3      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x180>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800774e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007768:	d03e      	beq.n	80077e8 <HAL_TIM_ConfigClockSource+0xd0>
 800776a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776e:	f200 8087 	bhi.w	8007880 <HAL_TIM_ConfigClockSource+0x168>
 8007772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007776:	f000 8085 	beq.w	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777e:	d87f      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 8007780:	2b70      	cmp	r3, #112	; 0x70
 8007782:	d01a      	beq.n	80077ba <HAL_TIM_ConfigClockSource+0xa2>
 8007784:	2b70      	cmp	r3, #112	; 0x70
 8007786:	d87b      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 8007788:	2b60      	cmp	r3, #96	; 0x60
 800778a:	d050      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x116>
 800778c:	2b60      	cmp	r3, #96	; 0x60
 800778e:	d877      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 8007790:	2b50      	cmp	r3, #80	; 0x50
 8007792:	d03c      	beq.n	800780e <HAL_TIM_ConfigClockSource+0xf6>
 8007794:	2b50      	cmp	r3, #80	; 0x50
 8007796:	d873      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	d058      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x136>
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d86f      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 80077a0:	2b30      	cmp	r3, #48	; 0x30
 80077a2:	d064      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x156>
 80077a4:	2b30      	cmp	r3, #48	; 0x30
 80077a6:	d86b      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d060      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x156>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d867      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05c      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x156>
 80077b4:	2b10      	cmp	r3, #16
 80077b6:	d05a      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80077b8:	e062      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6818      	ldr	r0, [r3, #0]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6899      	ldr	r1, [r3, #8]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f000 f966 	bl	8007a9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	609a      	str	r2, [r3, #8]
      break;
 80077e6:	e04e      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	6899      	ldr	r1, [r3, #8]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f000 f94f 	bl	8007a9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800780a:	609a      	str	r2, [r3, #8]
      break;
 800780c:	e03b      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6859      	ldr	r1, [r3, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	461a      	mov	r2, r3
 800781c:	f000 f8c6 	bl	80079ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2150      	movs	r1, #80	; 0x50
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f91d 	bl	8007a66 <TIM_ITRx_SetConfig>
      break;
 800782c:	e02b      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6859      	ldr	r1, [r3, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	461a      	mov	r2, r3
 800783c:	f000 f8e4 	bl	8007a08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2160      	movs	r1, #96	; 0x60
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f90d 	bl	8007a66 <TIM_ITRx_SetConfig>
      break;
 800784c:	e01b      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	6859      	ldr	r1, [r3, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	461a      	mov	r2, r3
 800785c:	f000 f8a6 	bl	80079ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2140      	movs	r1, #64	; 0x40
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f8fd 	bl	8007a66 <TIM_ITRx_SetConfig>
      break;
 800786c:	e00b      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f000 f8f4 	bl	8007a66 <TIM_ITRx_SetConfig>
        break;
 800787e:	e002      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007880:	bf00      	nop
 8007882:	e000      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr

080078c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr

080078e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a29      	ldr	r2, [pc, #164]	; (80079a0 <TIM_Base_SetConfig+0xb8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_Base_SetConfig+0x30>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007906:	d007      	beq.n	8007918 <TIM_Base_SetConfig+0x30>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <TIM_Base_SetConfig+0xbc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_Base_SetConfig+0x30>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a25      	ldr	r2, [pc, #148]	; (80079a8 <TIM_Base_SetConfig+0xc0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d108      	bne.n	800792a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a1c      	ldr	r2, [pc, #112]	; (80079a0 <TIM_Base_SetConfig+0xb8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00b      	beq.n	800794a <TIM_Base_SetConfig+0x62>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007938:	d007      	beq.n	800794a <TIM_Base_SetConfig+0x62>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <TIM_Base_SetConfig+0xbc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <TIM_Base_SetConfig+0x62>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <TIM_Base_SetConfig+0xc0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d108      	bne.n	800795c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a07      	ldr	r2, [pc, #28]	; (80079a0 <TIM_Base_SetConfig+0xb8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d103      	bne.n	8007990 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	615a      	str	r2, [r3, #20]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800

080079ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f023 030a 	bic.w	r3, r3, #10
 80079e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	f023 0210 	bic.w	r2, r3, #16
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	031b      	lsls	r3, r3, #12
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	621a      	str	r2, [r3, #32]
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr

08007a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f043 0307 	orr.w	r3, r3, #7
 8007a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	609a      	str	r2, [r3, #8]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b087      	sub	sp, #28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	021a      	lsls	r2, r3, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	609a      	str	r2, [r3, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e046      	b.n	8007b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a16      	ldr	r2, [pc, #88]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00e      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3c:	d009      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a12      	ldr	r2, [pc, #72]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a10      	ldr	r2, [pc, #64]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10c      	bne.n	8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr
 8007b88:	40012c00 	.word	0x40012c00
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800

08007b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e03f      	b.n	8007c4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fa fd6a 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f829 	bl	8007c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c8e:	f023 030c 	bic.w	r3, r3, #12
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2c      	ldr	r2, [pc, #176]	; (8007d68 <UART_SetConfig+0x114>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d103      	bne.n	8007cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007cbc:	f7fe fde4 	bl	8006888 <HAL_RCC_GetPCLK2Freq>
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	e002      	b.n	8007cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f7fe fdcc 	bl	8006860 <HAL_RCC_GetPCLK1Freq>
 8007cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009a      	lsls	r2, r3, #2
 8007cd4:	441a      	add	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <UART_SetConfig+0x118>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	0119      	lsls	r1, r3, #4
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009a      	lsls	r2, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d00:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <UART_SetConfig+0x118>)
 8007d02:	fba3 0302 	umull	r0, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	2064      	movs	r0, #100	; 0x64
 8007d0a:	fb00 f303 	mul.w	r3, r0, r3
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	3332      	adds	r3, #50	; 0x32
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <UART_SetConfig+0x118>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d20:	4419      	add	r1, r3
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009a      	lsls	r2, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <UART_SetConfig+0x118>)
 8007d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	2064      	movs	r0, #100	; 0x64
 8007d42:	fb00 f303 	mul.w	r3, r0, r3
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	3332      	adds	r3, #50	; 0x32
 8007d4c:	4a07      	ldr	r2, [pc, #28]	; (8007d6c <UART_SetConfig+0x118>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	f003 020f 	and.w	r2, r3, #15
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40013800 	.word	0x40013800
 8007d6c:	51eb851f 	.word	0x51eb851f

08007d70 <__errno>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <__errno+0x8>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000002c 	.word	0x2000002c

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	2600      	movs	r6, #0
 8007d80:	4d0c      	ldr	r5, [pc, #48]	; (8007db4 <__libc_init_array+0x38>)
 8007d82:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d84:	1b64      	subs	r4, r4, r5
 8007d86:	10a4      	asrs	r4, r4, #2
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	f000 ff02 	bl	8008b94 <_init>
 8007d90:	2600      	movs	r6, #0
 8007d92:	4d0a      	ldr	r5, [pc, #40]	; (8007dbc <__libc_init_array+0x40>)
 8007d94:	4c0a      	ldr	r4, [pc, #40]	; (8007dc0 <__libc_init_array+0x44>)
 8007d96:	1b64      	subs	r4, r4, r5
 8007d98:	10a4      	asrs	r4, r4, #2
 8007d9a:	42a6      	cmp	r6, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da4:	4798      	blx	r3
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dae:	4798      	blx	r3
 8007db0:	3601      	adds	r6, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	08008ca0 	.word	0x08008ca0
 8007db8:	08008ca0 	.word	0x08008ca0
 8007dbc:	08008ca0 	.word	0x08008ca0
 8007dc0:	08008ca4 	.word	0x08008ca4

08007dc4 <memcpy>:
 8007dc4:	440a      	add	r2, r1
 8007dc6:	4291      	cmp	r1, r2
 8007dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dcc:	d100      	bne.n	8007dd0 <memcpy+0xc>
 8007dce:	4770      	bx	lr
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd6:	4291      	cmp	r1, r2
 8007dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ddc:	d1f9      	bne.n	8007dd2 <memcpy+0xe>
 8007dde:	bd10      	pop	{r4, pc}

08007de0 <memset>:
 8007de0:	4603      	mov	r3, r0
 8007de2:	4402      	add	r2, r0
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d100      	bne.n	8007dea <memset+0xa>
 8007de8:	4770      	bx	lr
 8007dea:	f803 1b01 	strb.w	r1, [r3], #1
 8007dee:	e7f9      	b.n	8007de4 <memset+0x4>

08007df0 <siprintf>:
 8007df0:	b40e      	push	{r1, r2, r3}
 8007df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007df6:	b500      	push	{lr}
 8007df8:	b09c      	sub	sp, #112	; 0x70
 8007dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8007dfc:	9002      	str	r0, [sp, #8]
 8007dfe:	9006      	str	r0, [sp, #24]
 8007e00:	9107      	str	r1, [sp, #28]
 8007e02:	9104      	str	r1, [sp, #16]
 8007e04:	4808      	ldr	r0, [pc, #32]	; (8007e28 <siprintf+0x38>)
 8007e06:	4909      	ldr	r1, [pc, #36]	; (8007e2c <siprintf+0x3c>)
 8007e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0c:	9105      	str	r1, [sp, #20]
 8007e0e:	6800      	ldr	r0, [r0, #0]
 8007e10:	a902      	add	r1, sp, #8
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	f000 f868 	bl	8007ee8 <_svfiprintf_r>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	9b02      	ldr	r3, [sp, #8]
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	b01c      	add	sp, #112	; 0x70
 8007e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e24:	b003      	add	sp, #12
 8007e26:	4770      	bx	lr
 8007e28:	2000002c 	.word	0x2000002c
 8007e2c:	ffff0208 	.word	0xffff0208

08007e30 <__ssputs_r>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	688e      	ldr	r6, [r1, #8]
 8007e36:	4682      	mov	sl, r0
 8007e38:	429e      	cmp	r6, r3
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4690      	mov	r8, r2
 8007e3e:	461f      	mov	r7, r3
 8007e40:	d838      	bhi.n	8007eb4 <__ssputs_r+0x84>
 8007e42:	898a      	ldrh	r2, [r1, #12]
 8007e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e48:	d032      	beq.n	8007eb0 <__ssputs_r+0x80>
 8007e4a:	6825      	ldr	r5, [r4, #0]
 8007e4c:	6909      	ldr	r1, [r1, #16]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	eba5 0901 	sub.w	r9, r5, r1
 8007e54:	6965      	ldr	r5, [r4, #20]
 8007e56:	444b      	add	r3, r9
 8007e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e60:	106d      	asrs	r5, r5, #1
 8007e62:	429d      	cmp	r5, r3
 8007e64:	bf38      	it	cc
 8007e66:	461d      	movcc	r5, r3
 8007e68:	0553      	lsls	r3, r2, #21
 8007e6a:	d531      	bpl.n	8007ed0 <__ssputs_r+0xa0>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	f000 fb61 	bl	8008534 <_malloc_r>
 8007e72:	4606      	mov	r6, r0
 8007e74:	b950      	cbnz	r0, 8007e8c <__ssputs_r+0x5c>
 8007e76:	230c      	movs	r3, #12
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	f8ca 3000 	str.w	r3, [sl]
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8c:	464a      	mov	r2, r9
 8007e8e:	6921      	ldr	r1, [r4, #16]
 8007e90:	f7ff ff98 	bl	8007dc4 <memcpy>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	6126      	str	r6, [r4, #16]
 8007ea2:	444e      	add	r6, r9
 8007ea4:	6026      	str	r6, [r4, #0]
 8007ea6:	463e      	mov	r6, r7
 8007ea8:	6165      	str	r5, [r4, #20]
 8007eaa:	eba5 0509 	sub.w	r5, r5, r9
 8007eae:	60a5      	str	r5, [r4, #8]
 8007eb0:	42be      	cmp	r6, r7
 8007eb2:	d900      	bls.n	8007eb6 <__ssputs_r+0x86>
 8007eb4:	463e      	mov	r6, r7
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	4641      	mov	r1, r8
 8007eba:	6820      	ldr	r0, [r4, #0]
 8007ebc:	f000 fab8 	bl	8008430 <memmove>
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	1b9b      	subs	r3, r3, r6
 8007ec6:	60a3      	str	r3, [r4, #8]
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	4433      	add	r3, r6
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	e7db      	b.n	8007e88 <__ssputs_r+0x58>
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	f000 fba3 	bl	800861c <_realloc_r>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d1e1      	bne.n	8007ea0 <__ssputs_r+0x70>
 8007edc:	4650      	mov	r0, sl
 8007ede:	6921      	ldr	r1, [r4, #16]
 8007ee0:	f000 fac0 	bl	8008464 <_free_r>
 8007ee4:	e7c7      	b.n	8007e76 <__ssputs_r+0x46>
	...

08007ee8 <_svfiprintf_r>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	4698      	mov	r8, r3
 8007eee:	898b      	ldrh	r3, [r1, #12]
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	061b      	lsls	r3, r3, #24
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	4614      	mov	r4, r2
 8007ef8:	b09d      	sub	sp, #116	; 0x74
 8007efa:	d50e      	bpl.n	8007f1a <_svfiprintf_r+0x32>
 8007efc:	690b      	ldr	r3, [r1, #16]
 8007efe:	b963      	cbnz	r3, 8007f1a <_svfiprintf_r+0x32>
 8007f00:	2140      	movs	r1, #64	; 0x40
 8007f02:	f000 fb17 	bl	8008534 <_malloc_r>
 8007f06:	6028      	str	r0, [r5, #0]
 8007f08:	6128      	str	r0, [r5, #16]
 8007f0a:	b920      	cbnz	r0, 8007f16 <_svfiprintf_r+0x2e>
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	e0d1      	b.n	80080ba <_svfiprintf_r+0x1d2>
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	616b      	str	r3, [r5, #20]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	2320      	movs	r3, #32
 8007f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f24:	2330      	movs	r3, #48	; 0x30
 8007f26:	f04f 0901 	mov.w	r9, #1
 8007f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80080d4 <_svfiprintf_r+0x1ec>
 8007f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f36:	4623      	mov	r3, r4
 8007f38:	469a      	mov	sl, r3
 8007f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3e:	b10a      	cbz	r2, 8007f44 <_svfiprintf_r+0x5c>
 8007f40:	2a25      	cmp	r2, #37	; 0x25
 8007f42:	d1f9      	bne.n	8007f38 <_svfiprintf_r+0x50>
 8007f44:	ebba 0b04 	subs.w	fp, sl, r4
 8007f48:	d00b      	beq.n	8007f62 <_svfiprintf_r+0x7a>
 8007f4a:	465b      	mov	r3, fp
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4638      	mov	r0, r7
 8007f52:	f7ff ff6d 	bl	8007e30 <__ssputs_r>
 8007f56:	3001      	adds	r0, #1
 8007f58:	f000 80aa 	beq.w	80080b0 <_svfiprintf_r+0x1c8>
 8007f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f5e:	445a      	add	r2, fp
 8007f60:	9209      	str	r2, [sp, #36]	; 0x24
 8007f62:	f89a 3000 	ldrb.w	r3, [sl]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 80a2 	beq.w	80080b0 <_svfiprintf_r+0x1c8>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f76:	f10a 0a01 	add.w	sl, sl, #1
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f82:	931a      	str	r3, [sp, #104]	; 0x68
 8007f84:	4654      	mov	r4, sl
 8007f86:	2205      	movs	r2, #5
 8007f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8c:	4851      	ldr	r0, [pc, #324]	; (80080d4 <_svfiprintf_r+0x1ec>)
 8007f8e:	f000 fa41 	bl	8008414 <memchr>
 8007f92:	9a04      	ldr	r2, [sp, #16]
 8007f94:	b9d8      	cbnz	r0, 8007fce <_svfiprintf_r+0xe6>
 8007f96:	06d0      	lsls	r0, r2, #27
 8007f98:	bf44      	itt	mi
 8007f9a:	2320      	movmi	r3, #32
 8007f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa0:	0711      	lsls	r1, r2, #28
 8007fa2:	bf44      	itt	mi
 8007fa4:	232b      	movmi	r3, #43	; 0x2b
 8007fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007faa:	f89a 3000 	ldrb.w	r3, [sl]
 8007fae:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb0:	d015      	beq.n	8007fde <_svfiprintf_r+0xf6>
 8007fb2:	4654      	mov	r4, sl
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f04f 0c0a 	mov.w	ip, #10
 8007fba:	9a07      	ldr	r2, [sp, #28]
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc2:	3b30      	subs	r3, #48	; 0x30
 8007fc4:	2b09      	cmp	r3, #9
 8007fc6:	d94e      	bls.n	8008066 <_svfiprintf_r+0x17e>
 8007fc8:	b1b0      	cbz	r0, 8007ff8 <_svfiprintf_r+0x110>
 8007fca:	9207      	str	r2, [sp, #28]
 8007fcc:	e014      	b.n	8007ff8 <_svfiprintf_r+0x110>
 8007fce:	eba0 0308 	sub.w	r3, r0, r8
 8007fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	46a2      	mov	sl, r4
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	e7d2      	b.n	8007f84 <_svfiprintf_r+0x9c>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	1d19      	adds	r1, r3, #4
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	9103      	str	r1, [sp, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bfbb      	ittet	lt
 8007fea:	425b      	neglt	r3, r3
 8007fec:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff0:	9307      	strge	r3, [sp, #28]
 8007ff2:	9307      	strlt	r3, [sp, #28]
 8007ff4:	bfb8      	it	lt
 8007ff6:	9204      	strlt	r2, [sp, #16]
 8007ff8:	7823      	ldrb	r3, [r4, #0]
 8007ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8007ffc:	d10c      	bne.n	8008018 <_svfiprintf_r+0x130>
 8007ffe:	7863      	ldrb	r3, [r4, #1]
 8008000:	2b2a      	cmp	r3, #42	; 0x2a
 8008002:	d135      	bne.n	8008070 <_svfiprintf_r+0x188>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	3402      	adds	r4, #2
 8008008:	1d1a      	adds	r2, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9203      	str	r2, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfb8      	it	lt
 8008012:	f04f 33ff 	movlt.w	r3, #4294967295
 8008016:	9305      	str	r3, [sp, #20]
 8008018:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80080d8 <_svfiprintf_r+0x1f0>
 800801c:	2203      	movs	r2, #3
 800801e:	4650      	mov	r0, sl
 8008020:	7821      	ldrb	r1, [r4, #0]
 8008022:	f000 f9f7 	bl	8008414 <memchr>
 8008026:	b140      	cbz	r0, 800803a <_svfiprintf_r+0x152>
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	eba0 000a 	sub.w	r0, r0, sl
 800802e:	fa03 f000 	lsl.w	r0, r3, r0
 8008032:	9b04      	ldr	r3, [sp, #16]
 8008034:	3401      	adds	r4, #1
 8008036:	4303      	orrs	r3, r0
 8008038:	9304      	str	r3, [sp, #16]
 800803a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803e:	2206      	movs	r2, #6
 8008040:	4826      	ldr	r0, [pc, #152]	; (80080dc <_svfiprintf_r+0x1f4>)
 8008042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008046:	f000 f9e5 	bl	8008414 <memchr>
 800804a:	2800      	cmp	r0, #0
 800804c:	d038      	beq.n	80080c0 <_svfiprintf_r+0x1d8>
 800804e:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <_svfiprintf_r+0x1f8>)
 8008050:	bb1b      	cbnz	r3, 800809a <_svfiprintf_r+0x1b2>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	3307      	adds	r3, #7
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	3308      	adds	r3, #8
 800805c:	9303      	str	r3, [sp, #12]
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	4433      	add	r3, r6
 8008062:	9309      	str	r3, [sp, #36]	; 0x24
 8008064:	e767      	b.n	8007f36 <_svfiprintf_r+0x4e>
 8008066:	460c      	mov	r4, r1
 8008068:	2001      	movs	r0, #1
 800806a:	fb0c 3202 	mla	r2, ip, r2, r3
 800806e:	e7a5      	b.n	8007fbc <_svfiprintf_r+0xd4>
 8008070:	2300      	movs	r3, #0
 8008072:	f04f 0c0a 	mov.w	ip, #10
 8008076:	4619      	mov	r1, r3
 8008078:	3401      	adds	r4, #1
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	4620      	mov	r0, r4
 800807e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008082:	3a30      	subs	r2, #48	; 0x30
 8008084:	2a09      	cmp	r2, #9
 8008086:	d903      	bls.n	8008090 <_svfiprintf_r+0x1a8>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0c5      	beq.n	8008018 <_svfiprintf_r+0x130>
 800808c:	9105      	str	r1, [sp, #20]
 800808e:	e7c3      	b.n	8008018 <_svfiprintf_r+0x130>
 8008090:	4604      	mov	r4, r0
 8008092:	2301      	movs	r3, #1
 8008094:	fb0c 2101 	mla	r1, ip, r1, r2
 8008098:	e7f0      	b.n	800807c <_svfiprintf_r+0x194>
 800809a:	ab03      	add	r3, sp, #12
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	462a      	mov	r2, r5
 80080a0:	4638      	mov	r0, r7
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <_svfiprintf_r+0x1fc>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	f3af 8000 	nop.w
 80080aa:	1c42      	adds	r2, r0, #1
 80080ac:	4606      	mov	r6, r0
 80080ae:	d1d6      	bne.n	800805e <_svfiprintf_r+0x176>
 80080b0:	89ab      	ldrh	r3, [r5, #12]
 80080b2:	065b      	lsls	r3, r3, #25
 80080b4:	f53f af2c 	bmi.w	8007f10 <_svfiprintf_r+0x28>
 80080b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ba:	b01d      	add	sp, #116	; 0x74
 80080bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c0:	ab03      	add	r3, sp, #12
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	462a      	mov	r2, r5
 80080c6:	4638      	mov	r0, r7
 80080c8:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <_svfiprintf_r+0x1fc>)
 80080ca:	a904      	add	r1, sp, #16
 80080cc:	f000 f87c 	bl	80081c8 <_printf_i>
 80080d0:	e7eb      	b.n	80080aa <_svfiprintf_r+0x1c2>
 80080d2:	bf00      	nop
 80080d4:	08008bf8 	.word	0x08008bf8
 80080d8:	08008bfe 	.word	0x08008bfe
 80080dc:	08008c02 	.word	0x08008c02
 80080e0:	00000000 	.word	0x00000000
 80080e4:	08007e31 	.word	0x08007e31

080080e8 <_printf_common>:
 80080e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	4616      	mov	r6, r2
 80080ee:	4699      	mov	r9, r3
 80080f0:	688a      	ldr	r2, [r1, #8]
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	4607      	mov	r7, r0
 80080f6:	4293      	cmp	r3, r2
 80080f8:	bfb8      	it	lt
 80080fa:	4613      	movlt	r3, r2
 80080fc:	6033      	str	r3, [r6, #0]
 80080fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008102:	460c      	mov	r4, r1
 8008104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008108:	b10a      	cbz	r2, 800810e <_printf_common+0x26>
 800810a:	3301      	adds	r3, #1
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	0699      	lsls	r1, r3, #26
 8008112:	bf42      	ittt	mi
 8008114:	6833      	ldrmi	r3, [r6, #0]
 8008116:	3302      	addmi	r3, #2
 8008118:	6033      	strmi	r3, [r6, #0]
 800811a:	6825      	ldr	r5, [r4, #0]
 800811c:	f015 0506 	ands.w	r5, r5, #6
 8008120:	d106      	bne.n	8008130 <_printf_common+0x48>
 8008122:	f104 0a19 	add.w	sl, r4, #25
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	6832      	ldr	r2, [r6, #0]
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	42ab      	cmp	r3, r5
 800812e:	dc28      	bgt.n	8008182 <_printf_common+0x9a>
 8008130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008134:	1e13      	subs	r3, r2, #0
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	bf18      	it	ne
 800813a:	2301      	movne	r3, #1
 800813c:	0692      	lsls	r2, r2, #26
 800813e:	d42d      	bmi.n	800819c <_printf_common+0xb4>
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008148:	47c0      	blx	r8
 800814a:	3001      	adds	r0, #1
 800814c:	d020      	beq.n	8008190 <_printf_common+0xa8>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	68e5      	ldr	r5, [r4, #12]
 8008152:	f003 0306 	and.w	r3, r3, #6
 8008156:	2b04      	cmp	r3, #4
 8008158:	bf18      	it	ne
 800815a:	2500      	movne	r5, #0
 800815c:	6832      	ldr	r2, [r6, #0]
 800815e:	f04f 0600 	mov.w	r6, #0
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	bf08      	it	eq
 8008166:	1aad      	subeq	r5, r5, r2
 8008168:	6922      	ldr	r2, [r4, #16]
 800816a:	bf08      	it	eq
 800816c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008170:	4293      	cmp	r3, r2
 8008172:	bfc4      	itt	gt
 8008174:	1a9b      	subgt	r3, r3, r2
 8008176:	18ed      	addgt	r5, r5, r3
 8008178:	341a      	adds	r4, #26
 800817a:	42b5      	cmp	r5, r6
 800817c:	d11a      	bne.n	80081b4 <_printf_common+0xcc>
 800817e:	2000      	movs	r0, #0
 8008180:	e008      	b.n	8008194 <_printf_common+0xac>
 8008182:	2301      	movs	r3, #1
 8008184:	4652      	mov	r2, sl
 8008186:	4649      	mov	r1, r9
 8008188:	4638      	mov	r0, r7
 800818a:	47c0      	blx	r8
 800818c:	3001      	adds	r0, #1
 800818e:	d103      	bne.n	8008198 <_printf_common+0xb0>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	3501      	adds	r5, #1
 800819a:	e7c4      	b.n	8008126 <_printf_common+0x3e>
 800819c:	2030      	movs	r0, #48	; 0x30
 800819e:	18e1      	adds	r1, r4, r3
 80081a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081aa:	4422      	add	r2, r4
 80081ac:	3302      	adds	r3, #2
 80081ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081b2:	e7c5      	b.n	8008140 <_printf_common+0x58>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4622      	mov	r2, r4
 80081b8:	4649      	mov	r1, r9
 80081ba:	4638      	mov	r0, r7
 80081bc:	47c0      	blx	r8
 80081be:	3001      	adds	r0, #1
 80081c0:	d0e6      	beq.n	8008190 <_printf_common+0xa8>
 80081c2:	3601      	adds	r6, #1
 80081c4:	e7d9      	b.n	800817a <_printf_common+0x92>
	...

080081c8 <_printf_i>:
 80081c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	7e0f      	ldrb	r7, [r1, #24]
 80081ce:	4691      	mov	r9, r2
 80081d0:	2f78      	cmp	r7, #120	; 0x78
 80081d2:	4680      	mov	r8, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	469a      	mov	sl, r3
 80081d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081de:	d807      	bhi.n	80081f0 <_printf_i+0x28>
 80081e0:	2f62      	cmp	r7, #98	; 0x62
 80081e2:	d80a      	bhi.n	80081fa <_printf_i+0x32>
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	f000 80d9 	beq.w	800839c <_printf_i+0x1d4>
 80081ea:	2f58      	cmp	r7, #88	; 0x58
 80081ec:	f000 80a4 	beq.w	8008338 <_printf_i+0x170>
 80081f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f8:	e03a      	b.n	8008270 <_printf_i+0xa8>
 80081fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081fe:	2b15      	cmp	r3, #21
 8008200:	d8f6      	bhi.n	80081f0 <_printf_i+0x28>
 8008202:	a101      	add	r1, pc, #4	; (adr r1, 8008208 <_printf_i+0x40>)
 8008204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008208:	08008261 	.word	0x08008261
 800820c:	08008275 	.word	0x08008275
 8008210:	080081f1 	.word	0x080081f1
 8008214:	080081f1 	.word	0x080081f1
 8008218:	080081f1 	.word	0x080081f1
 800821c:	080081f1 	.word	0x080081f1
 8008220:	08008275 	.word	0x08008275
 8008224:	080081f1 	.word	0x080081f1
 8008228:	080081f1 	.word	0x080081f1
 800822c:	080081f1 	.word	0x080081f1
 8008230:	080081f1 	.word	0x080081f1
 8008234:	08008383 	.word	0x08008383
 8008238:	080082a5 	.word	0x080082a5
 800823c:	08008365 	.word	0x08008365
 8008240:	080081f1 	.word	0x080081f1
 8008244:	080081f1 	.word	0x080081f1
 8008248:	080083a5 	.word	0x080083a5
 800824c:	080081f1 	.word	0x080081f1
 8008250:	080082a5 	.word	0x080082a5
 8008254:	080081f1 	.word	0x080081f1
 8008258:	080081f1 	.word	0x080081f1
 800825c:	0800836d 	.word	0x0800836d
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	1d1a      	adds	r2, r3, #4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	602a      	str	r2, [r5, #0]
 8008268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800826c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008270:	2301      	movs	r3, #1
 8008272:	e0a4      	b.n	80083be <_printf_i+0x1f6>
 8008274:	6820      	ldr	r0, [r4, #0]
 8008276:	6829      	ldr	r1, [r5, #0]
 8008278:	0606      	lsls	r6, r0, #24
 800827a:	f101 0304 	add.w	r3, r1, #4
 800827e:	d50a      	bpl.n	8008296 <_printf_i+0xce>
 8008280:	680e      	ldr	r6, [r1, #0]
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	2e00      	cmp	r6, #0
 8008286:	da03      	bge.n	8008290 <_printf_i+0xc8>
 8008288:	232d      	movs	r3, #45	; 0x2d
 800828a:	4276      	negs	r6, r6
 800828c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008290:	230a      	movs	r3, #10
 8008292:	485e      	ldr	r0, [pc, #376]	; (800840c <_printf_i+0x244>)
 8008294:	e019      	b.n	80082ca <_printf_i+0x102>
 8008296:	680e      	ldr	r6, [r1, #0]
 8008298:	f010 0f40 	tst.w	r0, #64	; 0x40
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	bf18      	it	ne
 80082a0:	b236      	sxthne	r6, r6
 80082a2:	e7ef      	b.n	8008284 <_printf_i+0xbc>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	1d19      	adds	r1, r3, #4
 80082aa:	6029      	str	r1, [r5, #0]
 80082ac:	0601      	lsls	r1, r0, #24
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0xec>
 80082b0:	681e      	ldr	r6, [r3, #0]
 80082b2:	e002      	b.n	80082ba <_printf_i+0xf2>
 80082b4:	0646      	lsls	r6, r0, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0xe8>
 80082b8:	881e      	ldrh	r6, [r3, #0]
 80082ba:	2f6f      	cmp	r7, #111	; 0x6f
 80082bc:	bf0c      	ite	eq
 80082be:	2308      	moveq	r3, #8
 80082c0:	230a      	movne	r3, #10
 80082c2:	4852      	ldr	r0, [pc, #328]	; (800840c <_printf_i+0x244>)
 80082c4:	2100      	movs	r1, #0
 80082c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ca:	6865      	ldr	r5, [r4, #4]
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	bfa8      	it	ge
 80082d0:	6821      	ldrge	r1, [r4, #0]
 80082d2:	60a5      	str	r5, [r4, #8]
 80082d4:	bfa4      	itt	ge
 80082d6:	f021 0104 	bicge.w	r1, r1, #4
 80082da:	6021      	strge	r1, [r4, #0]
 80082dc:	b90e      	cbnz	r6, 80082e2 <_printf_i+0x11a>
 80082de:	2d00      	cmp	r5, #0
 80082e0:	d04d      	beq.n	800837e <_printf_i+0x1b6>
 80082e2:	4615      	mov	r5, r2
 80082e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80082e8:	fb03 6711 	mls	r7, r3, r1, r6
 80082ec:	5dc7      	ldrb	r7, [r0, r7]
 80082ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082f2:	4637      	mov	r7, r6
 80082f4:	42bb      	cmp	r3, r7
 80082f6:	460e      	mov	r6, r1
 80082f8:	d9f4      	bls.n	80082e4 <_printf_i+0x11c>
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d10b      	bne.n	8008316 <_printf_i+0x14e>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	07de      	lsls	r6, r3, #31
 8008302:	d508      	bpl.n	8008316 <_printf_i+0x14e>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	6861      	ldr	r1, [r4, #4]
 8008308:	4299      	cmp	r1, r3
 800830a:	bfde      	ittt	le
 800830c:	2330      	movle	r3, #48	; 0x30
 800830e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008312:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008316:	1b52      	subs	r2, r2, r5
 8008318:	6122      	str	r2, [r4, #16]
 800831a:	464b      	mov	r3, r9
 800831c:	4621      	mov	r1, r4
 800831e:	4640      	mov	r0, r8
 8008320:	f8cd a000 	str.w	sl, [sp]
 8008324:	aa03      	add	r2, sp, #12
 8008326:	f7ff fedf 	bl	80080e8 <_printf_common>
 800832a:	3001      	adds	r0, #1
 800832c:	d14c      	bne.n	80083c8 <_printf_i+0x200>
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
 8008332:	b004      	add	sp, #16
 8008334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008338:	4834      	ldr	r0, [pc, #208]	; (800840c <_printf_i+0x244>)
 800833a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800833e:	6829      	ldr	r1, [r5, #0]
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	f851 6b04 	ldr.w	r6, [r1], #4
 8008346:	6029      	str	r1, [r5, #0]
 8008348:	061d      	lsls	r5, r3, #24
 800834a:	d514      	bpl.n	8008376 <_printf_i+0x1ae>
 800834c:	07df      	lsls	r7, r3, #31
 800834e:	bf44      	itt	mi
 8008350:	f043 0320 	orrmi.w	r3, r3, #32
 8008354:	6023      	strmi	r3, [r4, #0]
 8008356:	b91e      	cbnz	r6, 8008360 <_printf_i+0x198>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	f023 0320 	bic.w	r3, r3, #32
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	2310      	movs	r3, #16
 8008362:	e7af      	b.n	80082c4 <_printf_i+0xfc>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	f043 0320 	orr.w	r3, r3, #32
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	2378      	movs	r3, #120	; 0x78
 800836e:	4828      	ldr	r0, [pc, #160]	; (8008410 <_printf_i+0x248>)
 8008370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008374:	e7e3      	b.n	800833e <_printf_i+0x176>
 8008376:	0659      	lsls	r1, r3, #25
 8008378:	bf48      	it	mi
 800837a:	b2b6      	uxthmi	r6, r6
 800837c:	e7e6      	b.n	800834c <_printf_i+0x184>
 800837e:	4615      	mov	r5, r2
 8008380:	e7bb      	b.n	80082fa <_printf_i+0x132>
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	6826      	ldr	r6, [r4, #0]
 8008386:	1d18      	adds	r0, r3, #4
 8008388:	6961      	ldr	r1, [r4, #20]
 800838a:	6028      	str	r0, [r5, #0]
 800838c:	0635      	lsls	r5, r6, #24
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	d501      	bpl.n	8008396 <_printf_i+0x1ce>
 8008392:	6019      	str	r1, [r3, #0]
 8008394:	e002      	b.n	800839c <_printf_i+0x1d4>
 8008396:	0670      	lsls	r0, r6, #25
 8008398:	d5fb      	bpl.n	8008392 <_printf_i+0x1ca>
 800839a:	8019      	strh	r1, [r3, #0]
 800839c:	2300      	movs	r3, #0
 800839e:	4615      	mov	r5, r2
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	e7ba      	b.n	800831a <_printf_i+0x152>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	2100      	movs	r1, #0
 80083a8:	1d1a      	adds	r2, r3, #4
 80083aa:	602a      	str	r2, [r5, #0]
 80083ac:	681d      	ldr	r5, [r3, #0]
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 f82f 	bl	8008414 <memchr>
 80083b6:	b108      	cbz	r0, 80083bc <_printf_i+0x1f4>
 80083b8:	1b40      	subs	r0, r0, r5
 80083ba:	6060      	str	r0, [r4, #4]
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	6123      	str	r3, [r4, #16]
 80083c0:	2300      	movs	r3, #0
 80083c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c6:	e7a8      	b.n	800831a <_printf_i+0x152>
 80083c8:	462a      	mov	r2, r5
 80083ca:	4649      	mov	r1, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	47d0      	blx	sl
 80083d2:	3001      	adds	r0, #1
 80083d4:	d0ab      	beq.n	800832e <_printf_i+0x166>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	079b      	lsls	r3, r3, #30
 80083da:	d413      	bmi.n	8008404 <_printf_i+0x23c>
 80083dc:	68e0      	ldr	r0, [r4, #12]
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	4298      	cmp	r0, r3
 80083e2:	bfb8      	it	lt
 80083e4:	4618      	movlt	r0, r3
 80083e6:	e7a4      	b.n	8008332 <_printf_i+0x16a>
 80083e8:	2301      	movs	r3, #1
 80083ea:	4632      	mov	r2, r6
 80083ec:	4649      	mov	r1, r9
 80083ee:	4640      	mov	r0, r8
 80083f0:	47d0      	blx	sl
 80083f2:	3001      	adds	r0, #1
 80083f4:	d09b      	beq.n	800832e <_printf_i+0x166>
 80083f6:	3501      	adds	r5, #1
 80083f8:	68e3      	ldr	r3, [r4, #12]
 80083fa:	9903      	ldr	r1, [sp, #12]
 80083fc:	1a5b      	subs	r3, r3, r1
 80083fe:	42ab      	cmp	r3, r5
 8008400:	dcf2      	bgt.n	80083e8 <_printf_i+0x220>
 8008402:	e7eb      	b.n	80083dc <_printf_i+0x214>
 8008404:	2500      	movs	r5, #0
 8008406:	f104 0619 	add.w	r6, r4, #25
 800840a:	e7f5      	b.n	80083f8 <_printf_i+0x230>
 800840c:	08008c09 	.word	0x08008c09
 8008410:	08008c1a 	.word	0x08008c1a

08008414 <memchr>:
 8008414:	4603      	mov	r3, r0
 8008416:	b510      	push	{r4, lr}
 8008418:	b2c9      	uxtb	r1, r1
 800841a:	4402      	add	r2, r0
 800841c:	4293      	cmp	r3, r2
 800841e:	4618      	mov	r0, r3
 8008420:	d101      	bne.n	8008426 <memchr+0x12>
 8008422:	2000      	movs	r0, #0
 8008424:	e003      	b.n	800842e <memchr+0x1a>
 8008426:	7804      	ldrb	r4, [r0, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	428c      	cmp	r4, r1
 800842c:	d1f6      	bne.n	800841c <memchr+0x8>
 800842e:	bd10      	pop	{r4, pc}

08008430 <memmove>:
 8008430:	4288      	cmp	r0, r1
 8008432:	b510      	push	{r4, lr}
 8008434:	eb01 0402 	add.w	r4, r1, r2
 8008438:	d902      	bls.n	8008440 <memmove+0x10>
 800843a:	4284      	cmp	r4, r0
 800843c:	4623      	mov	r3, r4
 800843e:	d807      	bhi.n	8008450 <memmove+0x20>
 8008440:	1e43      	subs	r3, r0, #1
 8008442:	42a1      	cmp	r1, r4
 8008444:	d008      	beq.n	8008458 <memmove+0x28>
 8008446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800844a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800844e:	e7f8      	b.n	8008442 <memmove+0x12>
 8008450:	4601      	mov	r1, r0
 8008452:	4402      	add	r2, r0
 8008454:	428a      	cmp	r2, r1
 8008456:	d100      	bne.n	800845a <memmove+0x2a>
 8008458:	bd10      	pop	{r4, pc}
 800845a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800845e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008462:	e7f7      	b.n	8008454 <memmove+0x24>

08008464 <_free_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4605      	mov	r5, r0
 8008468:	2900      	cmp	r1, #0
 800846a:	d040      	beq.n	80084ee <_free_r+0x8a>
 800846c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008470:	1f0c      	subs	r4, r1, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	bfb8      	it	lt
 8008476:	18e4      	addlt	r4, r4, r3
 8008478:	f000 f910 	bl	800869c <__malloc_lock>
 800847c:	4a1c      	ldr	r2, [pc, #112]	; (80084f0 <_free_r+0x8c>)
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	b933      	cbnz	r3, 8008490 <_free_r+0x2c>
 8008482:	6063      	str	r3, [r4, #4]
 8008484:	6014      	str	r4, [r2, #0]
 8008486:	4628      	mov	r0, r5
 8008488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800848c:	f000 b90c 	b.w	80086a8 <__malloc_unlock>
 8008490:	42a3      	cmp	r3, r4
 8008492:	d908      	bls.n	80084a6 <_free_r+0x42>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	1821      	adds	r1, r4, r0
 8008498:	428b      	cmp	r3, r1
 800849a:	bf01      	itttt	eq
 800849c:	6819      	ldreq	r1, [r3, #0]
 800849e:	685b      	ldreq	r3, [r3, #4]
 80084a0:	1809      	addeq	r1, r1, r0
 80084a2:	6021      	streq	r1, [r4, #0]
 80084a4:	e7ed      	b.n	8008482 <_free_r+0x1e>
 80084a6:	461a      	mov	r2, r3
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b10b      	cbz	r3, 80084b0 <_free_r+0x4c>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d9fa      	bls.n	80084a6 <_free_r+0x42>
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	1850      	adds	r0, r2, r1
 80084b4:	42a0      	cmp	r0, r4
 80084b6:	d10b      	bne.n	80084d0 <_free_r+0x6c>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	4401      	add	r1, r0
 80084bc:	1850      	adds	r0, r2, r1
 80084be:	4283      	cmp	r3, r0
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	d1e0      	bne.n	8008486 <_free_r+0x22>
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4401      	add	r1, r0
 80084ca:	6011      	str	r1, [r2, #0]
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	e7da      	b.n	8008486 <_free_r+0x22>
 80084d0:	d902      	bls.n	80084d8 <_free_r+0x74>
 80084d2:	230c      	movs	r3, #12
 80084d4:	602b      	str	r3, [r5, #0]
 80084d6:	e7d6      	b.n	8008486 <_free_r+0x22>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	1821      	adds	r1, r4, r0
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf01      	itttt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	1809      	addeq	r1, r1, r0
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	6054      	str	r4, [r2, #4]
 80084ec:	e7cb      	b.n	8008486 <_free_r+0x22>
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000328 	.word	0x20000328

080084f4 <sbrk_aligned>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	4e0e      	ldr	r6, [pc, #56]	; (8008530 <sbrk_aligned+0x3c>)
 80084f8:	460c      	mov	r4, r1
 80084fa:	6831      	ldr	r1, [r6, #0]
 80084fc:	4605      	mov	r5, r0
 80084fe:	b911      	cbnz	r1, 8008506 <sbrk_aligned+0x12>
 8008500:	f000 f8bc 	bl	800867c <_sbrk_r>
 8008504:	6030      	str	r0, [r6, #0]
 8008506:	4621      	mov	r1, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f8b7 	bl	800867c <_sbrk_r>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d00a      	beq.n	8008528 <sbrk_aligned+0x34>
 8008512:	1cc4      	adds	r4, r0, #3
 8008514:	f024 0403 	bic.w	r4, r4, #3
 8008518:	42a0      	cmp	r0, r4
 800851a:	d007      	beq.n	800852c <sbrk_aligned+0x38>
 800851c:	1a21      	subs	r1, r4, r0
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f8ac 	bl	800867c <_sbrk_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d101      	bne.n	800852c <sbrk_aligned+0x38>
 8008528:	f04f 34ff 	mov.w	r4, #4294967295
 800852c:	4620      	mov	r0, r4
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	2000032c 	.word	0x2000032c

08008534 <_malloc_r>:
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	1ccd      	adds	r5, r1, #3
 800853a:	f025 0503 	bic.w	r5, r5, #3
 800853e:	3508      	adds	r5, #8
 8008540:	2d0c      	cmp	r5, #12
 8008542:	bf38      	it	cc
 8008544:	250c      	movcc	r5, #12
 8008546:	2d00      	cmp	r5, #0
 8008548:	4607      	mov	r7, r0
 800854a:	db01      	blt.n	8008550 <_malloc_r+0x1c>
 800854c:	42a9      	cmp	r1, r5
 800854e:	d905      	bls.n	800855c <_malloc_r+0x28>
 8008550:	230c      	movs	r3, #12
 8008552:	2600      	movs	r6, #0
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	4630      	mov	r0, r6
 8008558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800855c:	4e2e      	ldr	r6, [pc, #184]	; (8008618 <_malloc_r+0xe4>)
 800855e:	f000 f89d 	bl	800869c <__malloc_lock>
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	461c      	mov	r4, r3
 8008566:	bb34      	cbnz	r4, 80085b6 <_malloc_r+0x82>
 8008568:	4629      	mov	r1, r5
 800856a:	4638      	mov	r0, r7
 800856c:	f7ff ffc2 	bl	80084f4 <sbrk_aligned>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	4604      	mov	r4, r0
 8008574:	d14d      	bne.n	8008612 <_malloc_r+0xde>
 8008576:	6834      	ldr	r4, [r6, #0]
 8008578:	4626      	mov	r6, r4
 800857a:	2e00      	cmp	r6, #0
 800857c:	d140      	bne.n	8008600 <_malloc_r+0xcc>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	4631      	mov	r1, r6
 8008582:	4638      	mov	r0, r7
 8008584:	eb04 0803 	add.w	r8, r4, r3
 8008588:	f000 f878 	bl	800867c <_sbrk_r>
 800858c:	4580      	cmp	r8, r0
 800858e:	d13a      	bne.n	8008606 <_malloc_r+0xd2>
 8008590:	6821      	ldr	r1, [r4, #0]
 8008592:	3503      	adds	r5, #3
 8008594:	1a6d      	subs	r5, r5, r1
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	4638      	mov	r0, r7
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7ff ffa5 	bl	80084f4 <sbrk_aligned>
 80085aa:	3001      	adds	r0, #1
 80085ac:	d02b      	beq.n	8008606 <_malloc_r+0xd2>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	442b      	add	r3, r5
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	e00e      	b.n	80085d4 <_malloc_r+0xa0>
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	1b52      	subs	r2, r2, r5
 80085ba:	d41e      	bmi.n	80085fa <_malloc_r+0xc6>
 80085bc:	2a0b      	cmp	r2, #11
 80085be:	d916      	bls.n	80085ee <_malloc_r+0xba>
 80085c0:	1961      	adds	r1, r4, r5
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	6025      	str	r5, [r4, #0]
 80085c6:	bf18      	it	ne
 80085c8:	6059      	strne	r1, [r3, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	bf08      	it	eq
 80085ce:	6031      	streq	r1, [r6, #0]
 80085d0:	5162      	str	r2, [r4, r5]
 80085d2:	604b      	str	r3, [r1, #4]
 80085d4:	4638      	mov	r0, r7
 80085d6:	f104 060b 	add.w	r6, r4, #11
 80085da:	f000 f865 	bl	80086a8 <__malloc_unlock>
 80085de:	f026 0607 	bic.w	r6, r6, #7
 80085e2:	1d23      	adds	r3, r4, #4
 80085e4:	1af2      	subs	r2, r6, r3
 80085e6:	d0b6      	beq.n	8008556 <_malloc_r+0x22>
 80085e8:	1b9b      	subs	r3, r3, r6
 80085ea:	50a3      	str	r3, [r4, r2]
 80085ec:	e7b3      	b.n	8008556 <_malloc_r+0x22>
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	bf0c      	ite	eq
 80085f4:	6032      	streq	r2, [r6, #0]
 80085f6:	605a      	strne	r2, [r3, #4]
 80085f8:	e7ec      	b.n	80085d4 <_malloc_r+0xa0>
 80085fa:	4623      	mov	r3, r4
 80085fc:	6864      	ldr	r4, [r4, #4]
 80085fe:	e7b2      	b.n	8008566 <_malloc_r+0x32>
 8008600:	4634      	mov	r4, r6
 8008602:	6876      	ldr	r6, [r6, #4]
 8008604:	e7b9      	b.n	800857a <_malloc_r+0x46>
 8008606:	230c      	movs	r3, #12
 8008608:	4638      	mov	r0, r7
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	f000 f84c 	bl	80086a8 <__malloc_unlock>
 8008610:	e7a1      	b.n	8008556 <_malloc_r+0x22>
 8008612:	6025      	str	r5, [r4, #0]
 8008614:	e7de      	b.n	80085d4 <_malloc_r+0xa0>
 8008616:	bf00      	nop
 8008618:	20000328 	.word	0x20000328

0800861c <_realloc_r>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	4680      	mov	r8, r0
 8008622:	4614      	mov	r4, r2
 8008624:	460e      	mov	r6, r1
 8008626:	b921      	cbnz	r1, 8008632 <_realloc_r+0x16>
 8008628:	4611      	mov	r1, r2
 800862a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	f7ff bf81 	b.w	8008534 <_malloc_r>
 8008632:	b92a      	cbnz	r2, 8008640 <_realloc_r+0x24>
 8008634:	f7ff ff16 	bl	8008464 <_free_r>
 8008638:	4625      	mov	r5, r4
 800863a:	4628      	mov	r0, r5
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	f000 f838 	bl	80086b4 <_malloc_usable_size_r>
 8008644:	4284      	cmp	r4, r0
 8008646:	4607      	mov	r7, r0
 8008648:	d802      	bhi.n	8008650 <_realloc_r+0x34>
 800864a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800864e:	d812      	bhi.n	8008676 <_realloc_r+0x5a>
 8008650:	4621      	mov	r1, r4
 8008652:	4640      	mov	r0, r8
 8008654:	f7ff ff6e 	bl	8008534 <_malloc_r>
 8008658:	4605      	mov	r5, r0
 800865a:	2800      	cmp	r0, #0
 800865c:	d0ed      	beq.n	800863a <_realloc_r+0x1e>
 800865e:	42bc      	cmp	r4, r7
 8008660:	4622      	mov	r2, r4
 8008662:	4631      	mov	r1, r6
 8008664:	bf28      	it	cs
 8008666:	463a      	movcs	r2, r7
 8008668:	f7ff fbac 	bl	8007dc4 <memcpy>
 800866c:	4631      	mov	r1, r6
 800866e:	4640      	mov	r0, r8
 8008670:	f7ff fef8 	bl	8008464 <_free_r>
 8008674:	e7e1      	b.n	800863a <_realloc_r+0x1e>
 8008676:	4635      	mov	r5, r6
 8008678:	e7df      	b.n	800863a <_realloc_r+0x1e>
	...

0800867c <_sbrk_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	2300      	movs	r3, #0
 8008680:	4d05      	ldr	r5, [pc, #20]	; (8008698 <_sbrk_r+0x1c>)
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7fa f89e 	bl	80027c8 <_sbrk>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_sbrk_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_sbrk_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	20000330 	.word	0x20000330

0800869c <__malloc_lock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_lock+0x8>)
 800869e:	f000 b811 	b.w	80086c4 <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	20000334 	.word	0x20000334

080086a8 <__malloc_unlock>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__malloc_unlock+0x8>)
 80086aa:	f000 b80c 	b.w	80086c6 <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	20000334 	.word	0x20000334

080086b4 <_malloc_usable_size_r>:
 80086b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b8:	1f18      	subs	r0, r3, #4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfbc      	itt	lt
 80086be:	580b      	ldrlt	r3, [r1, r0]
 80086c0:	18c0      	addlt	r0, r0, r3
 80086c2:	4770      	bx	lr

080086c4 <__retarget_lock_acquire_recursive>:
 80086c4:	4770      	bx	lr

080086c6 <__retarget_lock_release_recursive>:
 80086c6:	4770      	bx	lr

080086c8 <atan2>:
 80086c8:	f000 b802 	b.w	80086d0 <__ieee754_atan2>
 80086cc:	0000      	movs	r0, r0
	...

080086d0 <__ieee754_atan2>:
 80086d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	4692      	mov	sl, r2
 80086d6:	4699      	mov	r9, r3
 80086d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086dc:	461f      	mov	r7, r3
 80086de:	f1ca 0300 	rsb	r3, sl, #0
 80086e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008868 <__ieee754_atan2+0x198>
 80086e6:	ea43 030a 	orr.w	r3, r3, sl
 80086ea:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80086ee:	4573      	cmp	r3, lr
 80086f0:	4604      	mov	r4, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	d808      	bhi.n	8008708 <__ieee754_atan2+0x38>
 80086f6:	4246      	negs	r6, r0
 80086f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086fc:	4306      	orrs	r6, r0
 80086fe:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008702:	4576      	cmp	r6, lr
 8008704:	468c      	mov	ip, r1
 8008706:	d908      	bls.n	800871a <__ieee754_atan2+0x4a>
 8008708:	4652      	mov	r2, sl
 800870a:	464b      	mov	r3, r9
 800870c:	4620      	mov	r0, r4
 800870e:	4629      	mov	r1, r5
 8008710:	f7f7 fd24 	bl	800015c <__adddf3>
 8008714:	4604      	mov	r4, r0
 8008716:	460d      	mov	r5, r1
 8008718:	e019      	b.n	800874e <__ieee754_atan2+0x7e>
 800871a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800871e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008722:	ea56 060a 	orrs.w	r6, r6, sl
 8008726:	d103      	bne.n	8008730 <__ieee754_atan2+0x60>
 8008728:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	f000 b8a4 	b.w	8008878 <atan>
 8008730:	17be      	asrs	r6, r7, #30
 8008732:	f006 0602 	and.w	r6, r6, #2
 8008736:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800873a:	ea53 0100 	orrs.w	r1, r3, r0
 800873e:	d10a      	bne.n	8008756 <__ieee754_atan2+0x86>
 8008740:	2e02      	cmp	r6, #2
 8008742:	d067      	beq.n	8008814 <__ieee754_atan2+0x144>
 8008744:	2e03      	cmp	r6, #3
 8008746:	d102      	bne.n	800874e <__ieee754_atan2+0x7e>
 8008748:	a53b      	add	r5, pc, #236	; (adr r5, 8008838 <__ieee754_atan2+0x168>)
 800874a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800874e:	4620      	mov	r0, r4
 8008750:	4629      	mov	r1, r5
 8008752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	ea52 010a 	orrs.w	r1, r2, sl
 800875a:	d106      	bne.n	800876a <__ieee754_atan2+0x9a>
 800875c:	f1bc 0f00 	cmp.w	ip, #0
 8008760:	da63      	bge.n	800882a <__ieee754_atan2+0x15a>
 8008762:	a537      	add	r5, pc, #220	; (adr r5, 8008840 <__ieee754_atan2+0x170>)
 8008764:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008768:	e7f1      	b.n	800874e <__ieee754_atan2+0x7e>
 800876a:	4572      	cmp	r2, lr
 800876c:	d10f      	bne.n	800878e <__ieee754_atan2+0xbe>
 800876e:	4293      	cmp	r3, r2
 8008770:	f106 36ff 	add.w	r6, r6, #4294967295
 8008774:	d107      	bne.n	8008786 <__ieee754_atan2+0xb6>
 8008776:	2e02      	cmp	r6, #2
 8008778:	d850      	bhi.n	800881c <__ieee754_atan2+0x14c>
 800877a:	4b3c      	ldr	r3, [pc, #240]	; (800886c <__ieee754_atan2+0x19c>)
 800877c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008780:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008784:	e7e3      	b.n	800874e <__ieee754_atan2+0x7e>
 8008786:	2e02      	cmp	r6, #2
 8008788:	d84c      	bhi.n	8008824 <__ieee754_atan2+0x154>
 800878a:	4b39      	ldr	r3, [pc, #228]	; (8008870 <__ieee754_atan2+0x1a0>)
 800878c:	e7f6      	b.n	800877c <__ieee754_atan2+0xac>
 800878e:	4573      	cmp	r3, lr
 8008790:	d0e4      	beq.n	800875c <__ieee754_atan2+0x8c>
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008798:	ea4f 5223 	mov.w	r2, r3, asr #20
 800879c:	da20      	bge.n	80087e0 <__ieee754_atan2+0x110>
 800879e:	2f00      	cmp	r7, #0
 80087a0:	da01      	bge.n	80087a6 <__ieee754_atan2+0xd6>
 80087a2:	323c      	adds	r2, #60	; 0x3c
 80087a4:	db20      	blt.n	80087e8 <__ieee754_atan2+0x118>
 80087a6:	4652      	mov	r2, sl
 80087a8:	464b      	mov	r3, r9
 80087aa:	4620      	mov	r0, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f7 ffb5 	bl	800071c <__aeabi_ddiv>
 80087b2:	f000 f9eb 	bl	8008b8c <fabs>
 80087b6:	f000 f85f 	bl	8008878 <atan>
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	2e01      	cmp	r6, #1
 80087c0:	d015      	beq.n	80087ee <__ieee754_atan2+0x11e>
 80087c2:	2e02      	cmp	r6, #2
 80087c4:	d017      	beq.n	80087f6 <__ieee754_atan2+0x126>
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	d0c1      	beq.n	800874e <__ieee754_atan2+0x7e>
 80087ca:	a31f      	add	r3, pc, #124	; (adr r3, 8008848 <__ieee754_atan2+0x178>)
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	4620      	mov	r0, r4
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f7 fcc0 	bl	8000158 <__aeabi_dsub>
 80087d8:	a31d      	add	r3, pc, #116	; (adr r3, 8008850 <__ieee754_atan2+0x180>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	e016      	b.n	800880e <__ieee754_atan2+0x13e>
 80087e0:	a51d      	add	r5, pc, #116	; (adr r5, 8008858 <__ieee754_atan2+0x188>)
 80087e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087e6:	e7ea      	b.n	80087be <__ieee754_atan2+0xee>
 80087e8:	2400      	movs	r4, #0
 80087ea:	2500      	movs	r5, #0
 80087ec:	e7e7      	b.n	80087be <__ieee754_atan2+0xee>
 80087ee:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80087f2:	461d      	mov	r5, r3
 80087f4:	e7ab      	b.n	800874e <__ieee754_atan2+0x7e>
 80087f6:	a314      	add	r3, pc, #80	; (adr r3, 8008848 <__ieee754_atan2+0x178>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f7 fcaa 	bl	8000158 <__aeabi_dsub>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	a111      	add	r1, pc, #68	; (adr r1, 8008850 <__ieee754_atan2+0x180>)
 800880a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800880e:	f7f7 fca3 	bl	8000158 <__aeabi_dsub>
 8008812:	e77f      	b.n	8008714 <__ieee754_atan2+0x44>
 8008814:	a50e      	add	r5, pc, #56	; (adr r5, 8008850 <__ieee754_atan2+0x180>)
 8008816:	e9d5 4500 	ldrd	r4, r5, [r5]
 800881a:	e798      	b.n	800874e <__ieee754_atan2+0x7e>
 800881c:	a510      	add	r5, pc, #64	; (adr r5, 8008860 <__ieee754_atan2+0x190>)
 800881e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008822:	e794      	b.n	800874e <__ieee754_atan2+0x7e>
 8008824:	2400      	movs	r4, #0
 8008826:	2500      	movs	r5, #0
 8008828:	e791      	b.n	800874e <__ieee754_atan2+0x7e>
 800882a:	a50b      	add	r5, pc, #44	; (adr r5, 8008858 <__ieee754_atan2+0x188>)
 800882c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008830:	e78d      	b.n	800874e <__ieee754_atan2+0x7e>
 8008832:	bf00      	nop
 8008834:	f3af 8000 	nop.w
 8008838:	54442d18 	.word	0x54442d18
 800883c:	c00921fb 	.word	0xc00921fb
 8008840:	54442d18 	.word	0x54442d18
 8008844:	bff921fb 	.word	0xbff921fb
 8008848:	33145c07 	.word	0x33145c07
 800884c:	3ca1a626 	.word	0x3ca1a626
 8008850:	54442d18 	.word	0x54442d18
 8008854:	400921fb 	.word	0x400921fb
 8008858:	54442d18 	.word	0x54442d18
 800885c:	3ff921fb 	.word	0x3ff921fb
 8008860:	54442d18 	.word	0x54442d18
 8008864:	3fe921fb 	.word	0x3fe921fb
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	08008c30 	.word	0x08008c30
 8008870:	08008c48 	.word	0x08008c48
 8008874:	00000000 	.word	0x00000000

08008878 <atan>:
 8008878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4bb6      	ldr	r3, [pc, #728]	; (8008b58 <atan+0x2e0>)
 800887e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008882:	429e      	cmp	r6, r3
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	468b      	mov	fp, r1
 800888a:	dd17      	ble.n	80088bc <atan+0x44>
 800888c:	4bb3      	ldr	r3, [pc, #716]	; (8008b5c <atan+0x2e4>)
 800888e:	429e      	cmp	r6, r3
 8008890:	dc01      	bgt.n	8008896 <atan+0x1e>
 8008892:	d109      	bne.n	80088a8 <atan+0x30>
 8008894:	b140      	cbz	r0, 80088a8 <atan+0x30>
 8008896:	4622      	mov	r2, r4
 8008898:	462b      	mov	r3, r5
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fc5d 	bl	800015c <__adddf3>
 80088a2:	4604      	mov	r4, r0
 80088a4:	460d      	mov	r5, r1
 80088a6:	e005      	b.n	80088b4 <atan+0x3c>
 80088a8:	f1bb 0f00 	cmp.w	fp, #0
 80088ac:	4cac      	ldr	r4, [pc, #688]	; (8008b60 <atan+0x2e8>)
 80088ae:	f300 8121 	bgt.w	8008af4 <atan+0x27c>
 80088b2:	4dac      	ldr	r5, [pc, #688]	; (8008b64 <atan+0x2ec>)
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	4baa      	ldr	r3, [pc, #680]	; (8008b68 <atan+0x2f0>)
 80088be:	429e      	cmp	r6, r3
 80088c0:	dc11      	bgt.n	80088e6 <atan+0x6e>
 80088c2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80088c6:	429e      	cmp	r6, r3
 80088c8:	dc0a      	bgt.n	80088e0 <atan+0x68>
 80088ca:	a38b      	add	r3, pc, #556	; (adr r3, 8008af8 <atan+0x280>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fc44 	bl	800015c <__adddf3>
 80088d4:	2200      	movs	r2, #0
 80088d6:	4ba5      	ldr	r3, [pc, #660]	; (8008b6c <atan+0x2f4>)
 80088d8:	f7f8 f886 	bl	80009e8 <__aeabi_dcmpgt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d1e9      	bne.n	80088b4 <atan+0x3c>
 80088e0:	f04f 3aff 	mov.w	sl, #4294967295
 80088e4:	e027      	b.n	8008936 <atan+0xbe>
 80088e6:	f000 f951 	bl	8008b8c <fabs>
 80088ea:	4ba1      	ldr	r3, [pc, #644]	; (8008b70 <atan+0x2f8>)
 80088ec:	4604      	mov	r4, r0
 80088ee:	429e      	cmp	r6, r3
 80088f0:	460d      	mov	r5, r1
 80088f2:	f300 80b8 	bgt.w	8008a66 <atan+0x1ee>
 80088f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80088fa:	429e      	cmp	r6, r3
 80088fc:	f300 809c 	bgt.w	8008a38 <atan+0x1c0>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	f7f7 fc2a 	bl	800015c <__adddf3>
 8008908:	2200      	movs	r2, #0
 800890a:	4b98      	ldr	r3, [pc, #608]	; (8008b6c <atan+0x2f4>)
 800890c:	f7f7 fc24 	bl	8000158 <__aeabi_dsub>
 8008910:	2200      	movs	r2, #0
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800891a:	4620      	mov	r0, r4
 800891c:	4629      	mov	r1, r5
 800891e:	f7f7 fc1d 	bl	800015c <__adddf3>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4630      	mov	r0, r6
 8008928:	4639      	mov	r1, r7
 800892a:	f7f7 fef7 	bl	800071c <__aeabi_ddiv>
 800892e:	f04f 0a00 	mov.w	sl, #0
 8008932:	4604      	mov	r4, r0
 8008934:	460d      	mov	r5, r1
 8008936:	4622      	mov	r2, r4
 8008938:	462b      	mov	r3, r5
 800893a:	4620      	mov	r0, r4
 800893c:	4629      	mov	r1, r5
 800893e:	f7f7 fdc3 	bl	80004c8 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4680      	mov	r8, r0
 8008948:	4689      	mov	r9, r1
 800894a:	f7f7 fdbd 	bl	80004c8 <__aeabi_dmul>
 800894e:	a36c      	add	r3, pc, #432	; (adr r3, 8008b00 <atan+0x288>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	4606      	mov	r6, r0
 8008956:	460f      	mov	r7, r1
 8008958:	f7f7 fdb6 	bl	80004c8 <__aeabi_dmul>
 800895c:	a36a      	add	r3, pc, #424	; (adr r3, 8008b08 <atan+0x290>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fbfb 	bl	800015c <__adddf3>
 8008966:	4632      	mov	r2, r6
 8008968:	463b      	mov	r3, r7
 800896a:	f7f7 fdad 	bl	80004c8 <__aeabi_dmul>
 800896e:	a368      	add	r3, pc, #416	; (adr r3, 8008b10 <atan+0x298>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fbf2 	bl	800015c <__adddf3>
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	f7f7 fda4 	bl	80004c8 <__aeabi_dmul>
 8008980:	a365      	add	r3, pc, #404	; (adr r3, 8008b18 <atan+0x2a0>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fbe9 	bl	800015c <__adddf3>
 800898a:	4632      	mov	r2, r6
 800898c:	463b      	mov	r3, r7
 800898e:	f7f7 fd9b 	bl	80004c8 <__aeabi_dmul>
 8008992:	a363      	add	r3, pc, #396	; (adr r3, 8008b20 <atan+0x2a8>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fbe0 	bl	800015c <__adddf3>
 800899c:	4632      	mov	r2, r6
 800899e:	463b      	mov	r3, r7
 80089a0:	f7f7 fd92 	bl	80004c8 <__aeabi_dmul>
 80089a4:	a360      	add	r3, pc, #384	; (adr r3, 8008b28 <atan+0x2b0>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fbd7 	bl	800015c <__adddf3>
 80089ae:	4642      	mov	r2, r8
 80089b0:	464b      	mov	r3, r9
 80089b2:	f7f7 fd89 	bl	80004c8 <__aeabi_dmul>
 80089b6:	a35e      	add	r3, pc, #376	; (adr r3, 8008b30 <atan+0x2b8>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	4680      	mov	r8, r0
 80089be:	4689      	mov	r9, r1
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f7 fd80 	bl	80004c8 <__aeabi_dmul>
 80089c8:	a35b      	add	r3, pc, #364	; (adr r3, 8008b38 <atan+0x2c0>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fbc3 	bl	8000158 <__aeabi_dsub>
 80089d2:	4632      	mov	r2, r6
 80089d4:	463b      	mov	r3, r7
 80089d6:	f7f7 fd77 	bl	80004c8 <__aeabi_dmul>
 80089da:	a359      	add	r3, pc, #356	; (adr r3, 8008b40 <atan+0x2c8>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fbba 	bl	8000158 <__aeabi_dsub>
 80089e4:	4632      	mov	r2, r6
 80089e6:	463b      	mov	r3, r7
 80089e8:	f7f7 fd6e 	bl	80004c8 <__aeabi_dmul>
 80089ec:	a356      	add	r3, pc, #344	; (adr r3, 8008b48 <atan+0x2d0>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fbb1 	bl	8000158 <__aeabi_dsub>
 80089f6:	4632      	mov	r2, r6
 80089f8:	463b      	mov	r3, r7
 80089fa:	f7f7 fd65 	bl	80004c8 <__aeabi_dmul>
 80089fe:	a354      	add	r3, pc, #336	; (adr r3, 8008b50 <atan+0x2d8>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f7f7 fba8 	bl	8000158 <__aeabi_dsub>
 8008a08:	4632      	mov	r2, r6
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	f7f7 fd5c 	bl	80004c8 <__aeabi_dmul>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	f7f7 fba0 	bl	800015c <__adddf3>
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	462b      	mov	r3, r5
 8008a20:	f7f7 fd52 	bl	80004c8 <__aeabi_dmul>
 8008a24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	d144      	bne.n	8008ab8 <atan+0x240>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fb91 	bl	8000158 <__aeabi_dsub>
 8008a36:	e734      	b.n	80088a2 <atan+0x2a>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4b4c      	ldr	r3, [pc, #304]	; (8008b6c <atan+0x2f4>)
 8008a3c:	f7f7 fb8c 	bl	8000158 <__aeabi_dsub>
 8008a40:	2200      	movs	r2, #0
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	4b48      	ldr	r3, [pc, #288]	; (8008b6c <atan+0x2f4>)
 8008a4c:	f7f7 fb86 	bl	800015c <__adddf3>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f7 fe60 	bl	800071c <__aeabi_ddiv>
 8008a5c:	f04f 0a01 	mov.w	sl, #1
 8008a60:	4604      	mov	r4, r0
 8008a62:	460d      	mov	r5, r1
 8008a64:	e767      	b.n	8008936 <atan+0xbe>
 8008a66:	4b43      	ldr	r3, [pc, #268]	; (8008b74 <atan+0x2fc>)
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	da1a      	bge.n	8008aa2 <atan+0x22a>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4b42      	ldr	r3, [pc, #264]	; (8008b78 <atan+0x300>)
 8008a70:	f7f7 fb72 	bl	8000158 <__aeabi_dsub>
 8008a74:	2200      	movs	r2, #0
 8008a76:	4606      	mov	r6, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4b3e      	ldr	r3, [pc, #248]	; (8008b78 <atan+0x300>)
 8008a80:	f7f7 fd22 	bl	80004c8 <__aeabi_dmul>
 8008a84:	2200      	movs	r2, #0
 8008a86:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <atan+0x2f4>)
 8008a88:	f7f7 fb68 	bl	800015c <__adddf3>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f7 fe42 	bl	800071c <__aeabi_ddiv>
 8008a98:	f04f 0a02 	mov.w	sl, #2
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	e749      	b.n	8008936 <atan+0xbe>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	4934      	ldr	r1, [pc, #208]	; (8008b7c <atan+0x304>)
 8008aaa:	f7f7 fe37 	bl	800071c <__aeabi_ddiv>
 8008aae:	f04f 0a03 	mov.w	sl, #3
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	e73e      	b.n	8008936 <atan+0xbe>
 8008ab8:	4b31      	ldr	r3, [pc, #196]	; (8008b80 <atan+0x308>)
 8008aba:	4e32      	ldr	r6, [pc, #200]	; (8008b84 <atan+0x30c>)
 8008abc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008ac0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008ac4:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ac8:	f7f7 fb46 	bl	8000158 <__aeabi_dsub>
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f7f7 fb42 	bl	8000158 <__aeabi_dsub>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008adc:	f7f7 fb3c 	bl	8000158 <__aeabi_dsub>
 8008ae0:	f1bb 0f00 	cmp.w	fp, #0
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	460d      	mov	r5, r1
 8008ae8:	f6bf aee4 	bge.w	80088b4 <atan+0x3c>
 8008aec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008af0:	461d      	mov	r5, r3
 8008af2:	e6df      	b.n	80088b4 <atan+0x3c>
 8008af4:	4d24      	ldr	r5, [pc, #144]	; (8008b88 <atan+0x310>)
 8008af6:	e6dd      	b.n	80088b4 <atan+0x3c>
 8008af8:	8800759c 	.word	0x8800759c
 8008afc:	7e37e43c 	.word	0x7e37e43c
 8008b00:	e322da11 	.word	0xe322da11
 8008b04:	3f90ad3a 	.word	0x3f90ad3a
 8008b08:	24760deb 	.word	0x24760deb
 8008b0c:	3fa97b4b 	.word	0x3fa97b4b
 8008b10:	a0d03d51 	.word	0xa0d03d51
 8008b14:	3fb10d66 	.word	0x3fb10d66
 8008b18:	c54c206e 	.word	0xc54c206e
 8008b1c:	3fb745cd 	.word	0x3fb745cd
 8008b20:	920083ff 	.word	0x920083ff
 8008b24:	3fc24924 	.word	0x3fc24924
 8008b28:	5555550d 	.word	0x5555550d
 8008b2c:	3fd55555 	.word	0x3fd55555
 8008b30:	2c6a6c2f 	.word	0x2c6a6c2f
 8008b34:	bfa2b444 	.word	0xbfa2b444
 8008b38:	52defd9a 	.word	0x52defd9a
 8008b3c:	3fadde2d 	.word	0x3fadde2d
 8008b40:	af749a6d 	.word	0xaf749a6d
 8008b44:	3fb3b0f2 	.word	0x3fb3b0f2
 8008b48:	fe231671 	.word	0xfe231671
 8008b4c:	3fbc71c6 	.word	0x3fbc71c6
 8008b50:	9998ebc4 	.word	0x9998ebc4
 8008b54:	3fc99999 	.word	0x3fc99999
 8008b58:	440fffff 	.word	0x440fffff
 8008b5c:	7ff00000 	.word	0x7ff00000
 8008b60:	54442d18 	.word	0x54442d18
 8008b64:	bff921fb 	.word	0xbff921fb
 8008b68:	3fdbffff 	.word	0x3fdbffff
 8008b6c:	3ff00000 	.word	0x3ff00000
 8008b70:	3ff2ffff 	.word	0x3ff2ffff
 8008b74:	40038000 	.word	0x40038000
 8008b78:	3ff80000 	.word	0x3ff80000
 8008b7c:	bff00000 	.word	0xbff00000
 8008b80:	08008c80 	.word	0x08008c80
 8008b84:	08008c60 	.word	0x08008c60
 8008b88:	3ff921fb 	.word	0x3ff921fb

08008b8c <fabs>:
 8008b8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008b90:	4770      	bx	lr
	...

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr
