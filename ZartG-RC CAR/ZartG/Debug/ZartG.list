
ZartG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08007118  08007118  00017118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007728  08007728  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007728  08007728  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007728  08007728  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007730  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000080  080077b0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080077b0  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010972  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238e  00000000  00000000  00030a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00032db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187fb  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a22  00000000  00000000  0004d93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edc4  00000000  00000000  0006035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  000ef174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080070fc 	.word	0x080070fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080070fc 	.word	0x080070fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fmul>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d06f      	beq.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ce0:	441a      	add	r2, r3
 8000ce2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce6:	0240      	lsls	r0, r0, #9
 8000ce8:	bf18      	it	ne
 8000cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cee:	d01e      	beq.n	8000d2e <__aeabi_fmul+0x66>
 8000cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d08:	bf3e      	ittt	cc
 8000d0a:	0049      	lslcc	r1, r1, #1
 8000d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	ea40 0001 	orr.w	r0, r0, r1
 8000d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1a:	2afd      	cmp	r2, #253	; 0xfd
 8000d1c:	d81d      	bhi.n	8000d5a <__aeabi_fmul+0x92>
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d36:	bf08      	it	eq
 8000d38:	0249      	lsleq	r1, r1, #9
 8000d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d42:	3a7f      	subs	r2, #127	; 0x7f
 8000d44:	bfc2      	ittt	gt
 8000d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4e:	4770      	bxgt	lr
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	dc5d      	bgt.n	8000e18 <__aeabi_fmul+0x150>
 8000d5c:	f112 0f19 	cmn.w	r2, #25
 8000d60:	bfdc      	itt	le
 8000d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d66:	4770      	bxle	lr
 8000d68:	f1c2 0200 	rsb	r2, r2, #0
 8000d6c:	0041      	lsls	r1, r0, #1
 8000d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d72:	f1c2 0220 	rsb	r2, r2, #32
 8000d76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7e:	f140 0000 	adc.w	r0, r0, #0
 8000d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d86:	bf08      	it	eq
 8000d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8c:	4770      	bx	lr
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xce>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xe6>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e78f      	b.n	8000ce0 <__aeabi_fmul+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	bf18      	it	ne
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d00a      	beq.n	8000de6 <__aeabi_fmul+0x11e>
 8000dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd4:	bf18      	it	ne
 8000dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	d1d8      	bne.n	8000d8e <__aeabi_fmul+0xc6>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	bf17      	itett	ne
 8000dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df0:	4608      	moveq	r0, r1
 8000df2:	f091 0f00 	teqne	r1, #0
 8000df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfa:	d014      	beq.n	8000e26 <__aeabi_fmul+0x15e>
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d101      	bne.n	8000e06 <__aeabi_fmul+0x13e>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d10f      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e06:	ea93 0f0c 	teq	r3, ip
 8000e0a:	d103      	bne.n	8000e14 <__aeabi_fmul+0x14c>
 8000e0c:	024b      	lsls	r3, r1, #9
 8000e0e:	bf18      	it	ne
 8000e10:	4608      	movne	r0, r1
 8000e12:	d108      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bx	lr
 8000e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fdiv>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d069      	beq.n	8000f1c <__aeabi_fdiv+0xec>
 8000e48:	eba2 0203 	sub.w	r2, r2, r3
 8000e4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e56:	d037      	beq.n	8000ec8 <__aeabi_fdiv+0x98>
 8000e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf38      	it	cc
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf24      	itt	cs
 8000e7a:	1a5b      	subcs	r3, r3, r1
 8000e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e92:	bf24      	itt	cs
 8000e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb2:	d1e0      	bne.n	8000e76 <__aeabi_fdiv+0x46>
 8000eb4:	2afd      	cmp	r2, #253	; 0xfd
 8000eb6:	f63f af50 	bhi.w	8000d5a <__aeabi_fmul+0x92>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec0:	bf08      	it	eq
 8000ec2:	f020 0001 	biceq.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed0:	327f      	adds	r2, #127	; 0x7f
 8000ed2:	bfc2      	ittt	gt
 8000ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000edc:	4770      	bxgt	lr
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fmul+0x92>
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xc2>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xda>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e795      	b.n	8000e48 <__aeabi_fdiv+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d108      	bne.n	8000f38 <__aeabi_fdiv+0x108>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	f47f af7d 	bne.w	8000e26 <__aeabi_fmul+0x15e>
 8000f2c:	ea93 0f0c 	teq	r3, ip
 8000f30:	f47f af70 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e776      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_fdiv+0x118>
 8000f3e:	024b      	lsls	r3, r1, #9
 8000f40:	f43f af4c 	beq.w	8000ddc <__aeabi_fmul+0x114>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e76e      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f4c:	bf18      	it	ne
 8000f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f52:	d1ca      	bne.n	8000eea <__aeabi_fdiv+0xba>
 8000f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f58:	f47f af5c 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f60:	f47f af3c 	bne.w	8000ddc <__aeabi_fmul+0x114>
 8000f64:	e75f      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f66:	bf00      	nop

08000f68 <__aeabi_f2iz>:
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f70:	d30f      	bcc.n	8000f92 <__aeabi_f2iz+0x2a>
 8000f72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7a:	d90d      	bls.n	8000f98 <__aeabi_f2iz+0x30>
 8000f7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f88:	fa23 f002 	lsr.w	r0, r3, r2
 8000f8c:	bf18      	it	ne
 8000f8e:	4240      	negne	r0, r0
 8000f90:	4770      	bx	lr
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	4770      	bx	lr
 8000f98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_f2iz+0x3a>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d105      	bne.n	8000fae <__aeabi_f2iz+0x46>
 8000fa2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fa6:	bf08      	it	eq
 8000fa8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_f2uiz>:
 8000fb4:	0042      	lsls	r2, r0, #1
 8000fb6:	d20e      	bcs.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fbc:	d30b      	bcc.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc6:	d409      	bmi.n	8000fdc <__aeabi_f2uiz+0x28>
 8000fc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd4:	4770      	bx	lr
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	4770      	bx	lr
 8000fdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe0:	d101      	bne.n	8000fe6 <__aeabi_f2uiz+0x32>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	d102      	bne.n	8000fec <__aeabi_f2uiz+0x38>
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fea:	4770      	bx	lr
 8000fec:	f04f 0000 	mov.w	r0, #0
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <NRF24_DelayMicroSeconds+0x38>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <NRF24_DelayMicroSeconds+0x3c>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9a      	lsrs	r2, r3, #18
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001014:	bf00      	nop
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	60fa      	str	r2, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1fa      	bne.n	8001016 <NRF24_DelayMicroSeconds+0x22>
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000010 	.word	0x20000010
 8001030:	165e9f81 	.word	0x165e9f81

08001034 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <NRF24_csn+0x20>
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <NRF24_csn+0x38>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <NRF24_csn+0x3c>)
 8001048:	8811      	ldrh	r1, [r2, #0]
 800104a:	2201      	movs	r2, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f9f3 	bl	8003438 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001052:	e007      	b.n	8001064 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <NRF24_csn+0x38>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <NRF24_csn+0x3c>)
 800105a:	8811      	ldrh	r1, [r2, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 f9ea 	bl	8003438 <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000a4 	.word	0x200000a4
 8001070:	200000a8 	.word	0x200000a8

08001074 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d008      	beq.n	8001094 <NRF24_ce+0x20>
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <NRF24_ce+0x38>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <NRF24_ce+0x3c>)
 8001088:	8811      	ldrh	r1, [r2, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f002 f9d3 	bl	8003438 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001092:	e007      	b.n	80010a4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <NRF24_ce+0x38>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <NRF24_ce+0x3c>)
 800109a:	8811      	ldrh	r1, [r2, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 f9ca 	bl	8003438 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000a4 	.word	0x200000a4
 80010b0:	200000aa 	.word	0x200000aa

080010b4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ffb8 	bl	8001034 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010ce:	f107 010c 	add.w	r1, r7, #12
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	2201      	movs	r2, #1
 80010d6:	480a      	ldr	r0, [pc, #40]	; (8001100 <NRF24_read_register+0x4c>)
 80010d8:	f003 fe64 	bl	8004da4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	1c59      	adds	r1, r3, #1
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	2201      	movs	r2, #1
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <NRF24_read_register+0x4c>)
 80010e8:	f003 ff98 	bl	800501c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ff9f 	bl	8001034 <NRF24_csn>
	return retData;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000ac 	.word	0x200000ac

08001104 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff8d 	bl	8001034 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	b2db      	uxtb	r3, r3
 8001122:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001124:	f107 010c 	add.w	r1, r7, #12
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	2201      	movs	r2, #1
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <NRF24_read_registerN+0x4c>)
 800112e:	f003 fe39 	bl	8004da4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <NRF24_read_registerN+0x4c>)
 800113c:	f003 ff6e 	bl	800501c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ff77 	bl	8001034 <NRF24_csn>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000ac 	.word	0x200000ac

08001154 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff65 	bl	8001034 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	b2db      	uxtb	r3, r3
 8001172:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001178:	f107 010c 	add.w	r1, r7, #12
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	2202      	movs	r2, #2
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <NRF24_write_register+0x40>)
 8001182:	f003 fe0f 	bl	8004da4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff ff54 	bl	8001034 <NRF24_csn>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000ac 	.word	0x200000ac

08001198 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff43 	bl	8001034 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011b8:	f107 010c 	add.w	r1, r7, #12
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	2201      	movs	r2, #1
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <NRF24_write_registerN+0x4c>)
 80011c2:	f003 fdef 	bl	8004da4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	2364      	movs	r3, #100	; 0x64
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <NRF24_write_registerN+0x4c>)
 80011d0:	f003 fde8 	bl	8004da4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff ff2d 	bl	8001034 <NRF24_csn>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000ac 	.word	0x200000ac

080011e8 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ff1d 	bl	8001034 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80011fe:	f107 010f 	add.w	r1, r7, #15
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	2201      	movs	r2, #1
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <NRF24_write_payload+0x40>)
 8001208:	f003 fdcc 	bl	8004da4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	b29a      	uxth	r2, r3
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <NRF24_write_payload+0x40>)
 8001216:	f003 fdc5 	bl	8004da4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff ff0a 	bl	8001034 <NRF24_csn>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200000ac 	.word	0x200000ac

0800122c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001230:	21ff      	movs	r1, #255	; 0xff
 8001232:	20e1      	movs	r0, #225	; 0xe1
 8001234:	f7ff ff8e 	bl	8001154 <NRF24_write_register>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001240:	21ff      	movs	r1, #255	; 0xff
 8001242:	20e2      	movs	r0, #226	; 0xe2
 8001244:	f7ff ff86 	bl	8001154 <NRF24_write_register>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001252:	2007      	movs	r0, #7
 8001254:	f7ff ff2e 	bl	80010b4 <NRF24_read_register>
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800125c:	79fb      	ldrb	r3, [r7, #7]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001268:	b082      	sub	sp, #8
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <NRF24_begin+0x1b0>)
 800127e:	4618      	mov	r0, r3
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	2258      	movs	r2, #88	; 0x58
 8001286:	4619      	mov	r1, r3
 8001288:	f005 f850 	bl	800632c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800128c:	4a63      	ldr	r2, [pc, #396]	; (800141c <NRF24_begin+0x1b4>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001292:	4a63      	ldr	r2, [pc, #396]	; (8001420 <NRF24_begin+0x1b8>)
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001298:	4a62      	ldr	r2, [pc, #392]	; (8001424 <NRF24_begin+0x1bc>)
 800129a:	883b      	ldrh	r3, [r7, #0]
 800129c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fec8 	bl	8001034 <NRF24_csn>
	NRF24_ce(0);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fee5 	bl	8001074 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f001 fe0e 	bl	8002ecc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80012b0:	2108      	movs	r1, #8
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ff4e 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80012b8:	213f      	movs	r1, #63	; 0x3f
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff ff4a 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80012c0:	2103      	movs	r1, #3
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff ff46 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80012c8:	2103      	movs	r1, #3
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff ff42 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80012d0:	2103      	movs	r1, #3
 80012d2:	2004      	movs	r0, #4
 80012d4:	f7ff ff3e 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80012d8:	2102      	movs	r1, #2
 80012da:	2005      	movs	r0, #5
 80012dc:	f7ff ff3a 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80012e0:	210f      	movs	r1, #15
 80012e2:	2006      	movs	r0, #6
 80012e4:	f7ff ff36 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80012e8:	210e      	movs	r1, #14
 80012ea:	2007      	movs	r0, #7
 80012ec:	f7ff ff32 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2008      	movs	r0, #8
 80012f4:	f7ff ff2e 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2009      	movs	r0, #9
 80012fc:	f7ff ff2a 	bl	8001154 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001300:	23e7      	movs	r3, #231	; 0xe7
 8001302:	733b      	strb	r3, [r7, #12]
 8001304:	23e7      	movs	r3, #231	; 0xe7
 8001306:	72fb      	strb	r3, [r7, #11]
 8001308:	23e7      	movs	r3, #231	; 0xe7
 800130a:	72bb      	strb	r3, [r7, #10]
 800130c:	23e7      	movs	r3, #231	; 0xe7
 800130e:	727b      	strb	r3, [r7, #9]
 8001310:	23e7      	movs	r3, #231	; 0xe7
 8001312:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2205      	movs	r2, #5
 800131a:	4619      	mov	r1, r3
 800131c:	200a      	movs	r0, #10
 800131e:	f7ff ff3b 	bl	8001198 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001322:	23c2      	movs	r3, #194	; 0xc2
 8001324:	733b      	strb	r3, [r7, #12]
 8001326:	23c2      	movs	r3, #194	; 0xc2
 8001328:	72fb      	strb	r3, [r7, #11]
 800132a:	23c2      	movs	r3, #194	; 0xc2
 800132c:	72bb      	strb	r3, [r7, #10]
 800132e:	23c2      	movs	r3, #194	; 0xc2
 8001330:	727b      	strb	r3, [r7, #9]
 8001332:	23c2      	movs	r3, #194	; 0xc2
 8001334:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2205      	movs	r2, #5
 800133c:	4619      	mov	r1, r3
 800133e:	200b      	movs	r0, #11
 8001340:	f7ff ff2a 	bl	8001198 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001344:	21c3      	movs	r1, #195	; 0xc3
 8001346:	200c      	movs	r0, #12
 8001348:	f7ff ff04 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800134c:	21c4      	movs	r1, #196	; 0xc4
 800134e:	200d      	movs	r0, #13
 8001350:	f7ff ff00 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001354:	21c5      	movs	r1, #197	; 0xc5
 8001356:	200e      	movs	r0, #14
 8001358:	f7ff fefc 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800135c:	21c6      	movs	r1, #198	; 0xc6
 800135e:	200f      	movs	r0, #15
 8001360:	f7ff fef8 	bl	8001154 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001364:	23e7      	movs	r3, #231	; 0xe7
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	23e7      	movs	r3, #231	; 0xe7
 800136a:	72fb      	strb	r3, [r7, #11]
 800136c:	23e7      	movs	r3, #231	; 0xe7
 800136e:	72bb      	strb	r3, [r7, #10]
 8001370:	23e7      	movs	r3, #231	; 0xe7
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	23e7      	movs	r3, #231	; 0xe7
 8001376:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	2205      	movs	r2, #5
 800137e:	4619      	mov	r1, r3
 8001380:	2010      	movs	r0, #16
 8001382:	f7ff ff09 	bl	8001198 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001386:	2100      	movs	r1, #0
 8001388:	2011      	movs	r0, #17
 800138a:	f7ff fee3 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800138e:	2100      	movs	r1, #0
 8001390:	2012      	movs	r0, #18
 8001392:	f7ff fedf 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001396:	2100      	movs	r1, #0
 8001398:	2013      	movs	r0, #19
 800139a:	f7ff fedb 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800139e:	2100      	movs	r1, #0
 80013a0:	2014      	movs	r0, #20
 80013a2:	f7ff fed7 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2015      	movs	r0, #21
 80013aa:	f7ff fed3 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2016      	movs	r0, #22
 80013b2:	f7ff fecf 	bl	8001154 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80013b6:	f000 fa87 	bl	80018c8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	201c      	movs	r0, #28
 80013be:	f7ff fec9 	bl	8001154 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	201d      	movs	r0, #29
 80013c6:	f7ff fec5 	bl	8001154 <NRF24_write_register>
	printRadioSettings();
 80013ca:	f000 fa97 	bl	80018fc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80013ce:	210f      	movs	r1, #15
 80013d0:	200f      	movs	r0, #15
 80013d2:	f000 f8ad 	bl	8001530 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f925 	bl	8001626 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f95b 	bl	8001698 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f000 f99e 	bl	8001724 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80013e8:	f000 f8f0 	bl	80015cc <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80013ec:	2020      	movs	r0, #32
 80013ee:	f000 f8cf 	bl	8001590 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80013f2:	f000 fa60 	bl	80018b6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80013f6:	204c      	movs	r0, #76	; 0x4c
 80013f8:	f000 f8b5 	bl	8001566 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80013fc:	f7ff ff16 	bl	800122c <NRF24_flush_tx>
	NRF24_flush_rx();
 8001400:	f7ff ff1c 	bl	800123c <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001404:	f000 f9b6 	bl	8001774 <NRF24_powerDown>
	
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001412:	b002      	add	sp, #8
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200000ac 	.word	0x200000ac
 800141c:	200000a4 	.word	0x200000a4
 8001420:	200000a8 	.word	0x200000a8
 8001424:	200000aa 	.word	0x200000aa

08001428 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe21 	bl	8001074 <NRF24_ce>
	NRF24_flush_tx();
 8001432:	f7ff fefb 	bl	800122c <NRF24_flush_tx>
	NRF24_flush_rx();
 8001436:	f7ff ff01 	bl	800123c <NRF24_flush_rx>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800144c:	f000 fa33 	bl	80018b6 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f9cc 	bl	80017f2 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800145a:	f001 fd2d 	bl	8002eb8 <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001460:	230a      	movs	r3, #10
 8001462:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001464:	f107 030d 	add.w	r3, r7, #13
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	2008      	movs	r0, #8
 800146e:	f7ff fe49 	bl	8001104 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001472:	f7ff feeb 	bl	800124c <NRF24_get_status>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <NRF24_write+0x54>
 8001484:	f001 fd18 	bl	8002eb8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8e7      	bhi.n	8001464 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001494:	f107 010b 	add.w	r1, r7, #11
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <NRF24_write+0x90>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f9d6 	bl	8001850 <NRF24_whatHappened>
	retStatus = tx_ok;
 80014a4:	7b3b      	ldrb	r3, [r7, #12]
 80014a6:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <NRF24_write+0x90>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80014b0:	f000 f884 	bl	80015bc <NRF24_getDynamicPayloadSize>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <NRF24_write+0x94>)
 80014ba:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80014bc:	f000 f80c 	bl	80014d8 <NRF24_available>
	NRF24_flush_tx();
 80014c0:	f7ff feb4 	bl	800122c <NRF24_flush_tx>
	return retStatus;
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000009c 	.word	0x2000009c
 80014d4:	2000009d 	.word	0x2000009d

080014d8 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f958 	bl	8001792 <NRF24_availablePipe>
 80014e2:	4603      	mov	r3, r0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80014f2:	463b      	mov	r3, r7
 80014f4:	2205      	movs	r2, #5
 80014f6:	4619      	mov	r1, r3
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff fe4d 	bl	8001198 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80014fe:	463b      	mov	r3, r7
 8001500:	2205      	movs	r2, #5
 8001502:	4619      	mov	r1, r3
 8001504:	2010      	movs	r0, #16
 8001506:	f7ff fe47 	bl	8001198 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800150a:	2320      	movs	r3, #32
 800150c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <NRF24_openWritingPipe+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	4293      	cmp	r3, r2
 8001516:	bf28      	it	cs
 8001518:	4613      	movcs	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	2011      	movs	r0, #17
 8001520:	f7ff fe18 	bl	8001154 <NRF24_write_register>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000009e 	.word	0x2000009e

08001530 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	b25a      	sxtb	r2, r3
 8001546:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	b25b      	sxtb	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b25b      	sxtb	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	2004      	movs	r0, #4
 800155a:	f7ff fdfb 	bl	8001154 <NRF24_write_register>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001570:	237f      	movs	r3, #127	; 0x7f
 8001572:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4293      	cmp	r3, r2
 800157a:	bf28      	it	cs
 800157c:	4613      	movcs	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4619      	mov	r1, r3
 8001582:	2005      	movs	r0, #5
 8001584:	f7ff fde6 	bl	8001154 <NRF24_write_register>
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800159a:	2320      	movs	r3, #32
 800159c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	bf28      	it	cs
 80015a6:	4613      	movcs	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <NRF24_setPayloadSize+0x28>)
 80015ac:	701a      	strb	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	2000009e 	.word	0x2000009e

080015bc <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80015c0:	2060      	movs	r0, #96	; 0x60
 80015c2:	f7ff fd77 	bl	80010b4 <NRF24_read_register>
 80015c6:	4603      	mov	r3, r0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}

080015cc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80015d0:	201d      	movs	r0, #29
 80015d2:	f7ff fd6f 	bl	80010b4 <NRF24_read_register>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	201d      	movs	r0, #29
 80015e2:	f7ff fdb7 	bl	8001154 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80015e6:	2100      	movs	r1, #0
 80015e8:	201c      	movs	r0, #28
 80015ea:	f7ff fdb3 	bl	8001154 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80015ee:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <NRF24_disableDynamicPayloads+0x2c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000009f 	.word	0x2000009f

080015fc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800160c:	213f      	movs	r1, #63	; 0x3f
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fda0 	bl	8001154 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001614:	e003      	b.n	800161e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001616:	2100      	movs	r1, #0
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff fd9b 	bl	8001154 <NRF24_write_register>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001630:	2006      	movs	r0, #6
 8001632:	f7ff fd3f 	bl	80010b4 <NRF24_read_register>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f023 0306 	bic.w	r3, r3, #6
 8001640:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d104      	bne.n	8001652 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f043 0306 	orr.w	r3, r3, #6
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e019      	b.n	8001686 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d104      	bne.n	8001662 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e011      	b.n	8001686 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d104      	bne.n	8001672 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e009      	b.n	8001686 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d103      	bne.n	8001686 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	f043 0306 	orr.w	r3, r3, #6
 8001684:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4619      	mov	r1, r3
 800168a:	2006      	movs	r0, #6
 800168c:	f7ff fd62 	bl	8001154 <NRF24_write_register>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016a6:	2006      	movs	r0, #6
 80016a8:	f7ff fd04 	bl	80010b4 <NRF24_read_register>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <NRF24_setDataRate+0x88>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80016b6:	7bbb      	ldrb	r3, [r7, #14]
 80016b8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80016bc:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d107      	bne.n	80016d4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <NRF24_setDataRate+0x88>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	73bb      	strb	r3, [r7, #14]
 80016d2:	e00d      	b.n	80016f0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <NRF24_setDataRate+0x88>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	73bb      	strb	r3, [r7, #14]
 80016e8:	e002      	b.n	80016f0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <NRF24_setDataRate+0x88>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
 80016f2:	4619      	mov	r1, r3
 80016f4:	2006      	movs	r0, #6
 80016f6:	f7ff fd2d 	bl	8001154 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80016fa:	2006      	movs	r0, #6
 80016fc:	f7ff fcda 	bl	80010b4 <NRF24_read_register>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	4293      	cmp	r3, r2
 8001708:	d102      	bne.n	8001710 <NRF24_setDataRate+0x78>
  {
    result = true;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e002      	b.n	8001716 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <NRF24_setDataRate+0x88>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200000a0 	.word	0x200000a0

08001724 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fcc0 	bl	80010b4 <NRF24_read_register>
 8001734:	4603      	mov	r3, r0
 8001736:	f023 030c 	bic.w	r3, r3, #12
 800173a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00f      	beq.n	8001762 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d104      	bne.n	8001752 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e007      	b.n	8001762 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	4619      	mov	r1, r3
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fcf4 	bl	8001154 <NRF24_write_register>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fc9b 	bl	80010b4 <NRF24_read_register>
 800177e:	4603      	mov	r3, r0
 8001780:	f023 0302 	bic.w	r3, r3, #2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fce3 	bl	8001154 <NRF24_write_register>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}

08001792 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800179a:	f7ff fd57 	bl	800124c <NRF24_get_status>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	73bb      	strb	r3, [r7, #14]

  if (result)
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d017      	beq.n	80017e8 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	2007      	movs	r0, #7
 80017d2:	f7ff fcbf 	bl	8001154 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80017e0:	2120      	movs	r1, #32
 80017e2:	2007      	movs	r0, #7
 80017e4:	f7ff fcb6 	bl	8001154 <NRF24_write_register>
    }
  }
  return result;
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc38 	bl	8001074 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fc55 	bl	80010b4 <NRF24_read_register>
 800180a:	4603      	mov	r3, r0
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fc9a 	bl	8001154 <NRF24_write_register>
  NRF24_ce(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff fc27 	bl	8001074 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001826:	2096      	movs	r0, #150	; 0x96
 8001828:	f7ff fbe4 	bl	8000ff4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fcd9 	bl	80011e8 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff fc1c 	bl	8001074 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800183c:	200f      	movs	r0, #15
 800183e:	f7ff fbd9 	bl	8000ff4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff fc16 	bl	8001074 <NRF24_ce>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 800185c:	f7ff fcf6 	bl	800124c <NRF24_get_status>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800186a:	2170      	movs	r1, #112	; 0x70
 800186c:	2007      	movs	r0, #7
 800186e:	f7ff fc71 	bl	8001154 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2da      	uxtb	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80018ba:	2170      	movs	r1, #112	; 0x70
 80018bc:	2007      	movs	r0, #7
 80018be:	f7ff fc49 	bl	8001154 <NRF24_write_register>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fbb0 	bl	8001034 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80018d4:	2350      	movs	r3, #80	; 0x50
 80018d6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80018d8:	2373      	movs	r3, #115	; 0x73
 80018da:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80018dc:	1d39      	adds	r1, r7, #4
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	2202      	movs	r2, #2
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <NRF24_ACTIVATE_cmd+0x30>)
 80018e4:	f003 fa5e 	bl	8004da4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f7ff fba3 	bl	8001034 <NRF24_csn>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200000ac 	.word	0x200000ac

080018fc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	b0a1      	sub	sp, #132	; 0x84
 8001900:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	49c3      	ldr	r1, [pc, #780]	; (8001c14 <printRadioSettings+0x318>)
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fd25 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fc1c 	bl	8000150 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	f107 0108 	add.w	r1, r7, #8
 8001920:	230a      	movs	r3, #10
 8001922:	48bd      	ldr	r0, [pc, #756]	; (8001c18 <printRadioSettings+0x31c>)
 8001924:	f004 fb6d 	bl	8006002 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fbc3 	bl	80010b4 <NRF24_read_register>
 800192e:	4603      	mov	r3, r0
 8001930:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001934:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001940:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <printRadioSettings+0x5e>
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	49b2      	ldr	r1, [pc, #712]	; (8001c1c <printRadioSettings+0x320>)
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fd00 	bl	8006358 <siprintf>
 8001958:	e00c      	b.n	8001974 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	49b0      	ldr	r1, [pc, #704]	; (8001c20 <printRadioSettings+0x324>)
 8001960:	4618      	mov	r0, r3
 8001962:	f004 fcf9 	bl	8006358 <siprintf>
 8001966:	e005      	b.n	8001974 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	49ad      	ldr	r1, [pc, #692]	; (8001c24 <printRadioSettings+0x328>)
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fcf2 	bl	8006358 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fbe9 	bl	8000150 <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	f107 0108 	add.w	r1, r7, #8
 8001986:	230a      	movs	r3, #10
 8001988:	48a3      	ldr	r0, [pc, #652]	; (8001c18 <printRadioSettings+0x31c>)
 800198a:	f004 fb3a 	bl	8006002 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff fb90 	bl	80010b4 <NRF24_read_register>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800199a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800199e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bfcc      	ite	gt
 80019a6:	2301      	movgt	r3, #1
 80019a8:	2300      	movle	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019b2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bfcc      	ite	gt
 80019ba:	2301      	movgt	r3, #1
 80019bc:	2300      	movle	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019c6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bfcc      	ite	gt
 80019ce:	2301      	movgt	r3, #1
 80019d0:	2300      	movle	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019da:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bfcc      	ite	gt
 80019e2:	2301      	movgt	r3, #1
 80019e4:	2300      	movle	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ee:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bfcc      	ite	gt
 80019f6:	2301      	movgt	r3, #1
 80019f8:	2300      	movle	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a02:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bfcc      	ite	gt
 8001a0a:	2301      	movgt	r3, #1
 8001a0c:	2300      	movle	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f107 0008 	add.w	r0, r7, #8
 8001a14:	9303      	str	r3, [sp, #12]
 8001a16:	9402      	str	r4, [sp, #8]
 8001a18:	9101      	str	r1, [sp, #4]
 8001a1a:	9200      	str	r2, [sp, #0]
 8001a1c:	4633      	mov	r3, r6
 8001a1e:	462a      	mov	r2, r5
 8001a20:	4981      	ldr	r1, [pc, #516]	; (8001c28 <printRadioSettings+0x32c>)
 8001a22:	f004 fc99 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fb90 	bl	8000150 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f107 0108 	add.w	r1, r7, #8
 8001a38:	230a      	movs	r3, #10
 8001a3a:	4877      	ldr	r0, [pc, #476]	; (8001c18 <printRadioSettings+0x31c>)
 8001a3c:	f004 fae1 	bl	8006002 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f7ff fb37 	bl	80010b4 <NRF24_read_register>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a50:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bfcc      	ite	gt
 8001a58:	2301      	movgt	r3, #1
 8001a5a:	2300      	movle	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a64:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bfcc      	ite	gt
 8001a6c:	2301      	movgt	r3, #1
 8001a6e:	2300      	movle	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a78:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bfcc      	ite	gt
 8001a80:	2301      	movgt	r3, #1
 8001a82:	2300      	movle	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bfcc      	ite	gt
 8001a94:	2301      	movgt	r3, #1
 8001a96:	2300      	movle	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aa0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bfcc      	ite	gt
 8001aa8:	2301      	movgt	r3, #1
 8001aaa:	2300      	movle	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bfcc      	ite	gt
 8001abc:	2301      	movgt	r3, #1
 8001abe:	2300      	movle	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f107 0008 	add.w	r0, r7, #8
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	9402      	str	r4, [sp, #8]
 8001aca:	9101      	str	r1, [sp, #4]
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	4633      	mov	r3, r6
 8001ad0:	462a      	mov	r2, r5
 8001ad2:	4956      	ldr	r1, [pc, #344]	; (8001c2c <printRadioSettings+0x330>)
 8001ad4:	f004 fc40 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fb37 	bl	8000150 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f107 0108 	add.w	r1, r7, #8
 8001aea:	230a      	movs	r3, #10
 8001aec:	484a      	ldr	r0, [pc, #296]	; (8001c18 <printRadioSettings+0x31c>)
 8001aee:	f004 fa88 	bl	8006002 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001af2:	2003      	movs	r0, #3
 8001af4:	f7ff fade 	bl	80010b4 <NRF24_read_register>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001b02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b06:	3302      	adds	r3, #2
 8001b08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001b0c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4946      	ldr	r1, [pc, #280]	; (8001c30 <printRadioSettings+0x334>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fc1e 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb15 	bl	8000150 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f107 0108 	add.w	r1, r7, #8
 8001b2e:	230a      	movs	r3, #10
 8001b30:	4839      	ldr	r0, [pc, #228]	; (8001c18 <printRadioSettings+0x31c>)
 8001b32:	f004 fa66 	bl	8006002 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001b36:	2005      	movs	r0, #5
 8001b38:	f7ff fabc 	bl	80010b4 <NRF24_read_register>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4939      	ldr	r1, [pc, #228]	; (8001c34 <printRadioSettings+0x338>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fc01 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe faf8 	bl	8000150 <strlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	230a      	movs	r3, #10
 8001b6a:	482b      	ldr	r0, [pc, #172]	; (8001c18 <printRadioSettings+0x31c>)
 8001b6c:	f004 fa49 	bl	8006002 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001b70:	2006      	movs	r0, #6
 8001b72:	f7ff fa9f 	bl	80010b4 <NRF24_read_register>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001b7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <printRadioSettings+0x29a>
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	492a      	ldr	r1, [pc, #168]	; (8001c38 <printRadioSettings+0x33c>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fbe2 	bl	8006358 <siprintf>
 8001b94:	e005      	b.n	8001ba2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4928      	ldr	r1, [pc, #160]	; (8001c3c <printRadioSettings+0x340>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 fbdb 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fad2 	bl	8000150 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	f107 0108 	add.w	r1, r7, #8
 8001bb4:	230a      	movs	r3, #10
 8001bb6:	4818      	ldr	r0, [pc, #96]	; (8001c18 <printRadioSettings+0x31c>)
 8001bb8:	f004 fa23 	bl	8006002 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001bbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc0:	f003 0306 	and.w	r3, r3, #6
 8001bc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001bc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001bd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <printRadioSettings+0x2ec>
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4918      	ldr	r1, [pc, #96]	; (8001c40 <printRadioSettings+0x344>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 fbb9 	bl	8006358 <siprintf>
 8001be6:	e03b      	b.n	8001c60 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001be8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <printRadioSettings+0x302>
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4913      	ldr	r1, [pc, #76]	; (8001c44 <printRadioSettings+0x348>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 fbae 	bl	8006358 <siprintf>
 8001bfc:	e030      	b.n	8001c60 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001bfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d122      	bne.n	8001c4c <printRadioSettings+0x350>
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <printRadioSettings+0x34c>)
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 fba3 	bl	8006358 <siprintf>
 8001c12:	e025      	b.n	8001c60 <printRadioSettings+0x364>
 8001c14:	08007118 	.word	0x08007118
 8001c18:	20000104 	.word	0x20000104
 8001c1c:	0800714c 	.word	0x0800714c
 8001c20:	08007168 	.word	0x08007168
 8001c24:	08007184 	.word	0x08007184
 8001c28:	08007198 	.word	0x08007198
 8001c2c:	080071dc 	.word	0x080071dc
 8001c30:	08007228 	.word	0x08007228
 8001c34:	08007244 	.word	0x08007244
 8001c38:	08007258 	.word	0x08007258
 8001c3c:	08007270 	.word	0x08007270
 8001c40:	08007288 	.word	0x08007288
 8001c44:	0800729c 	.word	0x0800729c
 8001c48:	080072b0 	.word	0x080072b0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001c4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d105      	bne.n	8001c60 <printRadioSettings+0x364>
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	49d7      	ldr	r1, [pc, #860]	; (8001fb8 <printRadioSettings+0x6bc>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 fb7c 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fa73 	bl	8000150 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	f107 0108 	add.w	r1, r7, #8
 8001c72:	230a      	movs	r3, #10
 8001c74:	48d1      	ldr	r0, [pc, #836]	; (8001fbc <printRadioSettings+0x6c0>)
 8001c76:	f004 f9c4 	bl	8006002 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	4619      	mov	r1, r3
 8001c80:	200a      	movs	r0, #10
 8001c82:	f7ff fa3f 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c86:	793b      	ldrb	r3, [r7, #4]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	78bb      	ldrb	r3, [r7, #2]
 8001c90:	787a      	ldrb	r2, [r7, #1]
 8001c92:	7839      	ldrb	r1, [r7, #0]
 8001c94:	f107 0008 	add.w	r0, r7, #8
 8001c98:	9102      	str	r1, [sp, #8]
 8001c9a:	9201      	str	r2, [sp, #4]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	49c7      	ldr	r1, [pc, #796]	; (8001fc0 <printRadioSettings+0x6c4>)
 8001ca4:	f004 fb58 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fa4f 	bl	8000150 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f107 0108 	add.w	r1, r7, #8
 8001cba:	230a      	movs	r3, #10
 8001cbc:	48bf      	ldr	r0, [pc, #764]	; (8001fbc <printRadioSettings+0x6c0>)
 8001cbe:	f004 f9a0 	bl	8006002 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	200b      	movs	r0, #11
 8001cca:	f7ff fa1b 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001cce:	793b      	ldrb	r3, [r7, #4]
 8001cd0:	461c      	mov	r4, r3
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	461d      	mov	r5, r3
 8001cd6:	78bb      	ldrb	r3, [r7, #2]
 8001cd8:	787a      	ldrb	r2, [r7, #1]
 8001cda:	7839      	ldrb	r1, [r7, #0]
 8001cdc:	f107 0008 	add.w	r0, r7, #8
 8001ce0:	9102      	str	r1, [sp, #8]
 8001ce2:	9201      	str	r2, [sp, #4]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	4622      	mov	r2, r4
 8001cea:	49b6      	ldr	r1, [pc, #728]	; (8001fc4 <printRadioSettings+0x6c8>)
 8001cec:	f004 fb34 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fa2b 	bl	8000150 <strlen>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	f107 0108 	add.w	r1, r7, #8
 8001d02:	230a      	movs	r3, #10
 8001d04:	48ad      	ldr	r0, [pc, #692]	; (8001fbc <printRadioSettings+0x6c0>)
 8001d06:	f004 f97c 	bl	8006002 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4619      	mov	r1, r3
 8001d10:	200c      	movs	r0, #12
 8001d12:	f7ff f9f7 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001d16:	783b      	ldrb	r3, [r7, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	49aa      	ldr	r1, [pc, #680]	; (8001fc8 <printRadioSettings+0x6cc>)
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fb19 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa10 	bl	8000150 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f107 0108 	add.w	r1, r7, #8
 8001d38:	230a      	movs	r3, #10
 8001d3a:	48a0      	ldr	r0, [pc, #640]	; (8001fbc <printRadioSettings+0x6c0>)
 8001d3c:	f004 f961 	bl	8006002 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001d40:	463b      	mov	r3, r7
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	200d      	movs	r0, #13
 8001d48:	f7ff f9dc 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001d4c:	783b      	ldrb	r3, [r7, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	499d      	ldr	r1, [pc, #628]	; (8001fcc <printRadioSettings+0x6d0>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fafe 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe f9f5 	bl	8000150 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f107 0108 	add.w	r1, r7, #8
 8001d6e:	230a      	movs	r3, #10
 8001d70:	4892      	ldr	r0, [pc, #584]	; (8001fbc <printRadioSettings+0x6c0>)
 8001d72:	f004 f946 	bl	8006002 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001d76:	463b      	mov	r3, r7
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	200e      	movs	r0, #14
 8001d7e:	f7ff f9c1 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001d82:	783b      	ldrb	r3, [r7, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4991      	ldr	r1, [pc, #580]	; (8001fd0 <printRadioSettings+0x6d4>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 fae3 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe f9da 	bl	8000150 <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f107 0108 	add.w	r1, r7, #8
 8001da4:	230a      	movs	r3, #10
 8001da6:	4885      	ldr	r0, [pc, #532]	; (8001fbc <printRadioSettings+0x6c0>)
 8001da8:	f004 f92b 	bl	8006002 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001dac:	463b      	mov	r3, r7
 8001dae:	2201      	movs	r2, #1
 8001db0:	4619      	mov	r1, r3
 8001db2:	200f      	movs	r0, #15
 8001db4:	f7ff f9a6 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001db8:	783b      	ldrb	r3, [r7, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f107 0308 	add.w	r3, r7, #8
 8001dc0:	4984      	ldr	r1, [pc, #528]	; (8001fd4 <printRadioSettings+0x6d8>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 fac8 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe f9bf 	bl	8000150 <strlen>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f107 0108 	add.w	r1, r7, #8
 8001dda:	230a      	movs	r3, #10
 8001ddc:	4877      	ldr	r0, [pc, #476]	; (8001fbc <printRadioSettings+0x6c0>)
 8001dde:	f004 f910 	bl	8006002 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001de2:	463b      	mov	r3, r7
 8001de4:	2205      	movs	r2, #5
 8001de6:	4619      	mov	r1, r3
 8001de8:	2010      	movs	r0, #16
 8001dea:	f7ff f98b 	bl	8001104 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001dee:	793b      	ldrb	r3, [r7, #4]
 8001df0:	461c      	mov	r4, r3
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	461d      	mov	r5, r3
 8001df6:	78bb      	ldrb	r3, [r7, #2]
 8001df8:	787a      	ldrb	r2, [r7, #1]
 8001dfa:	7839      	ldrb	r1, [r7, #0]
 8001dfc:	f107 0008 	add.w	r0, r7, #8
 8001e00:	9102      	str	r1, [sp, #8]
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	462b      	mov	r3, r5
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4973      	ldr	r1, [pc, #460]	; (8001fd8 <printRadioSettings+0x6dc>)
 8001e0c:	f004 faa4 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f99b 	bl	8000150 <strlen>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	f107 0108 	add.w	r1, r7, #8
 8001e22:	230a      	movs	r3, #10
 8001e24:	4865      	ldr	r0, [pc, #404]	; (8001fbc <printRadioSettings+0x6c0>)
 8001e26:	f004 f8ec 	bl	8006002 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	f7ff f942 	bl	80010b4 <NRF24_read_register>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4966      	ldr	r1, [pc, #408]	; (8001fdc <printRadioSettings+0x6e0>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fa87 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe f97e 	bl	8000150 <strlen>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	f107 0108 	add.w	r1, r7, #8
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	4857      	ldr	r0, [pc, #348]	; (8001fbc <printRadioSettings+0x6c0>)
 8001e60:	f004 f8cf 	bl	8006002 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001e64:	2012      	movs	r0, #18
 8001e66:	f7ff f925 	bl	80010b4 <NRF24_read_register>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4958      	ldr	r1, [pc, #352]	; (8001fe0 <printRadioSettings+0x6e4>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fa6a 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe f961 	bl	8000150 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f107 0108 	add.w	r1, r7, #8
 8001e96:	230a      	movs	r3, #10
 8001e98:	4848      	ldr	r0, [pc, #288]	; (8001fbc <printRadioSettings+0x6c0>)
 8001e9a:	f004 f8b2 	bl	8006002 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001e9e:	2013      	movs	r0, #19
 8001ea0:	f7ff f908 	bl	80010b4 <NRF24_read_register>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001eaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	494b      	ldr	r1, [pc, #300]	; (8001fe4 <printRadioSettings+0x6e8>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fa4d 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe f944 	bl	8000150 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	f107 0108 	add.w	r1, r7, #8
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <printRadioSettings+0x6c0>)
 8001ed4:	f004 f895 	bl	8006002 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ed8:	2014      	movs	r0, #20
 8001eda:	f7ff f8eb 	bl	80010b4 <NRF24_read_register>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ee4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ee8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	493d      	ldr	r1, [pc, #244]	; (8001fe8 <printRadioSettings+0x6ec>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fa30 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe f927 	bl	8000150 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f107 0108 	add.w	r1, r7, #8
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	482b      	ldr	r0, [pc, #172]	; (8001fbc <printRadioSettings+0x6c0>)
 8001f0e:	f004 f878 	bl	8006002 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001f12:	2015      	movs	r0, #21
 8001f14:	f7ff f8ce 	bl	80010b4 <NRF24_read_register>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001f1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	4930      	ldr	r1, [pc, #192]	; (8001fec <printRadioSettings+0x6f0>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fa13 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe f90a 	bl	8000150 <strlen>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f107 0108 	add.w	r1, r7, #8
 8001f44:	230a      	movs	r3, #10
 8001f46:	481d      	ldr	r0, [pc, #116]	; (8001fbc <printRadioSettings+0x6c0>)
 8001f48:	f004 f85b 	bl	8006002 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001f4c:	2016      	movs	r0, #22
 8001f4e:	f7ff f8b1 	bl	80010b4 <NRF24_read_register>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001f58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <printRadioSettings+0x6f4>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 f9f6 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f8ed 	bl	8000150 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f107 0108 	add.w	r1, r7, #8
 8001f7e:	230a      	movs	r3, #10
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <printRadioSettings+0x6c0>)
 8001f82:	f004 f83e 	bl	8006002 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001f86:	201c      	movs	r0, #28
 8001f88:	f7ff f894 	bl	80010b4 <NRF24_read_register>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001f92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f96:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bfcc      	ite	gt
 8001f9e:	2301      	movgt	r3, #1
 8001fa0:	2300      	movle	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001faa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bfcc      	ite	gt
 8001fb2:	2301      	movgt	r3, #1
 8001fb4:	2300      	movle	r3, #0
 8001fb6:	e01d      	b.n	8001ff4 <printRadioSettings+0x6f8>
 8001fb8:	080072c4 	.word	0x080072c4
 8001fbc:	20000104 	.word	0x20000104
 8001fc0:	080072d8 	.word	0x080072d8
 8001fc4:	08007308 	.word	0x08007308
 8001fc8:	08007338 	.word	0x08007338
 8001fcc:	08007360 	.word	0x08007360
 8001fd0:	08007388 	.word	0x08007388
 8001fd4:	080073b0 	.word	0x080073b0
 8001fd8:	080073d8 	.word	0x080073d8
 8001fdc:	08007404 	.word	0x08007404
 8001fe0:	08007420 	.word	0x08007420
 8001fe4:	0800743c 	.word	0x0800743c
 8001fe8:	08007458 	.word	0x08007458
 8001fec:	08007474 	.word	0x08007474
 8001ff0:	08007490 	.word	0x08007490
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ff8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ffc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002000:	2b00      	cmp	r3, #0
 8002002:	bfcc      	ite	gt
 8002004:	2301      	movgt	r3, #1
 8002006:	2300      	movle	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800200c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002010:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002014:	2b00      	cmp	r3, #0
 8002016:	bfcc      	ite	gt
 8002018:	2301      	movgt	r3, #1
 800201a:	2300      	movle	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002020:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002024:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002028:	2b00      	cmp	r3, #0
 800202a:	bfcc      	ite	gt
 800202c:	2301      	movgt	r3, #1
 800202e:	2300      	movle	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002034:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002038:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800203c:	2b00      	cmp	r3, #0
 800203e:	bfcc      	ite	gt
 8002040:	2301      	movgt	r3, #1
 8002042:	2300      	movle	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f107 0008 	add.w	r0, r7, #8
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	9402      	str	r4, [sp, #8]
 800204e:	9101      	str	r1, [sp, #4]
 8002050:	9200      	str	r2, [sp, #0]
 8002052:	4633      	mov	r3, r6
 8002054:	462a      	mov	r2, r5
 8002056:	4936      	ldr	r1, [pc, #216]	; (8002130 <printRadioSettings+0x834>)
 8002058:	f004 f97e 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe f875 	bl	8000150 <strlen>
 8002066:	4603      	mov	r3, r0
 8002068:	b29a      	uxth	r2, r3
 800206a:	f107 0108 	add.w	r1, r7, #8
 800206e:	230a      	movs	r3, #10
 8002070:	4830      	ldr	r0, [pc, #192]	; (8002134 <printRadioSettings+0x838>)
 8002072:	f003 ffc6 	bl	8006002 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002076:	201d      	movs	r0, #29
 8002078:	f7ff f81c 	bl	80010b4 <NRF24_read_register>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002082:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <printRadioSettings+0x7a0>
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	4929      	ldr	r1, [pc, #164]	; (8002138 <printRadioSettings+0x83c>)
 8002094:	4618      	mov	r0, r3
 8002096:	f004 f95f 	bl	8006358 <siprintf>
 800209a:	e005      	b.n	80020a8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4926      	ldr	r1, [pc, #152]	; (800213c <printRadioSettings+0x840>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 f958 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f84f 	bl	8000150 <strlen>
 80020b2:	4603      	mov	r3, r0
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	f107 0108 	add.w	r1, r7, #8
 80020ba:	230a      	movs	r3, #10
 80020bc:	481d      	ldr	r0, [pc, #116]	; (8002134 <printRadioSettings+0x838>)
 80020be:	f003 ffa0 	bl	8006002 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80020c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <printRadioSettings+0x7e0>
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	491b      	ldr	r1, [pc, #108]	; (8002140 <printRadioSettings+0x844>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 f93f 	bl	8006358 <siprintf>
 80020da:	e005      	b.n	80020e8 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	4918      	ldr	r1, [pc, #96]	; (8002144 <printRadioSettings+0x848>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 f938 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f82f 	bl	8000150 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	f107 0108 	add.w	r1, r7, #8
 80020fa:	230a      	movs	r3, #10
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <printRadioSettings+0x838>)
 80020fe:	f003 ff80 	bl	8006002 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	4910      	ldr	r1, [pc, #64]	; (8002148 <printRadioSettings+0x84c>)
 8002108:	4618      	mov	r0, r3
 800210a:	f004 f925 	bl	8006358 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f81c 	bl	8000150 <strlen>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	f107 0108 	add.w	r1, r7, #8
 8002120:	230a      	movs	r3, #10
 8002122:	4804      	ldr	r0, [pc, #16]	; (8002134 <printRadioSettings+0x838>)
 8002124:	f003 ff6d 	bl	8006002 <HAL_UART_Transmit>
}
 8002128:	bf00      	nop
 800212a:	3774      	adds	r7, #116	; 0x74
 800212c:	46bd      	mov	sp, r7
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	080074ac 	.word	0x080074ac
 8002134:	20000104 	.word	0x20000104
 8002138:	080074f8 	.word	0x080074f8
 800213c:	08007510 	.word	0x08007510
 8002140:	08007528 	.word	0x08007528
 8002144:	08007544 	.word	0x08007544
 8002148:	08007118 	.word	0x08007118
 800214c:	00000000 	.word	0x00000000

08002150 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float gxx,gyy,vi,viy;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a73      	ldr	r2, [pc, #460]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f040 80cc 	bne.w	80022fa <HAL_TIM_PeriodElapsedCallback+0x1aa>
	{
		mpu_measure();
 8002162:	f000 fb97 	bl	8002894 <mpu_measure>
		float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 8002166:	4b71      	ldr	r3, [pc, #452]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f95c 	bl	8000428 <__aeabi_f2d>
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
 8002174:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f955 	bl	8000428 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f004 fd53 	bl	8006c30 <atan2>
 800218a:	a35f      	add	r3, pc, #380	; (adr r3, 8002308 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f9a2 	bl	80004d8 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fc36 	bl	8000a0c <__aeabi_d2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]
		gxx = 0.98 * (gxx + (sensorData.gx+vi) * 0.01) + (1 - 0.98) * accelPitch;
 80021a4:	4b62      	ldr	r3, [pc, #392]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f93d 	bl	8000428 <__aeabi_f2d>
 80021ae:	4604      	mov	r4, r0
 80021b0:	460d      	mov	r5, r1
 80021b2:	4b5e      	ldr	r3, [pc, #376]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a5f      	ldr	r2, [pc, #380]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fc7b 	bl	8000ab8 <__addsf3>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f92f 	bl	8000428 <__aeabi_f2d>
 80021ca:	a351      	add	r3, pc, #324	; (adr r3, 8002310 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe f982 	bl	80004d8 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fd ffc6 	bl	800016c <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	a34b      	add	r3, pc, #300	; (adr r3, 8002318 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f973 	bl	80004d8 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7fe f914 	bl	8000428 <__aeabi_f2d>
 8002200:	a347      	add	r3, pc, #284	; (adr r3, 8002320 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe f967 	bl	80004d8 <__aeabi_dmul>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fd ffab 	bl	800016c <__adddf3>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fbf5 	bl	8000a0c <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002226:	6013      	str	r3, [r2, #0]
		vi = sensorData.gx;
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a41      	ldr	r2, [pc, #260]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800222e:	6013      	str	r3, [r2, #0]
		float accelRoll = atan2(sensorData.az, sensorData.ax) * RAD2DEG;
 8002230:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f8f7 	bl	8000428 <__aeabi_f2d>
 800223a:	4604      	mov	r4, r0
 800223c:	460d      	mov	r5, r1
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f8f0 	bl	8000428 <__aeabi_f2d>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f004 fcee 	bl	8006c30 <atan2>
 8002254:	a32c      	add	r3, pc, #176	; (adr r3, 8002308 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe f93d 	bl	80004d8 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f7fe fbd1 	bl	8000a0c <__aeabi_d2f>
 800226a:	4603      	mov	r3, r0
 800226c:	60bb      	str	r3, [r7, #8]
		gyy = 0.98 * (gyy + (sensorData.gy+viy) * 0.01) + (1 - 0.98) * accelRoll;
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f8d8 	bl	8000428 <__aeabi_f2d>
 8002278:	4604      	mov	r4, r0
 800227a:	460d      	mov	r5, r1
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4a2e      	ldr	r2, [pc, #184]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fc16 	bl	8000ab8 <__addsf3>
 800228c:	4603      	mov	r3, r0
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f8ca 	bl	8000428 <__aeabi_f2d>
 8002294:	a31e      	add	r3, pc, #120	; (adr r3, 8002310 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe f91d 	bl	80004d8 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4620      	mov	r0, r4
 80022a4:	4629      	mov	r1, r5
 80022a6:	f7fd ff61 	bl	800016c <__adddf3>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	a319      	add	r3, pc, #100	; (adr r3, 8002318 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe f90e 	bl	80004d8 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4614      	mov	r4, r2
 80022c2:	461d      	mov	r5, r3
 80022c4:	68b8      	ldr	r0, [r7, #8]
 80022c6:	f7fe f8af 	bl	8000428 <__aeabi_f2d>
 80022ca:	a315      	add	r3, pc, #84	; (adr r3, 8002320 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f902 	bl	80004d8 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fd ff46 	bl	800016c <__adddf3>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fb90 	bl	8000a0c <__aeabi_d2f>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80022f0:	6013      	str	r3, [r2, #0]
		viy = sensorData.gy;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80022f8:	6013      	str	r3, [r2, #0]
	}
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bdb0      	pop	{r4, r5, r7, pc}
 8002302:	bf00      	nop
 8002304:	f3af 8000 	nop.w
 8002308:	1a63c1f8 	.word	0x1a63c1f8
 800230c:	404ca5dc 	.word	0x404ca5dc
 8002310:	47ae147b 	.word	0x47ae147b
 8002314:	3f847ae1 	.word	0x3f847ae1
 8002318:	f5c28f5c 	.word	0xf5c28f5c
 800231c:	3fef5c28 	.word	0x3fef5c28
 8002320:	47ae1480 	.word	0x47ae1480
 8002324:	3f947ae1 	.word	0x3f947ae1
 8002328:	200001f4 	.word	0x200001f4
 800232c:	20000290 	.word	0x20000290
 8002330:	200002d0 	.word	0x200002d0
 8002334:	200002d8 	.word	0x200002d8
 8002338:	200002d4 	.word	0x200002d4
 800233c:	200002dc 	.word	0x200002dc

08002340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b097      	sub	sp, #92	; 0x5c
 8002344:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002346:	f000 fd5f 	bl	8002e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234a:	f000 f875 	bl	8002438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800234e:	f000 f993 	bl	8002678 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002352:	f000 f967 	bl	8002624 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002356:	f000 f919 	bl	800258c <MX_TIM2_Init>
  MX_I2C1_Init();
 800235a:	f000 f8b3 	bl	80024c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800235e:	f000 f8df 	bl	8002520 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(beginmpu() == 1)
 8002362:	f000 f9f5 	bl	8002750 <beginmpu>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d126      	bne.n	80023ba <main+0x7a>
    {
  	  calibrate_gyro();
 800236c:	f000 fb38 	bl	80029e0 <calibrate_gyro>
  	  HAL_TIM_Base_Start_IT(&htim2);
 8002370:	4827      	ldr	r0, [pc, #156]	; (8002410 <main+0xd0>)
 8002372:	f003 fa4f 	bl	8005814 <HAL_TIM_Base_Start_IT>
  	araba.hiz =9;
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <main+0xd4>)
 8002378:	2209      	movs	r2, #9
 800237a:	609a      	str	r2, [r3, #8]
  	NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi1);
 800237c:	4c26      	ldr	r4, [pc, #152]	; (8002418 <main+0xd8>)
 800237e:	4668      	mov	r0, sp
 8002380:	1d23      	adds	r3, r4, #4
 8002382:	2254      	movs	r2, #84	; 0x54
 8002384:	4619      	mov	r1, r3
 8002386:	f003 ffd1 	bl	800632c <memcpy>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	2210      	movs	r2, #16
 800238e:	2108      	movs	r1, #8
 8002390:	4822      	ldr	r0, [pc, #136]	; (800241c <main+0xdc>)
 8002392:	f7fe ff69 	bl	8001268 <NRF24_begin>
  	  	NRF24_stopListening();
 8002396:	f7ff f847 	bl	8001428 <NRF24_stopListening>
  	  	NRF24_setPayloadSize(4);
 800239a:	2004      	movs	r0, #4
 800239c:	f7ff f8f8 	bl	8001590 <NRF24_setPayloadSize>
  	  	NRF24_openWritingPipe(TxpipeAddrs);
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <main+0xe0>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7ff f89d 	bl	80014e8 <NRF24_openWritingPipe>
  	  	NRF24_setAutoAck(false);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff f924 	bl	80015fc <NRF24_setAutoAck>
  	  	NRF24_setChannel(120);
 80023b4:	2078      	movs	r0, #120	; 0x78
 80023b6:	f7ff f8d6 	bl	8001566 <NRF24_setChannel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PAKET[0] = (int)gxx;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <main+0xe4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fdd2 	bl	8000f68 <__aeabi_f2iz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <main+0xe8>)
 80023ca:	701a      	strb	r2, [r3, #0]
	  PAKET[1] = (int)(gyy);
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <main+0xec>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fdc9 	bl	8000f68 <__aeabi_f2iz>
 80023d6:	4603      	mov	r3, r0
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <main+0xe8>)
 80023dc:	705a      	strb	r2, [r3, #1]
	  PAKET[2] = 31;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <main+0xe8>)
 80023e0:	221f      	movs	r2, #31
 80023e2:	709a      	strb	r2, [r3, #2]
	  PAKET[3] = sensorData.temp;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <main+0xf0>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fde3 	bl	8000fb4 <__aeabi_f2uiz>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <main+0xe8>)
 80023f4:	70da      	strb	r2, [r3, #3]
	  send = NRF24_write(PAKET, 4);
 80023f6:	2104      	movs	r1, #4
 80023f8:	480b      	ldr	r0, [pc, #44]	; (8002428 <main+0xe8>)
 80023fa:	f7ff f821 	bl	8001440 <NRF24_write>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <main+0xf4>)
 8002404:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(21);
 8002406:	2015      	movs	r0, #21
 8002408:	f000 fd60 	bl	8002ecc <HAL_Delay>
	  PAKET[0] = (int)gxx;
 800240c:	e7d5      	b.n	80023ba <main+0x7a>
 800240e:	bf00      	nop
 8002410:	200001f4 	.word	0x200001f4
 8002414:	200002b8 	.word	0x200002b8
 8002418:	2000019c 	.word	0x2000019c
 800241c:	40010800 	.word	0x40010800
 8002420:	20000000 	.word	0x20000000
 8002424:	200002d0 	.word	0x200002d0
 8002428:	200002c8 	.word	0x200002c8
 800242c:	200002d4 	.word	0x200002d4
 8002430:	20000290 	.word	0x20000290
 8002434:	200002cc 	.word	0x200002cc

08002438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b090      	sub	sp, #64	; 0x40
 800243c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	2228      	movs	r2, #40	; 0x28
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f003 ff7e 	bl	8006348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800245a:	2301      	movs	r3, #1
 800245c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800245e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800246c:	2302      	movs	r3, #2
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002476:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fff1 	bl	8004468 <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800248c:	f000 f93e 	bl	800270c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002490:	230f      	movs	r3, #15
 8002492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002494:	2302      	movs	r3, #2
 8002496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800249c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80024a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80024a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fa5d 	bl	800496c <HAL_RCC_ClockConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80024b8:	f000 f928 	bl	800270c <Error_Handler>
  }
}
 80024bc:	bf00      	nop
 80024be:	3740      	adds	r7, #64	; 0x40
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_I2C1_Init+0x50>)
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <MX_I2C1_Init+0x54>)
 80024cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_I2C1_Init+0x50>)
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <MX_I2C1_Init+0x58>)
 80024d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_I2C1_Init+0x50>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_I2C1_Init+0x50>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_I2C1_Init+0x50>)
 80024e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <MX_I2C1_Init+0x50>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_I2C1_Init+0x50>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <MX_I2C1_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_I2C1_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_I2C1_Init+0x50>)
 8002502:	f000 ffb1 	bl	8003468 <HAL_I2C_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800250c:	f000 f8fe 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000148 	.word	0x20000148
 8002518:	40005400 	.word	0x40005400
 800251c:	000186a0 	.word	0x000186a0

08002520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_SPI1_Init+0x64>)
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <MX_SPI1_Init+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_SPI1_Init+0x64>)
 800252c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_SPI1_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_SPI1_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <MX_SPI1_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <MX_SPI1_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_SPI1_Init+0x64>)
 800254c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <MX_SPI1_Init+0x64>)
 8002554:	2200      	movs	r2, #0
 8002556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <MX_SPI1_Init+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <MX_SPI1_Init+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <MX_SPI1_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <MX_SPI1_Init+0x64>)
 800256c:	220a      	movs	r2, #10
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <MX_SPI1_Init+0x64>)
 8002572:	f002 fb93 	bl	8004c9c <HAL_SPI_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800257c:	f000 f8c6 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000019c 	.word	0x2000019c
 8002588:	40013000 	.word	0x40013000

0800258c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	463b      	mov	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <MX_TIM2_Init+0x94>)
 80025aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <MX_TIM2_Init+0x94>)
 80025b2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80025b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <MX_TIM2_Init+0x94>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <MX_TIM2_Init+0x94>)
 80025c0:	2214      	movs	r2, #20
 80025c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <MX_TIM2_Init+0x94>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_TIM2_Init+0x94>)
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025d0:	4813      	ldr	r0, [pc, #76]	; (8002620 <MX_TIM2_Init+0x94>)
 80025d2:	f003 f8cf 	bl	8005774 <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025dc:	f000 f896 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <MX_TIM2_Init+0x94>)
 80025ee:	f003 fa6b 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025f8:	f000 f888 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025fc:	2320      	movs	r3, #32
 80025fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002604:	463b      	mov	r3, r7
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_TIM2_Init+0x94>)
 800260a:	f003 fc3d 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002614:	f000 f87a 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200001f4 	.word	0x200001f4

08002624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <MX_USART1_UART_Init+0x50>)
 800262c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800265c:	f003 fc84 	bl	8005f68 <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002666:	f000 f851 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000023c 	.word	0x2000023c
 8002674:	40013800 	.word	0x40013800

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <MX_GPIO_Init+0x8c>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <MX_GPIO_Init+0x8c>)
 8002692:	f043 0320 	orr.w	r3, r3, #32
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_GPIO_Init+0x8c>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_GPIO_Init+0x8c>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a16      	ldr	r2, [pc, #88]	; (8002704 <MX_GPIO_Init+0x8c>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <MX_GPIO_Init+0x8c>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <MX_GPIO_Init+0x8c>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a10      	ldr	r2, [pc, #64]	; (8002704 <MX_GPIO_Init+0x8c>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <MX_GPIO_Init+0x8c>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2118      	movs	r1, #24
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <MX_GPIO_Init+0x90>)
 80026da:	f000 fead 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80026de:	2318      	movs	r3, #24
 80026e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4619      	mov	r1, r3
 80026f4:	4804      	ldr	r0, [pc, #16]	; (8002708 <MX_GPIO_Init+0x90>)
 80026f6:	f000 fd1b 	bl	8003130 <HAL_GPIO_Init>

}
 80026fa:	bf00      	nop
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40010800 	.word	0x40010800

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <testDevice>:
{
    float x, y, z;
} extern gyroCal;

uint8_t testDevice()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, AD0_LOW, WHO_AM_I, 1, &data, 1, 100);
 800271e:	2364      	movs	r3, #100	; 0x64
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2301      	movs	r3, #1
 800272c:	2275      	movs	r2, #117	; 0x75
 800272e:	21d0      	movs	r1, #208	; 0xd0
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <testDevice+0x34>)
 8002732:	f001 f8d7 	bl	80038e4 <HAL_I2C_Mem_Read>

	if(data == 104) // CHANGE AD0_LOW here if you connect ado pin to high
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b68      	cmp	r3, #104	; 0x68
 800273a:	d101      	bne.n	8002740 <testDevice+0x28>
		return 1;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <testDevice+0x2a>
	else
		return 0;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000148 	.word	0x20000148

08002750 <beginmpu>:
uint8_t beginmpu()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af04      	add	r7, sp, #16
	uint8_t veri = testDevice();
 8002756:	f7ff ffdf 	bl	8002718 <testDevice>
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
	if(veri != 1)
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <beginmpu+0x18>
		return 0;
 8002764:	2300      	movs	r3, #0
 8002766:	e010      	b.n	800278a <beginmpu+0x3a>
	veri = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, AD0_LOW, PWR_MGMT_1, 1,&veri, 1, 100);
 800276c:	2364      	movs	r3, #100	; 0x64
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2301      	movs	r3, #1
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	226b      	movs	r2, #107	; 0x6b
 800277c:	21d0      	movs	r1, #208	; 0xd0
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <beginmpu+0x44>)
 8002780:	f000 ffb6 	bl	80036f0 <HAL_I2C_Mem_Write>
	setRange();
 8002784:	f000 f808 	bl	8002798 <setRange>
	return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000148 	.word	0x20000148

08002798 <setRange>:
void setRange()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	71fb      	strb	r3, [r7, #7]
 // we first set the accelerometer range , [4:3] bits in register varies the range. we will set register all 0 to use at 250.
	HAL_I2C_Mem_Write(&hi2c1, AD0_LOW, ACCEL_CONFIG, 1, &data , 1, 100);
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2301      	movs	r3, #1
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	221c      	movs	r2, #28
 80027b2:	21d0      	movs	r1, #208	; 0xd0
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <setRange+0x48>)
 80027b6:	f000 ff9b 	bl	80036f0 <HAL_I2C_Mem_Write>
	// now we set the  gyro range
	data = 0; // just to be sure
 80027ba:	2300      	movs	r3, #0
 80027bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, AD0_LOW, GYRO_CONFIG, 1, &data , 1, 100);
 80027be:	2364      	movs	r3, #100	; 0x64
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	2301      	movs	r3, #1
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	221b      	movs	r2, #27
 80027ce:	21d0      	movs	r1, #208	; 0xd0
 80027d0:	4803      	ldr	r0, [pc, #12]	; (80027e0 <setRange+0x48>)
 80027d2:	f000 ff8d 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000148 	.word	0x20000148

080027e4 <mpu_read>:
void mpu_read()
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af04      	add	r7, sp, #16
	uint8_t BUFFER[14]; // WE START READ FROM  3B to 48 , every regiser has a byte data so we need 14 byte buffer
	HAL_I2C_Mem_Read(&hi2c1, AD0_LOW, ACCEL_XOUT_H, 1, BUFFER, 14, 100); // read the data
 80027ea:	2364      	movs	r3, #100	; 0x64
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	230e      	movs	r3, #14
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	463b      	mov	r3, r7
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	223b      	movs	r2, #59	; 0x3b
 80027fa:	21d0      	movs	r1, #208	; 0xd0
 80027fc:	4823      	ldr	r0, [pc, #140]	; (800288c <mpu_read+0xa8>)
 80027fe:	f001 f871 	bl	80038e4 <HAL_I2C_Mem_Read>
	rawData.ax = BUFFER[0] << 8 | BUFFER[1];
 8002802:	783b      	ldrb	r3, [r7, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	b21a      	sxth	r2, r3
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	b21b      	sxth	r3, r3
 800280c:	4313      	orrs	r3, r2
 800280e:	b21a      	sxth	r2, r3
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <mpu_read+0xac>)
 8002812:	801a      	strh	r2, [r3, #0]
	rawData.ay = BUFFER[2] << 8 | BUFFER[3];
 8002814:	78bb      	ldrb	r3, [r7, #2]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b21a      	sxth	r2, r3
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	b21b      	sxth	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	b21a      	sxth	r2, r3
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <mpu_read+0xac>)
 8002824:	805a      	strh	r2, [r3, #2]
	rawData.az = BUFFER[4] << 8 | BUFFER[5];
 8002826:	793b      	ldrb	r3, [r7, #4]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21a      	sxth	r2, r3
 800282c:	797b      	ldrb	r3, [r7, #5]
 800282e:	b21b      	sxth	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b21a      	sxth	r2, r3
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <mpu_read+0xac>)
 8002836:	809a      	strh	r2, [r3, #4]
	// read the temperature
	rawData.temp = BUFFER[6] << 8 | BUFFER[7];
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21a      	sxth	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	b21b      	sxth	r3, r3
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <mpu_read+0xac>)
 800284a:	819a      	strh	r2, [r3, #12]
	// NOW WE SHIFT AND SET THE GYROSCOPE DATA
	rawData.gx = BUFFER[8] << 8 | BUFFER[9];
 800284c:	7a3b      	ldrb	r3, [r7, #8]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b21a      	sxth	r2, r3
 8002852:	7a7b      	ldrb	r3, [r7, #9]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21a      	sxth	r2, r3
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <mpu_read+0xac>)
 800285c:	80da      	strh	r2, [r3, #6]
	rawData.gy = BUFFER[10] << 8 | BUFFER[11];
 800285e:	7abb      	ldrb	r3, [r7, #10]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	b21a      	sxth	r2, r3
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	b21b      	sxth	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b21a      	sxth	r2, r3
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <mpu_read+0xac>)
 800286e:	811a      	strh	r2, [r3, #8]
	rawData.gz = BUFFER[12] << 8 | BUFFER[13];
 8002870:	7b3b      	ldrb	r3, [r7, #12]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b21a      	sxth	r2, r3
 8002876:	7b7b      	ldrb	r3, [r7, #13]
 8002878:	b21b      	sxth	r3, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	b21a      	sxth	r2, r3
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <mpu_read+0xac>)
 8002880:	815a      	strh	r2, [r3, #10]


}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000148 	.word	0x20000148
 8002890:	20000280 	.word	0x20000280

08002894 <mpu_measure>:
void mpu_measure()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	mpu_read();
 8002898:	f7ff ffa4 	bl	80027e4 <mpu_read>
	// CONVER THE DATA WE READ BEFORE TO TYPE OF g(9.81m/s^2)
	sensorData.ax = rawData.ax/ACCCONSTANT;
 800289c:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <mpu_measure+0x130>)
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f9bc 	bl	8000c20 <__aeabi_i2f>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <mpu_measure+0x134>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f7fe fabd 	bl	8000e30 <__aeabi_fdiv>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b44      	ldr	r3, [pc, #272]	; (80029cc <mpu_measure+0x138>)
 80028bc:	601a      	str	r2, [r3, #0]
	sensorData.ay = rawData.ay/ACCCONSTANT;
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <mpu_measure+0x130>)
 80028c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe f9ab 	bl	8000c20 <__aeabi_i2f>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <mpu_measure+0x134>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f7fe faac 	bl	8000e30 <__aeabi_fdiv>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <mpu_measure+0x138>)
 80028de:	605a      	str	r2, [r3, #4]
	sensorData.az = rawData.az/ACCCONSTANT;
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <mpu_measure+0x130>)
 80028e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe f99a 	bl	8000c20 <__aeabi_i2f>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <mpu_measure+0x134>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7fe fa9b 	bl	8000e30 <__aeabi_fdiv>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b33      	ldr	r3, [pc, #204]	; (80029cc <mpu_measure+0x138>)
 8002900:	609a      	str	r2, [r3, #8]
	// CONVERT GYROSCOPE DATA TO degrees/second
	sensorData.gx = rawData.gx/GYROCONSTANT-gyroCal.x;
 8002902:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <mpu_measure+0x130>)
 8002904:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe f989 	bl	8000c20 <__aeabi_i2f>
 800290e:	4602      	mov	r2, r0
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <mpu_measure+0x13c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f7fe fa8a 	bl	8000e30 <__aeabi_fdiv>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <mpu_measure+0x140>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f7fe f8c4 	bl	8000ab4 <__aeabi_fsub>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <mpu_measure+0x138>)
 8002932:	60da      	str	r2, [r3, #12]
	sensorData.gy = rawData.gy/GYROCONSTANT-gyroCal.y;
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <mpu_measure+0x130>)
 8002936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f970 	bl	8000c20 <__aeabi_i2f>
 8002940:	4602      	mov	r2, r0
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <mpu_measure+0x13c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f7fe fa71 	bl	8000e30 <__aeabi_fdiv>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <mpu_measure+0x140>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f7fe f8ab 	bl	8000ab4 <__aeabi_fsub>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <mpu_measure+0x138>)
 8002964:	611a      	str	r2, [r3, #16]
	sensorData.gz = rawData.gz/GYROCONSTANT-gyroCal.z;
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <mpu_measure+0x130>)
 8002968:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f957 	bl	8000c20 <__aeabi_i2f>
 8002972:	4602      	mov	r2, r0
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <mpu_measure+0x13c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f7fe fa58 	bl	8000e30 <__aeabi_fdiv>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <mpu_measure+0x140>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f7fe f892 	bl	8000ab4 <__aeabi_fsub>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <mpu_measure+0x138>)
 8002996:	615a      	str	r2, [r3, #20]
	sensorData.temp = (float)((int16_t)rawData.temp / (float)340.0 + (float)36.53);
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <mpu_measure+0x130>)
 800299a:	899b      	ldrh	r3, [r3, #12]
 800299c:	b21b      	sxth	r3, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe f93e 	bl	8000c20 <__aeabi_i2f>
 80029a4:	4603      	mov	r3, r0
 80029a6:	490c      	ldr	r1, [pc, #48]	; (80029d8 <mpu_measure+0x144>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fa41 	bl	8000e30 <__aeabi_fdiv>
 80029ae:	4603      	mov	r3, r0
 80029b0:	490a      	ldr	r1, [pc, #40]	; (80029dc <mpu_measure+0x148>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f880 	bl	8000ab8 <__addsf3>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <mpu_measure+0x138>)
 80029be:	619a      	str	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000280 	.word	0x20000280
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000290 	.word	0x20000290
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	200002ac 	.word	0x200002ac
 80029d8:	43aa0000 	.word	0x43aa0000
 80029dc:	42121eb8 	.word	0x42121eb8

080029e0 <calibrate_gyro>:
void calibrate_gyro()
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
	float x = 0;
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
	float y = 0;
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
	float z = 0;
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
	for(int i =0;i<500;i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	e01f      	b.n	8002a3e <calibrate_gyro+0x5e>
	{
		mpu_measure();
 80029fe:	f7ff ff49 	bl	8002894 <mpu_measure>
		x += sensorData.gx;
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <calibrate_gyro+0xa0>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4619      	mov	r1, r3
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7fe f855 	bl	8000ab8 <__addsf3>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	60fb      	str	r3, [r7, #12]
		y += sensorData.gy;
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <calibrate_gyro+0xa0>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	4619      	mov	r1, r3
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7fe f84d 	bl	8000ab8 <__addsf3>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	60bb      	str	r3, [r7, #8]
		z += sensorData.gz;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <calibrate_gyro+0xa0>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7fe f845 	bl	8000ab8 <__addsf3>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	607b      	str	r3, [r7, #4]
		HAL_Delay(5);
 8002a32:	2005      	movs	r0, #5
 8002a34:	f000 fa4a 	bl	8002ecc <HAL_Delay>
	for(int i =0;i<500;i++)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a44:	dbdb      	blt.n	80029fe <calibrate_gyro+0x1e>
	} // IT TAKES 2.5 SECONDS TO CALIBRATE
	gyroCal.x = x/500.0;
 8002a46:	490f      	ldr	r1, [pc, #60]	; (8002a84 <calibrate_gyro+0xa4>)
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7fe f9f1 	bl	8000e30 <__aeabi_fdiv>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <calibrate_gyro+0xa8>)
 8002a54:	601a      	str	r2, [r3, #0]
	gyroCal.y = y/500.0;
 8002a56:	490b      	ldr	r1, [pc, #44]	; (8002a84 <calibrate_gyro+0xa4>)
 8002a58:	68b8      	ldr	r0, [r7, #8]
 8002a5a:	f7fe f9e9 	bl	8000e30 <__aeabi_fdiv>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <calibrate_gyro+0xa8>)
 8002a64:	605a      	str	r2, [r3, #4]
	gyroCal.z = z/500.0;
 8002a66:	4907      	ldr	r1, [pc, #28]	; (8002a84 <calibrate_gyro+0xa4>)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe f9e1 	bl	8000e30 <__aeabi_fdiv>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <calibrate_gyro+0xa8>)
 8002a74:	609a      	str	r2, [r3, #8]
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000290 	.word	0x20000290
 8002a84:	43fa0000 	.word	0x43fa0000
 8002a88:	200002ac 	.word	0x200002ac

08002a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_MspInit+0x5c>)
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_MspInit+0x5c>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6193      	str	r3, [r2, #24]
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_MspInit+0x5c>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_MspInit+0x5c>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_MspInit+0x5c>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_MspInit+0x5c>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_MspInit+0x60>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_MspInit+0x60>)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010000 	.word	0x40010000

08002af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <HAL_I2C_MspInit+0x70>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d123      	bne.n	8002b58 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_I2C_MspInit+0x74>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <HAL_I2C_MspInit+0x74>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_I2C_MspInit+0x74>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2c:	2312      	movs	r3, #18
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4619      	mov	r1, r3
 8002b3a:	480b      	ldr	r0, [pc, #44]	; (8002b68 <HAL_I2C_MspInit+0x78>)
 8002b3c:	f000 faf8 	bl	8003130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_I2C_MspInit+0x74>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <HAL_I2C_MspInit+0x74>)
 8002b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b4a:	61d3      	str	r3, [r2, #28]
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_I2C_MspInit+0x74>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b58:	bf00      	nop
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010c00 	.word	0x40010c00

08002b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d12f      	bne.n	8002bec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002b92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b96:	6193      	str	r3, [r2, #24]
 8002b98:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002bbc:	23a0      	movs	r3, #160	; 0xa0
 8002bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480b      	ldr	r0, [pc, #44]	; (8002bfc <HAL_SPI_MspInit+0x90>)
 8002bd0:	f000 faae 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bd4:	2340      	movs	r3, #64	; 0x40
 8002bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4619      	mov	r1, r3
 8002be6:	4805      	ldr	r0, [pc, #20]	; (8002bfc <HAL_SPI_MspInit+0x90>)
 8002be8:	f000 faa2 	bl	8003130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bec:	bf00      	nop
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40013000 	.word	0x40013000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010800 	.word	0x40010800

08002c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c10:	d113      	bne.n	8002c3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_TIM_Base_MspInit+0x44>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <HAL_TIM_Base_MspInit+0x44>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	61d3      	str	r3, [r2, #28]
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_TIM_Base_MspInit+0x44>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	201c      	movs	r0, #28
 8002c30:	f000 fa47 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c34:	201c      	movs	r0, #28
 8002c36:	f000 fa60 	bl	80030fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_UART_MspInit+0x8c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d131      	bne.n	8002ccc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_UART_MspInit+0x90>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_UART_MspInit+0x90>)
 8002c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_UART_MspInit+0x90>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_UART_MspInit+0x90>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <HAL_UART_MspInit+0x90>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6193      	str	r3, [r2, #24]
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_UART_MspInit+0x90>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	f107 0310 	add.w	r3, r7, #16
 8002caa:	4619      	mov	r1, r3
 8002cac:	480b      	ldr	r0, [pc, #44]	; (8002cdc <HAL_UART_MspInit+0x94>)
 8002cae:	f000 fa3f 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <HAL_UART_MspInit+0x94>)
 8002cc8:	f000 fa32 	bl	8003130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ccc:	bf00      	nop
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010800 	.word	0x40010800

08002ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <NMI_Handler+0x4>

08002ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <HardFault_Handler+0x4>

08002cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <MemManage_Handler+0x4>

08002cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <UsageFault_Handler+0x4>

08002cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d26:	f000 f8b5 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <TIM2_IRQHandler+0x10>)
 8002d36:	f002 fdbf 	bl	80058b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200001f4 	.word	0x200001f4

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f003 fab0 	bl	80062d8 <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20005000 	.word	0x20005000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	200002e0 	.word	0x200002e0
 8002dac:	200002f8 	.word	0x200002f8

08002db0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc4:	e002      	b.n	8002dcc <LoopCopyDataInit>

08002dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dca:	3304      	adds	r3, #4

08002dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd0:	d3f9      	bcc.n	8002dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dd4:	4c0a      	ldr	r4, [pc, #40]	; (8002e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd8:	e001      	b.n	8002dde <LoopFillZerobss>

08002dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ddc:	3204      	adds	r2, #4

08002dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de0:	d3fb      	bcc.n	8002dda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002de2:	f7ff ffe5 	bl	8002db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002de6:	f003 fa7d 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dea:	f7ff faa9 	bl	8002340 <main>
  bx lr
 8002dee:	4770      	bx	lr
  ldr r0, =_sdata
 8002df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002df8:	08007730 	.word	0x08007730
  ldr r2, =_sbss
 8002dfc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002e00:	200002f8 	.word	0x200002f8

08002e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e04:	e7fe      	b.n	8002e04 <ADC1_2_IRQHandler>
	...

08002e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_Init+0x28>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <HAL_Init+0x28>)
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f000 f947 	bl	80030ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1e:	200f      	movs	r0, #15
 8002e20:	f000 f808 	bl	8002e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e24:	f7ff fe32 	bl	8002a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40022000 	.word	0x40022000

08002e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_InitTick+0x54>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_InitTick+0x58>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f95f 	bl	8003116 <HAL_SYSTICK_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00e      	b.n	8002e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d80a      	bhi.n	8002e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f000 f927 	bl	80030c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e74:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <HAL_InitTick+0x5c>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000010 	.word	0x20000010
 8002e8c:	20000018 	.word	0x20000018
 8002e90:	20000014 	.word	0x20000014

08002e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_IncTick+0x1c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_IncTick+0x20>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_IncTick+0x20>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	20000018 	.word	0x20000018
 8002eb4:	200002e4 	.word	0x200002e4

08002eb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_GetTick+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	200002e4 	.word	0x200002e4

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffe0 	bl	8002eb8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000018 	.word	0x20000018

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <__NVIC_EnableIRQ+0x34>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003078:	d301      	bcc.n	800307e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307a:	2301      	movs	r3, #1
 800307c:	e00f      	b.n	800309e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <SysTick_Config+0x40>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003086:	210f      	movs	r1, #15
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	f7ff ff90 	bl	8002fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <SysTick_Config+0x40>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <SysTick_Config+0x40>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff2d 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d4:	f7ff ff42 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 80030d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff ff90 	bl	8003004 <NVIC_EncodePriority>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff5f 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff35 	bl	8002f78 <__NVIC_EnableIRQ>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ffa2 	bl	8003068 <SysTick_Config>
 8003124:	4603      	mov	r3, r0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b08b      	sub	sp, #44	; 0x2c
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003142:	e169      	b.n	8003418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003144:	2201      	movs	r2, #1
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	f040 8158 	bne.w	8003412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a9a      	ldr	r2, [pc, #616]	; (80033d0 <HAL_GPIO_Init+0x2a0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d05e      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 800316c:	4a98      	ldr	r2, [pc, #608]	; (80033d0 <HAL_GPIO_Init+0x2a0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d875      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 8003172:	4a98      	ldr	r2, [pc, #608]	; (80033d4 <HAL_GPIO_Init+0x2a4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d058      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 8003178:	4a96      	ldr	r2, [pc, #600]	; (80033d4 <HAL_GPIO_Init+0x2a4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d86f      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 800317e:	4a96      	ldr	r2, [pc, #600]	; (80033d8 <HAL_GPIO_Init+0x2a8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d052      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 8003184:	4a94      	ldr	r2, [pc, #592]	; (80033d8 <HAL_GPIO_Init+0x2a8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d869      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 800318a:	4a94      	ldr	r2, [pc, #592]	; (80033dc <HAL_GPIO_Init+0x2ac>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d04c      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 8003190:	4a92      	ldr	r2, [pc, #584]	; (80033dc <HAL_GPIO_Init+0x2ac>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d863      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 8003196:	4a92      	ldr	r2, [pc, #584]	; (80033e0 <HAL_GPIO_Init+0x2b0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d046      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 800319c:	4a90      	ldr	r2, [pc, #576]	; (80033e0 <HAL_GPIO_Init+0x2b0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d85d      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 80031a2:	2b12      	cmp	r3, #18
 80031a4:	d82a      	bhi.n	80031fc <HAL_GPIO_Init+0xcc>
 80031a6:	2b12      	cmp	r3, #18
 80031a8:	d859      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_GPIO_Init+0x80>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	0800322b 	.word	0x0800322b
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003217 	.word	0x08003217
 80031bc:	08003259 	.word	0x08003259
 80031c0:	0800325f 	.word	0x0800325f
 80031c4:	0800325f 	.word	0x0800325f
 80031c8:	0800325f 	.word	0x0800325f
 80031cc:	0800325f 	.word	0x0800325f
 80031d0:	0800325f 	.word	0x0800325f
 80031d4:	0800325f 	.word	0x0800325f
 80031d8:	0800325f 	.word	0x0800325f
 80031dc:	0800325f 	.word	0x0800325f
 80031e0:	0800325f 	.word	0x0800325f
 80031e4:	0800325f 	.word	0x0800325f
 80031e8:	0800325f 	.word	0x0800325f
 80031ec:	0800325f 	.word	0x0800325f
 80031f0:	0800325f 	.word	0x0800325f
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	08003221 	.word	0x08003221
 80031fc:	4a79      	ldr	r2, [pc, #484]	; (80033e4 <HAL_GPIO_Init+0x2b4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003202:	e02c      	b.n	800325e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	623b      	str	r3, [r7, #32]
          break;
 800320a:	e029      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	3304      	adds	r3, #4
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e024      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	3308      	adds	r3, #8
 800321c:	623b      	str	r3, [r7, #32]
          break;
 800321e:	e01f      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	330c      	adds	r3, #12
 8003226:	623b      	str	r3, [r7, #32]
          break;
 8003228:	e01a      	b.n	8003260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003232:	2304      	movs	r3, #4
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e013      	b.n	8003260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003240:	2308      	movs	r3, #8
 8003242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	611a      	str	r2, [r3, #16]
          break;
 800324a:	e009      	b.n	8003260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800324c:	2308      	movs	r3, #8
 800324e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	615a      	str	r2, [r3, #20]
          break;
 8003256:	e003      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
          break;
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x130>
          break;
 800325e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2bff      	cmp	r3, #255	; 0xff
 8003264:	d801      	bhi.n	800326a <HAL_GPIO_Init+0x13a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	e001      	b.n	800326e <HAL_GPIO_Init+0x13e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2bff      	cmp	r3, #255	; 0xff
 8003274:	d802      	bhi.n	800327c <HAL_GPIO_Init+0x14c>
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	e002      	b.n	8003282 <HAL_GPIO_Init+0x152>
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	3b08      	subs	r3, #8
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	210f      	movs	r1, #15
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	6a39      	ldr	r1, [r7, #32]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	431a      	orrs	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80b1 	beq.w	8003412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032b0:	4b4d      	ldr	r3, [pc, #308]	; (80033e8 <HAL_GPIO_Init+0x2b8>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a4c      	ldr	r2, [pc, #304]	; (80033e8 <HAL_GPIO_Init+0x2b8>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6193      	str	r3, [r2, #24]
 80032bc:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_GPIO_Init+0x2b8>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032c8:	4a48      	ldr	r2, [pc, #288]	; (80033ec <HAL_GPIO_Init+0x2bc>)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a40      	ldr	r2, [pc, #256]	; (80033f0 <HAL_GPIO_Init+0x2c0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_GPIO_Init+0x1ec>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3f      	ldr	r2, [pc, #252]	; (80033f4 <HAL_GPIO_Init+0x2c4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00d      	beq.n	8003318 <HAL_GPIO_Init+0x1e8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3e      	ldr	r2, [pc, #248]	; (80033f8 <HAL_GPIO_Init+0x2c8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <HAL_GPIO_Init+0x1e4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3d      	ldr	r2, [pc, #244]	; (80033fc <HAL_GPIO_Init+0x2cc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_GPIO_Init+0x1e0>
 800330c:	2303      	movs	r3, #3
 800330e:	e006      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 8003310:	2304      	movs	r3, #4
 8003312:	e004      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 8003314:	2302      	movs	r3, #2
 8003316:	e002      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 800331c:	2300      	movs	r3, #0
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	f002 0203 	and.w	r2, r2, #3
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	4093      	lsls	r3, r2
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800332e:	492f      	ldr	r1, [pc, #188]	; (80033ec <HAL_GPIO_Init+0x2bc>)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	492c      	ldr	r1, [pc, #176]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003356:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	43db      	mvns	r3, r3
 800335e:	4928      	ldr	r1, [pc, #160]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 8003360:	4013      	ands	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4922      	ldr	r1, [pc, #136]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
 800337c:	e006      	b.n	800338c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	43db      	mvns	r3, r3
 8003386:	491e      	ldr	r1, [pc, #120]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 8003388:	4013      	ands	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4914      	ldr	r1, [pc, #80]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d021      	beq.n	8003404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	490e      	ldr	r1, [pc, #56]	; (8003400 <HAL_GPIO_Init+0x2d0>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]
 80033cc:	e021      	b.n	8003412 <HAL_GPIO_Init+0x2e2>
 80033ce:	bf00      	nop
 80033d0:	10320000 	.word	0x10320000
 80033d4:	10310000 	.word	0x10310000
 80033d8:	10220000 	.word	0x10220000
 80033dc:	10210000 	.word	0x10210000
 80033e0:	10120000 	.word	0x10120000
 80033e4:	10110000 	.word	0x10110000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40010800 	.word	0x40010800
 80033f4:	40010c00 	.word	0x40010c00
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40011400 	.word	0x40011400
 8003400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_GPIO_Init+0x304>)
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	43db      	mvns	r3, r3
 800340c:	4909      	ldr	r1, [pc, #36]	; (8003434 <HAL_GPIO_Init+0x304>)
 800340e:	4013      	ands	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	f47f ae8e 	bne.w	8003144 <HAL_GPIO_Init+0x14>
  }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	372c      	adds	r7, #44	; 0x2c
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	611a      	str	r2, [r3, #16]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e12b      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fb2e 	bl	8002af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034cc:	f001 fba0 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 80034d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a81      	ldr	r2, [pc, #516]	; (80036dc <HAL_I2C_Init+0x274>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d807      	bhi.n	80034ec <HAL_I2C_Init+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_I2C_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e006      	b.n	80034fa <HAL_I2C_Init+0x92>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a7d      	ldr	r2, [pc, #500]	; (80036e4 <HAL_I2C_Init+0x27c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0e7      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a78      	ldr	r2, [pc, #480]	; (80036e8 <HAL_I2C_Init+0x280>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a6a      	ldr	r2, [pc, #424]	; (80036dc <HAL_I2C_Init+0x274>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d802      	bhi.n	800353c <HAL_I2C_Init+0xd4>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3301      	adds	r3, #1
 800353a:	e009      	b.n	8003550 <HAL_I2C_Init+0xe8>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	4a69      	ldr	r2, [pc, #420]	; (80036ec <HAL_I2C_Init+0x284>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	3301      	adds	r3, #1
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	495c      	ldr	r1, [pc, #368]	; (80036dc <HAL_I2C_Init+0x274>)
 800356c:	428b      	cmp	r3, r1
 800356e:	d819      	bhi.n	80035a4 <HAL_I2C_Init+0x13c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e59      	subs	r1, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fbb1 f3f3 	udiv	r3, r1, r3
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003584:	400b      	ands	r3, r1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_I2C_Init+0x138>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e59      	subs	r1, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fbb1 f3f3 	udiv	r3, r1, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	e051      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a0:	2304      	movs	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x168>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x18e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x196>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370a:	f7ff fbd5 	bl	8002eb8 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	f040 80d9 	bne.w	80038d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2319      	movs	r3, #25
 8003724:	2201      	movs	r2, #1
 8003726:	496d      	ldr	r1, [pc, #436]	; (80038dc <HAL_I2C_Mem_Write+0x1ec>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fcc1 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	e0cc      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Write+0x56>
 8003742:	2302      	movs	r3, #2
 8003744:	e0c5      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d007      	beq.n	800376c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2221      	movs	r2, #33	; 0x21
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a4d      	ldr	r2, [pc, #308]	; (80038e0 <HAL_I2C_Mem_Write+0x1f0>)
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ae:	88f8      	ldrh	r0, [r7, #6]
 80037b0:	893a      	ldrh	r2, [r7, #8]
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	4603      	mov	r3, r0
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 faf8 	bl	8003db4 <I2C_RequestMemoryWrite>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d052      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e081      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fd42 	bl	800425c <I2C_WaitOnTXEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d107      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06b      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b04      	cmp	r3, #4
 8003836:	d11b      	bne.n	8003870 <HAL_I2C_Mem_Write+0x180>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1aa      	bne.n	80037ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fd2e 	bl	80042de <I2C_WaitOnBTFFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b04      	cmp	r3, #4
 800388e:	d107      	bne.n	80038a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e016      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	00100002 	.word	0x00100002
 80038e0:	ffff0000 	.word	0xffff0000

080038e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	; 0x30
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003902:	f7ff fad9 	bl	8002eb8 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 8244 	bne.w	8003d9e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2319      	movs	r3, #25
 800391c:	2201      	movs	r2, #1
 800391e:	4982      	ldr	r1, [pc, #520]	; (8003b28 <HAL_I2C_Mem_Read+0x244>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fbc5 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	e237      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2C_Mem_Read+0x5a>
 800393a:	2302      	movs	r3, #2
 800393c:	e230      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d007      	beq.n	8003964 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2222      	movs	r2, #34	; 0x22
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a62      	ldr	r2, [pc, #392]	; (8003b2c <HAL_I2C_Mem_Read+0x248>)
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fa92 	bl	8003ee0 <I2C_RequestMemoryRead>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1ec      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e1c0      	b.n	8003d78 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d11e      	bne.n	8003a3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0e:	b672      	cpsid	i
}
 8003a10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a38:	b662      	cpsie	i
}
 8003a3a:	e035      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d11e      	bne.n	8003a82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a54:	b672      	cpsid	i
}
 8003a56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7e:	b662      	cpsie	i
}
 8003a80:	e012      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003aa8:	e166      	b.n	8003d78 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 811f 	bhi.w	8003cf2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d123      	bne.n	8003b04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fc4d 	bl	8004360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e167      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b02:	e139      	b.n	8003d78 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d152      	bne.n	8003bb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	2200      	movs	r2, #0
 8003b14:	4906      	ldr	r1, [pc, #24]	; (8003b30 <HAL_I2C_Mem_Read+0x24c>)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 faca 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e13c      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
 8003b26:	bf00      	nop
 8003b28:	00100002 	.word	0x00100002
 8003b2c:	ffff0000 	.word	0xffff0000
 8003b30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b34:	b672      	cpsid	i
}
 8003b36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b7a:	b662      	cpsie	i
}
 8003b7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb0:	e0e2      	b.n	8003d78 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2200      	movs	r2, #0
 8003bba:	497b      	ldr	r1, [pc, #492]	; (8003da8 <HAL_I2C_Mem_Read+0x4c4>)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fa77 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0e9      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bdc:	b672      	cpsid	i
}
 8003bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c12:	4b66      	ldr	r3, [pc, #408]	; (8003dac <HAL_I2C_Mem_Read+0x4c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	08db      	lsrs	r3, r3, #3
 8003c18:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <HAL_I2C_Mem_Read+0x4cc>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0a1a      	lsrs	r2, r3, #8
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00da      	lsls	r2, r3, #3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d118      	bne.n	8003c6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c5a:	b662      	cpsie	i
}
 8003c5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e09a      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d1d9      	bne.n	8003c2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cba:	b662      	cpsie	i
}
 8003cbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf0:	e042      	b.n	8003d78 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fb32 	bl	8004360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e04c      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d118      	bne.n	8003d78 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f ae94 	bne.w	8003aaa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3728      	adds	r7, #40	; 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	00010004 	.word	0x00010004
 8003dac:	20000010 	.word	0x20000010
 8003db0:	14f8b589 	.word	0x14f8b589

08003db4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f960 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	d103      	bne.n	8003e0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e05f      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	492d      	ldr	r1, [pc, #180]	; (8003edc <I2C_RequestMemoryWrite+0x128>)
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f998 	bl	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e04c      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fa02 	bl	800425c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d107      	bne.n	8003e76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e02b      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e80:	893b      	ldrh	r3, [r7, #8]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	611a      	str	r2, [r3, #16]
 8003e8a:	e021      	b.n	8003ed0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	6a39      	ldr	r1, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f9dc 	bl	800425c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d107      	bne.n	8003ec2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e005      	b.n	8003ed2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec6:	893b      	ldrh	r3, [r7, #8]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00010002 	.word	0x00010002

08003ee0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	817b      	strh	r3, [r7, #10]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	813b      	strh	r3, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f8c2 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f40:	d103      	bne.n	8003f4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0aa      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	4952      	ldr	r1, [pc, #328]	; (80040ac <I2C_RequestMemoryRead+0x1cc>)
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f8fa 	bl	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e097      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f964 	bl	800425c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e076      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbc:	893b      	ldrh	r3, [r7, #8]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	e021      	b.n	800400c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f93e 	bl	800425c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e050      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004002:	893b      	ldrh	r3, [r7, #8]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	6a39      	ldr	r1, [r7, #32]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f923 	bl	800425c <I2C_WaitOnTXEFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e035      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004046:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2200      	movs	r2, #0
 8004050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f82b 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406e:	d103      	bne.n	8004078 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e013      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	4906      	ldr	r1, [pc, #24]	; (80040ac <I2C_RequestMemoryRead+0x1cc>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f863 	bl	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	00010002 	.word	0x00010002

080040b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	e025      	b.n	800410e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d021      	beq.n	800410e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fe fef5 	bl	8002eb8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d116      	bne.n	800410e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e023      	b.n	8004156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10d      	bne.n	8004134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	43da      	mvns	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	e00c      	b.n	800414e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	429a      	cmp	r2, r3
 8004152:	d0b6      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800416c:	e051      	b.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d123      	bne.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e046      	b.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d021      	beq.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe fe73 	bl	8002eb8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d116      	bne.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e020      	b.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d10c      	bne.n	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	43da      	mvns	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	e00b      	b.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	43da      	mvns	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4013      	ands	r3, r2
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d18d      	bne.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004268:	e02d      	b.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f8ce 	bl	800440c <I2C_IsAcknowledgeFailed>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e02d      	b.n	80042d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d021      	beq.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fe fe19 	bl	8002eb8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d116      	bne.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f043 0220 	orr.w	r2, r3, #32
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e007      	b.n	80042d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d1ca      	bne.n	800426a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ea:	e02d      	b.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f88d 	bl	800440c <I2C_IsAcknowledgeFailed>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e02d      	b.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d021      	beq.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004304:	f7fe fdd8 	bl	8002eb8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e007      	b.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d1ca      	bne.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436c:	e042      	b.n	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b10      	cmp	r3, #16
 800437a:	d119      	bne.n	80043b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0210 	mvn.w	r2, #16
 8004384:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e029      	b.n	8004404 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7fe fd82 	bl	8002eb8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e007      	b.n	8004404 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d1b5      	bne.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d11b      	bne.n	800445c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800442c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f043 0204 	orr.w	r2, r3, #4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e272      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8087 	beq.w	8004596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004488:	4b92      	ldr	r3, [pc, #584]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b04      	cmp	r3, #4
 8004492:	d00c      	beq.n	80044ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004494:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d112      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
 80044a0:	4b8c      	ldr	r3, [pc, #560]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ae:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06c      	beq.n	8004594 <HAL_RCC_OscConfig+0x12c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d168      	bne.n	8004594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e24c      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x76>
 80044d0:	4b80      	ldr	r3, [pc, #512]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7f      	ldr	r2, [pc, #508]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e02e      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7a      	ldr	r2, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0xbc>
 800450a:	4b72      	ldr	r3, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a71      	ldr	r2, [pc, #452]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6f      	ldr	r3, [pc, #444]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6e      	ldr	r2, [pc, #440]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004524:	4b6b      	ldr	r3, [pc, #428]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6a      	ldr	r2, [pc, #424]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a67      	ldr	r2, [pc, #412]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe fcb8 	bl	8002eb8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fe fcb4 	bl	8002eb8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e200      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xe4>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fca4 	bl	8002eb8 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fca0 	bl	8002eb8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1ec      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x10c>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a2:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c0      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4939      	ldr	r1, [pc, #228]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x270>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fe fc59 	bl	8002eb8 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fe fc55 	bl	8002eb8 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2d      	ldr	r3, [pc, #180]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4927      	ldr	r1, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCC_OscConfig+0x270>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fc38 	bl	8002eb8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe fc34 	bl	8002eb8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e180      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03a      	beq.n	80046ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d019      	beq.n	80046b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_RCC_OscConfig+0x274>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fe fc18 	bl	8002eb8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fe fc14 	bl	8002eb8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e160      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f000 fad8 	bl	8004c60 <RCC_Delay>
 80046b0:	e01c      	b.n	80046ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_RCC_OscConfig+0x274>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fe fbfe 	bl	8002eb8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046be:	e00f      	b.n	80046e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe fbfa 	bl	8002eb8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d908      	bls.n	80046e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e146      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	42420000 	.word	0x42420000
 80046dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b92      	ldr	r3, [pc, #584]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e9      	bne.n	80046c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a6 	beq.w	8004846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	61d3      	str	r3, [r2, #28]
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fe fbbb 	bl	8002eb8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fe fbb7 	bl	8002eb8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e103      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b75      	ldr	r3, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x4c8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x312>
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x334>
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6213      	str	r3, [r2, #32]
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x356>
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6213      	str	r3, [r2, #32]
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6213      	str	r3, [r2, #32]
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fe fb6b 	bl	8002eb8 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fe fb67 	bl	8002eb8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0b1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x37e>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe fb55 	bl	8002eb8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fe fb51 	bl	8002eb8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e09b      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d061      	beq.n	8004920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d146      	bne.n	80048f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe fb25 	bl	8002eb8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fe fb21 	bl	8002eb8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e06d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004884:	4b29      	ldr	r3, [pc, #164]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d108      	bne.n	80048ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4921      	ldr	r1, [pc, #132]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a19      	ldr	r1, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	491b      	ldr	r1, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fe faf5 	bl	8002eb8 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fe faf1 	bl	8002eb8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e03d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x46a>
 80048f0:	e035      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fade 	bl	8002eb8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fe fada 	bl	8002eb8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e026      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x498>
 800491e:	e01e      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e019      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
 8004934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_OscConfig+0x500>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	429a      	cmp	r2, r3
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0d0      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4965      	ldr	r1, [pc, #404]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a58      	ldr	r2, [pc, #352]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d040      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e073      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4936      	ldr	r1, [pc, #216]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fa2c 	bl	8002eb8 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe fa28 	bl	8002eb8 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e053      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d210      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1cc>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x1d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f98a 	bl	8002e34 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
 8004b34:	0800766c 	.word	0x0800766c
 8004b38:	20000010 	.word	0x20000010
 8004b3c:	20000014 	.word	0x20000014

08004b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b490      	push	{r4, r7}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCC_GetSysClockFreq+0xac>)
 8004b48:	1d3c      	adds	r4, r7, #4
 8004b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b50:	f240 2301 	movw	r3, #513	; 0x201
 8004b54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d002      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x46>
 8004b7e:	e02b      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	623b      	str	r3, [r7, #32]
      break;
 8004b84:	e02b      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	0c9b      	lsrs	r3, r3, #18
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	3328      	adds	r3, #40	; 0x28
 8004b90:	443b      	add	r3, r7
 8004b92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b96:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d012      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0c5b      	lsrs	r3, r3, #17
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	3328      	adds	r3, #40	; 0x28
 8004bae:	443b      	add	r3, r7
 8004bb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bba:	fb03 f202 	mul.w	r2, r3, r2
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	623b      	str	r3, [r7, #32]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bda:	623b      	str	r3, [r7, #32]
      break;
 8004bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bde:	6a3b      	ldr	r3, [r7, #32]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc90      	pop	{r4, r7}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	0800765c 	.word	0x0800765c
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	007a1200 	.word	0x007a1200
 8004bf8:	003d0900 	.word	0x003d0900

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b02      	ldr	r3, [pc, #8]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	20000010 	.word	0x20000010

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff2 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800767c 	.word	0x0800767c

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c3c:	f7ff ffde 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0adb      	lsrs	r3, r3, #11
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800767c 	.word	0x0800767c

08004c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <RCC_Delay+0x34>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <RCC_Delay+0x38>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c7c:	bf00      	nop
  }
  while (Delay --);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	60fa      	str	r2, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f9      	bne.n	8004c7c <RCC_Delay+0x1c>
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	20000010 	.word	0x20000010
 8004c98:	10624dd3 	.word	0x10624dd3

08004c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e076      	b.n	8004d9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbe:	d009      	beq.n	8004cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
 8004cc6:	e005      	b.n	8004cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd ff3c 	bl	8002b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	ea42 0103 	orr.w	r1, r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	0c1a      	lsrs	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f002 0204 	and.w	r2, r2, #4
 8004d7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_SPI_Transmit+0x22>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e126      	b.n	8005014 <HAL_SPI_Transmit+0x270>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dce:	f7fe f873 	bl	8002eb8 <HAL_GetTick>
 8004dd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
 8004de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004de8:	e10b      	b.n	8005002 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_Transmit+0x52>
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dfa:	e102      	b.n	8005002 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2203      	movs	r2, #3
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e42:	d10f      	bne.n	8004e64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d007      	beq.n	8004e82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d14b      	bne.n	8004f24 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Transmit+0xf6>
 8004e94:	8afb      	ldrh	r3, [r7, #22]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d13e      	bne.n	8004f18 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ebe:	e02b      	b.n	8004f18 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d112      	bne.n	8004ef4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	881a      	ldrh	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	1c9a      	adds	r2, r3, #2
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ef2:	e011      	b.n	8004f18 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef4:	f7fd ffe0 	bl	8002eb8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d803      	bhi.n	8004f0c <HAL_SPI_Transmit+0x168>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d102      	bne.n	8004f12 <HAL_SPI_Transmit+0x16e>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f16:	e074      	b.n	8005002 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ce      	bne.n	8004ec0 <HAL_SPI_Transmit+0x11c>
 8004f22:	e04c      	b.n	8004fbe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_Transmit+0x18e>
 8004f2c:	8afb      	ldrh	r3, [r7, #22]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d140      	bne.n	8004fb4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f58:	e02c      	b.n	8004fb4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d113      	bne.n	8004f90 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f8e:	e011      	b.n	8004fb4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f90:	f7fd ff92 	bl	8002eb8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d803      	bhi.n	8004fa8 <HAL_SPI_Transmit+0x204>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d102      	bne.n	8004fae <HAL_SPI_Transmit+0x20a>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fb2:	e026      	b.n	8005002 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1cd      	bne.n	8004f5a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fbb8 	bl	8005738 <SPI_EndRxTxTransaction>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e000      	b.n	8005002 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005012:	7ffb      	ldrb	r3, [r7, #31]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005038:	d112      	bne.n	8005060 <HAL_SPI_Receive+0x44>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10e      	bne.n	8005060 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2204      	movs	r2, #4
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f8f1 	bl	800523e <HAL_SPI_TransmitReceive>
 800505c:	4603      	mov	r3, r0
 800505e:	e0ea      	b.n	8005236 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_SPI_Receive+0x52>
 800506a:	2302      	movs	r3, #2
 800506c:	e0e3      	b.n	8005236 <HAL_SPI_Receive+0x21a>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005076:	f7fd ff1f 	bl	8002eb8 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d002      	beq.n	800508e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005088:	2302      	movs	r3, #2
 800508a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800508c:	e0ca      	b.n	8005224 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_SPI_Receive+0x7e>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800509e:	e0c1      	b.n	8005224 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2204      	movs	r2, #4
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e6:	d10f      	bne.n	8005108 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d007      	beq.n	8005126 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005124:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d162      	bne.n	80051f4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800512e:	e02e      	b.n	800518e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d115      	bne.n	800516a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f103 020c 	add.w	r2, r3, #12
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	7812      	ldrb	r2, [r2, #0]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005168:	e011      	b.n	800518e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800516a:	f7fd fea5 	bl	8002eb8 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d803      	bhi.n	8005182 <HAL_SPI_Receive+0x166>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d102      	bne.n	8005188 <HAL_SPI_Receive+0x16c>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800518c:	e04a      	b.n	8005224 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1cb      	bne.n	8005130 <HAL_SPI_Receive+0x114>
 8005198:	e031      	b.n	80051fe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d113      	bne.n	80051d0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	b292      	uxth	r2, r2
 80051b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ce:	e011      	b.n	80051f4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d0:	f7fd fe72 	bl	8002eb8 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d803      	bhi.n	80051e8 <HAL_SPI_Receive+0x1cc>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_Receive+0x1d2>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051f2:	e017      	b.n	8005224 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1cd      	bne.n	800519a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fa46 	bl	8005694 <SPI_EndRxTransaction>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	75fb      	strb	r3, [r7, #23]
 8005220:	e000      	b.n	8005224 <HAL_SPI_Receive+0x208>
  }

error :
 8005222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08c      	sub	sp, #48	; 0x30
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800524c:	2301      	movs	r3, #1
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x26>
 8005260:	2302      	movs	r3, #2
 8005262:	e18a      	b.n	800557a <HAL_SPI_TransmitReceive+0x33c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800526c:	f7fd fe24 	bl	8002eb8 <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005282:	887b      	ldrh	r3, [r7, #2]
 8005284:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800528a:	2b01      	cmp	r3, #1
 800528c:	d00f      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x70>
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005294:	d107      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x68>
 800529e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d003      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052ac:	e15b      	b.n	8005566 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x82>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x82>
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052c6:	e14e      	b.n	8005566 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d003      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2205      	movs	r2, #5
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	887a      	ldrh	r2, [r7, #2]
 80052f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	887a      	ldrh	r2, [r7, #2]
 80052fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d007      	beq.n	8005330 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d178      	bne.n	800542c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_SPI_TransmitReceive+0x10a>
 8005342:	8b7b      	ldrh	r3, [r7, #26]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d166      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800536c:	e053      	b.n	8005416 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11b      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x176>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x176>
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d113      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	881a      	ldrh	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d119      	bne.n	80053f6 <HAL_SPI_TransmitReceive+0x1b8>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d014      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	b292      	uxth	r2, r2
 80053d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	1c9a      	adds	r2, r3, #2
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053f2:	2301      	movs	r3, #1
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053f6:	f7fd fd5f 	bl	8002eb8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005402:	429a      	cmp	r2, r3
 8005404:	d807      	bhi.n	8005416 <HAL_SPI_TransmitReceive+0x1d8>
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d003      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005414:	e0a7      	b.n	8005566 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1a6      	bne.n	800536e <HAL_SPI_TransmitReceive+0x130>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1a1      	bne.n	800536e <HAL_SPI_TransmitReceive+0x130>
 800542a:	e07c      	b.n	8005526 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_SPI_TransmitReceive+0x1fc>
 8005434:	8b7b      	ldrh	r3, [r7, #26]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d16b      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005460:	e057      	b.n	8005512 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b02      	cmp	r3, #2
 800546e:	d11c      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x26c>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x26c>
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d114      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	7812      	ldrb	r2, [r2, #0]
 800548c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d119      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x2ae>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e8:	2301      	movs	r3, #1
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054ec:	f7fd fce4 	bl	8002eb8 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d803      	bhi.n	8005504 <HAL_SPI_TransmitReceive+0x2c6>
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005502:	d102      	bne.n	800550a <HAL_SPI_TransmitReceive+0x2cc>
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005510:	e029      	b.n	8005566 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1a2      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x224>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d19d      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f904 	bl	8005738 <SPI_EndRxTxTransaction>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d006      	beq.n	8005544 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005542:	e010      	b.n	8005566 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	e000      	b.n	8005566 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005564:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005576:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005594:	f7fd fc90 	bl	8002eb8 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055a4:	f7fd fc88 	bl	8002eb8 <HAL_GetTick>
 80055a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	015b      	lsls	r3, r3, #5
 80055b0:	0d1b      	lsrs	r3, r3, #20
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	fb02 f303 	mul.w	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ba:	e054      	b.n	8005666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d050      	beq.n	8005666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055c4:	f7fd fc78 	bl	8002eb8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d902      	bls.n	80055da <SPI_WaitFlagStateUntilTimeout+0x56>
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d13d      	bne.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f2:	d111      	bne.n	8005618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	d004      	beq.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d107      	bne.n	8005618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005620:	d10f      	bne.n	8005642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e017      	b.n	8005686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3b01      	subs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d19b      	bne.n	80055bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000010 	.word	0x20000010

08005694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a8:	d111      	bne.n	80056ce <SPI_EndRxTransaction+0x3a>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b2:	d004      	beq.n	80056be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056bc:	d107      	bne.n	80056ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056cc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d117      	bne.n	8005708 <SPI_EndRxTransaction+0x74>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	d112      	bne.n	8005708 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2101      	movs	r1, #1
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff ff49 	bl	8005584 <SPI_WaitFlagStateUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01a      	beq.n	800572e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e013      	b.n	8005730 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff ff36 	bl	8005584 <SPI_WaitFlagStateUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e000      	b.n	8005730 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff ff18 	bl	8005584 <SPI_WaitFlagStateUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e000      	b.n	800576c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e041      	b.n	800580a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd fa30 	bl	8002c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fa70 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d001      	beq.n	800582c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e03a      	b.n	80058a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_TIM_Base_Start_IT+0x98>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x58>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d009      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x58>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x58>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d111      	bne.n	8005890 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b06      	cmp	r3, #6
 800587c:	d010      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588e:	e007      	b.n	80058a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800

080058b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d122      	bne.n	8005914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d11b      	bne.n	8005914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0202 	mvn.w	r2, #2
 80058e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9b1 	bl	8005c62 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9a4 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f9b3 	bl	8005c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b04      	cmp	r3, #4
 8005920:	d122      	bne.n	8005968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d11b      	bne.n	8005968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0204 	mvn.w	r2, #4
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f987 	bl	8005c62 <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f97a 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f989 	bl	8005c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b08      	cmp	r3, #8
 8005974:	d122      	bne.n	80059bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d11b      	bne.n	80059bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0208 	mvn.w	r2, #8
 800598c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2204      	movs	r2, #4
 8005992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f95d 	bl	8005c62 <HAL_TIM_IC_CaptureCallback>
 80059a8:	e005      	b.n	80059b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f950 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f95f 	bl	8005c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0210 	mvn.w	r2, #16
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2208      	movs	r2, #8
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f933 	bl	8005c62 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f926 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f935 	bl	8005c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d10e      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d107      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0201 	mvn.w	r2, #1
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fc fb8a 	bl	8002150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b80      	cmp	r3, #128	; 0x80
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa77 	bl	8005f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8f9 	bl	8005c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0220 	mvn.w	r2, #32
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa42 	bl	8005f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x18>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0b3      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x180>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0xd0>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1e:	f200 8087 	bhi.w	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	f000 8085 	beq.w	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d87f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b30:	2b70      	cmp	r3, #112	; 0x70
 8005b32:	d01a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xa2>
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d87b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b38:	2b60      	cmp	r3, #96	; 0x60
 8005b3a:	d050      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x116>
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d877      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d03c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xf6>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d873      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d058      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x136>
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d064      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d86b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d060      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d867      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d05a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b68:	e062      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f000 f966 	bl	8005e4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	609a      	str	r2, [r3, #8]
      break;
 8005b96:	e04e      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f000 f94f 	bl	8005e4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e03b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 f8c6 	bl	8005d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2150      	movs	r1, #80	; 0x50
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f91d 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e02b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 f8e4 	bl	8005db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2160      	movs	r1, #96	; 0x60
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f90d 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e01b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 f8a6 	bl	8005d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f8fd 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 f8f4 	bl	8005e16 <TIM_ITRx_SetConfig>
        break;
 8005c2e:	e002      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <TIM_Base_SetConfig+0xb8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_Base_SetConfig+0x30>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb6:	d007      	beq.n	8005cc8 <TIM_Base_SetConfig+0x30>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_Base_SetConfig+0xbc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0x30>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <TIM_Base_SetConfig+0xc0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <TIM_Base_SetConfig+0xb8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_Base_SetConfig+0x62>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d007      	beq.n	8005cfa <TIM_Base_SetConfig+0x62>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <TIM_Base_SetConfig+0xbc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_Base_SetConfig+0x62>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <TIM_Base_SetConfig+0xc0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a07      	ldr	r2, [pc, #28]	; (8005d50 <TIM_Base_SetConfig+0xb8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d103      	bne.n	8005d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	615a      	str	r2, [r3, #20]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800

08005d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 030a 	bic.w	r3, r3, #10
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f023 0210 	bic.w	r2, r3, #16
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	031b      	lsls	r3, r3, #12
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f043 0307 	orr.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	609a      	str	r2, [r3, #8]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	021a      	lsls	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	609a      	str	r2, [r3, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e046      	b.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d009      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800

08005f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e03f      	b.n	8005ffa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc fe5a 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	; 0x24
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f905 	bl	80061bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	; 0x28
 8006006:	af02      	add	r7, sp, #8
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b20      	cmp	r3, #32
 8006020:	d17c      	bne.n	800611c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_UART_Transmit+0x2c>
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e075      	b.n	800611e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit+0x3e>
 800603c:	2302      	movs	r3, #2
 800603e:	e06e      	b.n	800611e <HAL_UART_Transmit+0x11c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006056:	f7fc ff2f 	bl	8002eb8 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006070:	d108      	bne.n	8006084 <HAL_UART_Transmit+0x82>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e003      	b.n	800608c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006094:	e02a      	b.n	80060ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f840 	bl	8006126 <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e036      	b.n	800611e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	3302      	adds	r3, #2
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e007      	b.n	80060de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	3301      	adds	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1cf      	bne.n	8006096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2140      	movs	r1, #64	; 0x40
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f810 	bl	8006126 <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e006      	b.n	800611e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006136:	e02c      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d028      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0x30>
 8006146:	f7fc feb7 	bl	8002eb8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	429a      	cmp	r2, r3
 8006154:	d21d      	bcs.n	8006192 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006164:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695a      	ldr	r2, [r3, #20]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e00f      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d0c3      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061f6:	f023 030c 	bic.w	r3, r3, #12
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	430b      	orrs	r3, r1
 8006202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2c      	ldr	r2, [pc, #176]	; (80062d0 <UART_SetConfig+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d103      	bne.n	800622c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006224:	f7fe fd08 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	e002      	b.n	8006232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800622c:	f7fe fcf0 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8006230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009a      	lsls	r2, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <UART_SetConfig+0x118>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	0119      	lsls	r1, r3, #4
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009a      	lsls	r2, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fbb2 f2f3 	udiv	r2, r2, r3
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <UART_SetConfig+0x118>)
 800626a:	fba3 0302 	umull	r0, r3, r3, r2
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2064      	movs	r0, #100	; 0x64
 8006272:	fb00 f303 	mul.w	r3, r0, r3
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	3332      	adds	r3, #50	; 0x32
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <UART_SetConfig+0x118>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006288:	4419      	add	r1, r3
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009a      	lsls	r2, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <UART_SetConfig+0x118>)
 80062a2:	fba3 0302 	umull	r0, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2064      	movs	r0, #100	; 0x64
 80062aa:	fb00 f303 	mul.w	r3, r0, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	3332      	adds	r3, #50	; 0x32
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <UART_SetConfig+0x118>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	440a      	add	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40013800 	.word	0x40013800
 80062d4:	51eb851f 	.word	0x51eb851f

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	; (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	2000001c 	.word	0x2000001c

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	2600      	movs	r6, #0
 80062e8:	4d0c      	ldr	r5, [pc, #48]	; (800631c <__libc_init_array+0x38>)
 80062ea:	4c0d      	ldr	r4, [pc, #52]	; (8006320 <__libc_init_array+0x3c>)
 80062ec:	1b64      	subs	r4, r4, r5
 80062ee:	10a4      	asrs	r4, r4, #2
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	f000 ff02 	bl	80070fc <_init>
 80062f8:	2600      	movs	r6, #0
 80062fa:	4d0a      	ldr	r5, [pc, #40]	; (8006324 <__libc_init_array+0x40>)
 80062fc:	4c0a      	ldr	r4, [pc, #40]	; (8006328 <__libc_init_array+0x44>)
 80062fe:	1b64      	subs	r4, r4, r5
 8006300:	10a4      	asrs	r4, r4, #2
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	08007728 	.word	0x08007728
 8006320:	08007728 	.word	0x08007728
 8006324:	08007728 	.word	0x08007728
 8006328:	0800772c 	.word	0x0800772c

0800632c <memcpy>:
 800632c:	440a      	add	r2, r1
 800632e:	4291      	cmp	r1, r2
 8006330:	f100 33ff 	add.w	r3, r0, #4294967295
 8006334:	d100      	bne.n	8006338 <memcpy+0xc>
 8006336:	4770      	bx	lr
 8006338:	b510      	push	{r4, lr}
 800633a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633e:	4291      	cmp	r1, r2
 8006340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006344:	d1f9      	bne.n	800633a <memcpy+0xe>
 8006346:	bd10      	pop	{r4, pc}

08006348 <memset>:
 8006348:	4603      	mov	r3, r0
 800634a:	4402      	add	r2, r0
 800634c:	4293      	cmp	r3, r2
 800634e:	d100      	bne.n	8006352 <memset+0xa>
 8006350:	4770      	bx	lr
 8006352:	f803 1b01 	strb.w	r1, [r3], #1
 8006356:	e7f9      	b.n	800634c <memset+0x4>

08006358 <siprintf>:
 8006358:	b40e      	push	{r1, r2, r3}
 800635a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800635e:	b500      	push	{lr}
 8006360:	b09c      	sub	sp, #112	; 0x70
 8006362:	ab1d      	add	r3, sp, #116	; 0x74
 8006364:	9002      	str	r0, [sp, #8]
 8006366:	9006      	str	r0, [sp, #24]
 8006368:	9107      	str	r1, [sp, #28]
 800636a:	9104      	str	r1, [sp, #16]
 800636c:	4808      	ldr	r0, [pc, #32]	; (8006390 <siprintf+0x38>)
 800636e:	4909      	ldr	r1, [pc, #36]	; (8006394 <siprintf+0x3c>)
 8006370:	f853 2b04 	ldr.w	r2, [r3], #4
 8006374:	9105      	str	r1, [sp, #20]
 8006376:	6800      	ldr	r0, [r0, #0]
 8006378:	a902      	add	r1, sp, #8
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	f000 f868 	bl	8006450 <_svfiprintf_r>
 8006380:	2200      	movs	r2, #0
 8006382:	9b02      	ldr	r3, [sp, #8]
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	b01c      	add	sp, #112	; 0x70
 8006388:	f85d eb04 	ldr.w	lr, [sp], #4
 800638c:	b003      	add	sp, #12
 800638e:	4770      	bx	lr
 8006390:	2000001c 	.word	0x2000001c
 8006394:	ffff0208 	.word	0xffff0208

08006398 <__ssputs_r>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	688e      	ldr	r6, [r1, #8]
 800639e:	4682      	mov	sl, r0
 80063a0:	429e      	cmp	r6, r3
 80063a2:	460c      	mov	r4, r1
 80063a4:	4690      	mov	r8, r2
 80063a6:	461f      	mov	r7, r3
 80063a8:	d838      	bhi.n	800641c <__ssputs_r+0x84>
 80063aa:	898a      	ldrh	r2, [r1, #12]
 80063ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063b0:	d032      	beq.n	8006418 <__ssputs_r+0x80>
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	6909      	ldr	r1, [r1, #16]
 80063b6:	3301      	adds	r3, #1
 80063b8:	eba5 0901 	sub.w	r9, r5, r1
 80063bc:	6965      	ldr	r5, [r4, #20]
 80063be:	444b      	add	r3, r9
 80063c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063c8:	106d      	asrs	r5, r5, #1
 80063ca:	429d      	cmp	r5, r3
 80063cc:	bf38      	it	cc
 80063ce:	461d      	movcc	r5, r3
 80063d0:	0553      	lsls	r3, r2, #21
 80063d2:	d531      	bpl.n	8006438 <__ssputs_r+0xa0>
 80063d4:	4629      	mov	r1, r5
 80063d6:	f000 fb61 	bl	8006a9c <_malloc_r>
 80063da:	4606      	mov	r6, r0
 80063dc:	b950      	cbnz	r0, 80063f4 <__ssputs_r+0x5c>
 80063de:	230c      	movs	r3, #12
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	f8ca 3000 	str.w	r3, [sl]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f4:	464a      	mov	r2, r9
 80063f6:	6921      	ldr	r1, [r4, #16]
 80063f8:	f7ff ff98 	bl	800632c <memcpy>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	6126      	str	r6, [r4, #16]
 800640a:	444e      	add	r6, r9
 800640c:	6026      	str	r6, [r4, #0]
 800640e:	463e      	mov	r6, r7
 8006410:	6165      	str	r5, [r4, #20]
 8006412:	eba5 0509 	sub.w	r5, r5, r9
 8006416:	60a5      	str	r5, [r4, #8]
 8006418:	42be      	cmp	r6, r7
 800641a:	d900      	bls.n	800641e <__ssputs_r+0x86>
 800641c:	463e      	mov	r6, r7
 800641e:	4632      	mov	r2, r6
 8006420:	4641      	mov	r1, r8
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	f000 fab8 	bl	8006998 <memmove>
 8006428:	68a3      	ldr	r3, [r4, #8]
 800642a:	2000      	movs	r0, #0
 800642c:	1b9b      	subs	r3, r3, r6
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	4433      	add	r3, r6
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	e7db      	b.n	80063f0 <__ssputs_r+0x58>
 8006438:	462a      	mov	r2, r5
 800643a:	f000 fba3 	bl	8006b84 <_realloc_r>
 800643e:	4606      	mov	r6, r0
 8006440:	2800      	cmp	r0, #0
 8006442:	d1e1      	bne.n	8006408 <__ssputs_r+0x70>
 8006444:	4650      	mov	r0, sl
 8006446:	6921      	ldr	r1, [r4, #16]
 8006448:	f000 fac0 	bl	80069cc <_free_r>
 800644c:	e7c7      	b.n	80063de <__ssputs_r+0x46>
	...

08006450 <_svfiprintf_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	4698      	mov	r8, r3
 8006456:	898b      	ldrh	r3, [r1, #12]
 8006458:	4607      	mov	r7, r0
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	460d      	mov	r5, r1
 800645e:	4614      	mov	r4, r2
 8006460:	b09d      	sub	sp, #116	; 0x74
 8006462:	d50e      	bpl.n	8006482 <_svfiprintf_r+0x32>
 8006464:	690b      	ldr	r3, [r1, #16]
 8006466:	b963      	cbnz	r3, 8006482 <_svfiprintf_r+0x32>
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	f000 fb17 	bl	8006a9c <_malloc_r>
 800646e:	6028      	str	r0, [r5, #0]
 8006470:	6128      	str	r0, [r5, #16]
 8006472:	b920      	cbnz	r0, 800647e <_svfiprintf_r+0x2e>
 8006474:	230c      	movs	r3, #12
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e0d1      	b.n	8006622 <_svfiprintf_r+0x1d2>
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	616b      	str	r3, [r5, #20]
 8006482:	2300      	movs	r3, #0
 8006484:	9309      	str	r3, [sp, #36]	; 0x24
 8006486:	2320      	movs	r3, #32
 8006488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800648c:	2330      	movs	r3, #48	; 0x30
 800648e:	f04f 0901 	mov.w	r9, #1
 8006492:	f8cd 800c 	str.w	r8, [sp, #12]
 8006496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800663c <_svfiprintf_r+0x1ec>
 800649a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800649e:	4623      	mov	r3, r4
 80064a0:	469a      	mov	sl, r3
 80064a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064a6:	b10a      	cbz	r2, 80064ac <_svfiprintf_r+0x5c>
 80064a8:	2a25      	cmp	r2, #37	; 0x25
 80064aa:	d1f9      	bne.n	80064a0 <_svfiprintf_r+0x50>
 80064ac:	ebba 0b04 	subs.w	fp, sl, r4
 80064b0:	d00b      	beq.n	80064ca <_svfiprintf_r+0x7a>
 80064b2:	465b      	mov	r3, fp
 80064b4:	4622      	mov	r2, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	4638      	mov	r0, r7
 80064ba:	f7ff ff6d 	bl	8006398 <__ssputs_r>
 80064be:	3001      	adds	r0, #1
 80064c0:	f000 80aa 	beq.w	8006618 <_svfiprintf_r+0x1c8>
 80064c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c6:	445a      	add	r2, fp
 80064c8:	9209      	str	r2, [sp, #36]	; 0x24
 80064ca:	f89a 3000 	ldrb.w	r3, [sl]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 80a2 	beq.w	8006618 <_svfiprintf_r+0x1c8>
 80064d4:	2300      	movs	r3, #0
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295
 80064da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064de:	f10a 0a01 	add.w	sl, sl, #1
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	9307      	str	r3, [sp, #28]
 80064e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ea:	931a      	str	r3, [sp, #104]	; 0x68
 80064ec:	4654      	mov	r4, sl
 80064ee:	2205      	movs	r2, #5
 80064f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f4:	4851      	ldr	r0, [pc, #324]	; (800663c <_svfiprintf_r+0x1ec>)
 80064f6:	f000 fa41 	bl	800697c <memchr>
 80064fa:	9a04      	ldr	r2, [sp, #16]
 80064fc:	b9d8      	cbnz	r0, 8006536 <_svfiprintf_r+0xe6>
 80064fe:	06d0      	lsls	r0, r2, #27
 8006500:	bf44      	itt	mi
 8006502:	2320      	movmi	r3, #32
 8006504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006508:	0711      	lsls	r1, r2, #28
 800650a:	bf44      	itt	mi
 800650c:	232b      	movmi	r3, #43	; 0x2b
 800650e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006512:	f89a 3000 	ldrb.w	r3, [sl]
 8006516:	2b2a      	cmp	r3, #42	; 0x2a
 8006518:	d015      	beq.n	8006546 <_svfiprintf_r+0xf6>
 800651a:	4654      	mov	r4, sl
 800651c:	2000      	movs	r0, #0
 800651e:	f04f 0c0a 	mov.w	ip, #10
 8006522:	9a07      	ldr	r2, [sp, #28]
 8006524:	4621      	mov	r1, r4
 8006526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800652a:	3b30      	subs	r3, #48	; 0x30
 800652c:	2b09      	cmp	r3, #9
 800652e:	d94e      	bls.n	80065ce <_svfiprintf_r+0x17e>
 8006530:	b1b0      	cbz	r0, 8006560 <_svfiprintf_r+0x110>
 8006532:	9207      	str	r2, [sp, #28]
 8006534:	e014      	b.n	8006560 <_svfiprintf_r+0x110>
 8006536:	eba0 0308 	sub.w	r3, r0, r8
 800653a:	fa09 f303 	lsl.w	r3, r9, r3
 800653e:	4313      	orrs	r3, r2
 8006540:	46a2      	mov	sl, r4
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	e7d2      	b.n	80064ec <_svfiprintf_r+0x9c>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	1d19      	adds	r1, r3, #4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	9103      	str	r1, [sp, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	bfbb      	ittet	lt
 8006552:	425b      	neglt	r3, r3
 8006554:	f042 0202 	orrlt.w	r2, r2, #2
 8006558:	9307      	strge	r3, [sp, #28]
 800655a:	9307      	strlt	r3, [sp, #28]
 800655c:	bfb8      	it	lt
 800655e:	9204      	strlt	r2, [sp, #16]
 8006560:	7823      	ldrb	r3, [r4, #0]
 8006562:	2b2e      	cmp	r3, #46	; 0x2e
 8006564:	d10c      	bne.n	8006580 <_svfiprintf_r+0x130>
 8006566:	7863      	ldrb	r3, [r4, #1]
 8006568:	2b2a      	cmp	r3, #42	; 0x2a
 800656a:	d135      	bne.n	80065d8 <_svfiprintf_r+0x188>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	3402      	adds	r4, #2
 8006570:	1d1a      	adds	r2, r3, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	9203      	str	r2, [sp, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfb8      	it	lt
 800657a:	f04f 33ff 	movlt.w	r3, #4294967295
 800657e:	9305      	str	r3, [sp, #20]
 8006580:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006640 <_svfiprintf_r+0x1f0>
 8006584:	2203      	movs	r2, #3
 8006586:	4650      	mov	r0, sl
 8006588:	7821      	ldrb	r1, [r4, #0]
 800658a:	f000 f9f7 	bl	800697c <memchr>
 800658e:	b140      	cbz	r0, 80065a2 <_svfiprintf_r+0x152>
 8006590:	2340      	movs	r3, #64	; 0x40
 8006592:	eba0 000a 	sub.w	r0, r0, sl
 8006596:	fa03 f000 	lsl.w	r0, r3, r0
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	3401      	adds	r4, #1
 800659e:	4303      	orrs	r3, r0
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a6:	2206      	movs	r2, #6
 80065a8:	4826      	ldr	r0, [pc, #152]	; (8006644 <_svfiprintf_r+0x1f4>)
 80065aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ae:	f000 f9e5 	bl	800697c <memchr>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d038      	beq.n	8006628 <_svfiprintf_r+0x1d8>
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <_svfiprintf_r+0x1f8>)
 80065b8:	bb1b      	cbnz	r3, 8006602 <_svfiprintf_r+0x1b2>
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	3307      	adds	r3, #7
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	3308      	adds	r3, #8
 80065c4:	9303      	str	r3, [sp, #12]
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	4433      	add	r3, r6
 80065ca:	9309      	str	r3, [sp, #36]	; 0x24
 80065cc:	e767      	b.n	800649e <_svfiprintf_r+0x4e>
 80065ce:	460c      	mov	r4, r1
 80065d0:	2001      	movs	r0, #1
 80065d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d6:	e7a5      	b.n	8006524 <_svfiprintf_r+0xd4>
 80065d8:	2300      	movs	r3, #0
 80065da:	f04f 0c0a 	mov.w	ip, #10
 80065de:	4619      	mov	r1, r3
 80065e0:	3401      	adds	r4, #1
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	4620      	mov	r0, r4
 80065e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ea:	3a30      	subs	r2, #48	; 0x30
 80065ec:	2a09      	cmp	r2, #9
 80065ee:	d903      	bls.n	80065f8 <_svfiprintf_r+0x1a8>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0c5      	beq.n	8006580 <_svfiprintf_r+0x130>
 80065f4:	9105      	str	r1, [sp, #20]
 80065f6:	e7c3      	b.n	8006580 <_svfiprintf_r+0x130>
 80065f8:	4604      	mov	r4, r0
 80065fa:	2301      	movs	r3, #1
 80065fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006600:	e7f0      	b.n	80065e4 <_svfiprintf_r+0x194>
 8006602:	ab03      	add	r3, sp, #12
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	462a      	mov	r2, r5
 8006608:	4638      	mov	r0, r7
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <_svfiprintf_r+0x1fc>)
 800660c:	a904      	add	r1, sp, #16
 800660e:	f3af 8000 	nop.w
 8006612:	1c42      	adds	r2, r0, #1
 8006614:	4606      	mov	r6, r0
 8006616:	d1d6      	bne.n	80065c6 <_svfiprintf_r+0x176>
 8006618:	89ab      	ldrh	r3, [r5, #12]
 800661a:	065b      	lsls	r3, r3, #25
 800661c:	f53f af2c 	bmi.w	8006478 <_svfiprintf_r+0x28>
 8006620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006622:	b01d      	add	sp, #116	; 0x74
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	ab03      	add	r3, sp, #12
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	462a      	mov	r2, r5
 800662e:	4638      	mov	r0, r7
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <_svfiprintf_r+0x1fc>)
 8006632:	a904      	add	r1, sp, #16
 8006634:	f000 f87c 	bl	8006730 <_printf_i>
 8006638:	e7eb      	b.n	8006612 <_svfiprintf_r+0x1c2>
 800663a:	bf00      	nop
 800663c:	08007684 	.word	0x08007684
 8006640:	0800768a 	.word	0x0800768a
 8006644:	0800768e 	.word	0x0800768e
 8006648:	00000000 	.word	0x00000000
 800664c:	08006399 	.word	0x08006399

08006650 <_printf_common>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	4616      	mov	r6, r2
 8006656:	4699      	mov	r9, r3
 8006658:	688a      	ldr	r2, [r1, #8]
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	4607      	mov	r7, r0
 800665e:	4293      	cmp	r3, r2
 8006660:	bfb8      	it	lt
 8006662:	4613      	movlt	r3, r2
 8006664:	6033      	str	r3, [r6, #0]
 8006666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800666a:	460c      	mov	r4, r1
 800666c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006670:	b10a      	cbz	r2, 8006676 <_printf_common+0x26>
 8006672:	3301      	adds	r3, #1
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	0699      	lsls	r1, r3, #26
 800667a:	bf42      	ittt	mi
 800667c:	6833      	ldrmi	r3, [r6, #0]
 800667e:	3302      	addmi	r3, #2
 8006680:	6033      	strmi	r3, [r6, #0]
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	f015 0506 	ands.w	r5, r5, #6
 8006688:	d106      	bne.n	8006698 <_printf_common+0x48>
 800668a:	f104 0a19 	add.w	sl, r4, #25
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	6832      	ldr	r2, [r6, #0]
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	42ab      	cmp	r3, r5
 8006696:	dc28      	bgt.n	80066ea <_printf_common+0x9a>
 8006698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800669c:	1e13      	subs	r3, r2, #0
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	bf18      	it	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	0692      	lsls	r2, r2, #26
 80066a6:	d42d      	bmi.n	8006704 <_printf_common+0xb4>
 80066a8:	4649      	mov	r1, r9
 80066aa:	4638      	mov	r0, r7
 80066ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b0:	47c0      	blx	r8
 80066b2:	3001      	adds	r0, #1
 80066b4:	d020      	beq.n	80066f8 <_printf_common+0xa8>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	68e5      	ldr	r5, [r4, #12]
 80066ba:	f003 0306 	and.w	r3, r3, #6
 80066be:	2b04      	cmp	r3, #4
 80066c0:	bf18      	it	ne
 80066c2:	2500      	movne	r5, #0
 80066c4:	6832      	ldr	r2, [r6, #0]
 80066c6:	f04f 0600 	mov.w	r6, #0
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	bf08      	it	eq
 80066ce:	1aad      	subeq	r5, r5, r2
 80066d0:	6922      	ldr	r2, [r4, #16]
 80066d2:	bf08      	it	eq
 80066d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d8:	4293      	cmp	r3, r2
 80066da:	bfc4      	itt	gt
 80066dc:	1a9b      	subgt	r3, r3, r2
 80066de:	18ed      	addgt	r5, r5, r3
 80066e0:	341a      	adds	r4, #26
 80066e2:	42b5      	cmp	r5, r6
 80066e4:	d11a      	bne.n	800671c <_printf_common+0xcc>
 80066e6:	2000      	movs	r0, #0
 80066e8:	e008      	b.n	80066fc <_printf_common+0xac>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4652      	mov	r2, sl
 80066ee:	4649      	mov	r1, r9
 80066f0:	4638      	mov	r0, r7
 80066f2:	47c0      	blx	r8
 80066f4:	3001      	adds	r0, #1
 80066f6:	d103      	bne.n	8006700 <_printf_common+0xb0>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006700:	3501      	adds	r5, #1
 8006702:	e7c4      	b.n	800668e <_printf_common+0x3e>
 8006704:	2030      	movs	r0, #48	; 0x30
 8006706:	18e1      	adds	r1, r4, r3
 8006708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006712:	4422      	add	r2, r4
 8006714:	3302      	adds	r3, #2
 8006716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800671a:	e7c5      	b.n	80066a8 <_printf_common+0x58>
 800671c:	2301      	movs	r3, #1
 800671e:	4622      	mov	r2, r4
 8006720:	4649      	mov	r1, r9
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	3001      	adds	r0, #1
 8006728:	d0e6      	beq.n	80066f8 <_printf_common+0xa8>
 800672a:	3601      	adds	r6, #1
 800672c:	e7d9      	b.n	80066e2 <_printf_common+0x92>
	...

08006730 <_printf_i>:
 8006730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	7e0f      	ldrb	r7, [r1, #24]
 8006736:	4691      	mov	r9, r2
 8006738:	2f78      	cmp	r7, #120	; 0x78
 800673a:	4680      	mov	r8, r0
 800673c:	460c      	mov	r4, r1
 800673e:	469a      	mov	sl, r3
 8006740:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006746:	d807      	bhi.n	8006758 <_printf_i+0x28>
 8006748:	2f62      	cmp	r7, #98	; 0x62
 800674a:	d80a      	bhi.n	8006762 <_printf_i+0x32>
 800674c:	2f00      	cmp	r7, #0
 800674e:	f000 80d9 	beq.w	8006904 <_printf_i+0x1d4>
 8006752:	2f58      	cmp	r7, #88	; 0x58
 8006754:	f000 80a4 	beq.w	80068a0 <_printf_i+0x170>
 8006758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006760:	e03a      	b.n	80067d8 <_printf_i+0xa8>
 8006762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006766:	2b15      	cmp	r3, #21
 8006768:	d8f6      	bhi.n	8006758 <_printf_i+0x28>
 800676a:	a101      	add	r1, pc, #4	; (adr r1, 8006770 <_printf_i+0x40>)
 800676c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067dd 	.word	0x080067dd
 8006778:	08006759 	.word	0x08006759
 800677c:	08006759 	.word	0x08006759
 8006780:	08006759 	.word	0x08006759
 8006784:	08006759 	.word	0x08006759
 8006788:	080067dd 	.word	0x080067dd
 800678c:	08006759 	.word	0x08006759
 8006790:	08006759 	.word	0x08006759
 8006794:	08006759 	.word	0x08006759
 8006798:	08006759 	.word	0x08006759
 800679c:	080068eb 	.word	0x080068eb
 80067a0:	0800680d 	.word	0x0800680d
 80067a4:	080068cd 	.word	0x080068cd
 80067a8:	08006759 	.word	0x08006759
 80067ac:	08006759 	.word	0x08006759
 80067b0:	0800690d 	.word	0x0800690d
 80067b4:	08006759 	.word	0x08006759
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	08006759 	.word	0x08006759
 80067c0:	08006759 	.word	0x08006759
 80067c4:	080068d5 	.word	0x080068d5
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	1d1a      	adds	r2, r3, #4
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	602a      	str	r2, [r5, #0]
 80067d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d8:	2301      	movs	r3, #1
 80067da:	e0a4      	b.n	8006926 <_printf_i+0x1f6>
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	6829      	ldr	r1, [r5, #0]
 80067e0:	0606      	lsls	r6, r0, #24
 80067e2:	f101 0304 	add.w	r3, r1, #4
 80067e6:	d50a      	bpl.n	80067fe <_printf_i+0xce>
 80067e8:	680e      	ldr	r6, [r1, #0]
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	da03      	bge.n	80067f8 <_printf_i+0xc8>
 80067f0:	232d      	movs	r3, #45	; 0x2d
 80067f2:	4276      	negs	r6, r6
 80067f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f8:	230a      	movs	r3, #10
 80067fa:	485e      	ldr	r0, [pc, #376]	; (8006974 <_printf_i+0x244>)
 80067fc:	e019      	b.n	8006832 <_printf_i+0x102>
 80067fe:	680e      	ldr	r6, [r1, #0]
 8006800:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	bf18      	it	ne
 8006808:	b236      	sxthne	r6, r6
 800680a:	e7ef      	b.n	80067ec <_printf_i+0xbc>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	6029      	str	r1, [r5, #0]
 8006814:	0601      	lsls	r1, r0, #24
 8006816:	d501      	bpl.n	800681c <_printf_i+0xec>
 8006818:	681e      	ldr	r6, [r3, #0]
 800681a:	e002      	b.n	8006822 <_printf_i+0xf2>
 800681c:	0646      	lsls	r6, r0, #25
 800681e:	d5fb      	bpl.n	8006818 <_printf_i+0xe8>
 8006820:	881e      	ldrh	r6, [r3, #0]
 8006822:	2f6f      	cmp	r7, #111	; 0x6f
 8006824:	bf0c      	ite	eq
 8006826:	2308      	moveq	r3, #8
 8006828:	230a      	movne	r3, #10
 800682a:	4852      	ldr	r0, [pc, #328]	; (8006974 <_printf_i+0x244>)
 800682c:	2100      	movs	r1, #0
 800682e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006832:	6865      	ldr	r5, [r4, #4]
 8006834:	2d00      	cmp	r5, #0
 8006836:	bfa8      	it	ge
 8006838:	6821      	ldrge	r1, [r4, #0]
 800683a:	60a5      	str	r5, [r4, #8]
 800683c:	bfa4      	itt	ge
 800683e:	f021 0104 	bicge.w	r1, r1, #4
 8006842:	6021      	strge	r1, [r4, #0]
 8006844:	b90e      	cbnz	r6, 800684a <_printf_i+0x11a>
 8006846:	2d00      	cmp	r5, #0
 8006848:	d04d      	beq.n	80068e6 <_printf_i+0x1b6>
 800684a:	4615      	mov	r5, r2
 800684c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006850:	fb03 6711 	mls	r7, r3, r1, r6
 8006854:	5dc7      	ldrb	r7, [r0, r7]
 8006856:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800685a:	4637      	mov	r7, r6
 800685c:	42bb      	cmp	r3, r7
 800685e:	460e      	mov	r6, r1
 8006860:	d9f4      	bls.n	800684c <_printf_i+0x11c>
 8006862:	2b08      	cmp	r3, #8
 8006864:	d10b      	bne.n	800687e <_printf_i+0x14e>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	07de      	lsls	r6, r3, #31
 800686a:	d508      	bpl.n	800687e <_printf_i+0x14e>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	6861      	ldr	r1, [r4, #4]
 8006870:	4299      	cmp	r1, r3
 8006872:	bfde      	ittt	le
 8006874:	2330      	movle	r3, #48	; 0x30
 8006876:	f805 3c01 	strble.w	r3, [r5, #-1]
 800687a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800687e:	1b52      	subs	r2, r2, r5
 8006880:	6122      	str	r2, [r4, #16]
 8006882:	464b      	mov	r3, r9
 8006884:	4621      	mov	r1, r4
 8006886:	4640      	mov	r0, r8
 8006888:	f8cd a000 	str.w	sl, [sp]
 800688c:	aa03      	add	r2, sp, #12
 800688e:	f7ff fedf 	bl	8006650 <_printf_common>
 8006892:	3001      	adds	r0, #1
 8006894:	d14c      	bne.n	8006930 <_printf_i+0x200>
 8006896:	f04f 30ff 	mov.w	r0, #4294967295
 800689a:	b004      	add	sp, #16
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	4834      	ldr	r0, [pc, #208]	; (8006974 <_printf_i+0x244>)
 80068a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068a6:	6829      	ldr	r1, [r5, #0]
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80068ae:	6029      	str	r1, [r5, #0]
 80068b0:	061d      	lsls	r5, r3, #24
 80068b2:	d514      	bpl.n	80068de <_printf_i+0x1ae>
 80068b4:	07df      	lsls	r7, r3, #31
 80068b6:	bf44      	itt	mi
 80068b8:	f043 0320 	orrmi.w	r3, r3, #32
 80068bc:	6023      	strmi	r3, [r4, #0]
 80068be:	b91e      	cbnz	r6, 80068c8 <_printf_i+0x198>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	f023 0320 	bic.w	r3, r3, #32
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	2310      	movs	r3, #16
 80068ca:	e7af      	b.n	800682c <_printf_i+0xfc>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	f043 0320 	orr.w	r3, r3, #32
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	2378      	movs	r3, #120	; 0x78
 80068d6:	4828      	ldr	r0, [pc, #160]	; (8006978 <_printf_i+0x248>)
 80068d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068dc:	e7e3      	b.n	80068a6 <_printf_i+0x176>
 80068de:	0659      	lsls	r1, r3, #25
 80068e0:	bf48      	it	mi
 80068e2:	b2b6      	uxthmi	r6, r6
 80068e4:	e7e6      	b.n	80068b4 <_printf_i+0x184>
 80068e6:	4615      	mov	r5, r2
 80068e8:	e7bb      	b.n	8006862 <_printf_i+0x132>
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	6826      	ldr	r6, [r4, #0]
 80068ee:	1d18      	adds	r0, r3, #4
 80068f0:	6961      	ldr	r1, [r4, #20]
 80068f2:	6028      	str	r0, [r5, #0]
 80068f4:	0635      	lsls	r5, r6, #24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	d501      	bpl.n	80068fe <_printf_i+0x1ce>
 80068fa:	6019      	str	r1, [r3, #0]
 80068fc:	e002      	b.n	8006904 <_printf_i+0x1d4>
 80068fe:	0670      	lsls	r0, r6, #25
 8006900:	d5fb      	bpl.n	80068fa <_printf_i+0x1ca>
 8006902:	8019      	strh	r1, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	4615      	mov	r5, r2
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	e7ba      	b.n	8006882 <_printf_i+0x152>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	2100      	movs	r1, #0
 8006910:	1d1a      	adds	r2, r3, #4
 8006912:	602a      	str	r2, [r5, #0]
 8006914:	681d      	ldr	r5, [r3, #0]
 8006916:	6862      	ldr	r2, [r4, #4]
 8006918:	4628      	mov	r0, r5
 800691a:	f000 f82f 	bl	800697c <memchr>
 800691e:	b108      	cbz	r0, 8006924 <_printf_i+0x1f4>
 8006920:	1b40      	subs	r0, r0, r5
 8006922:	6060      	str	r0, [r4, #4]
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	2300      	movs	r3, #0
 800692a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692e:	e7a8      	b.n	8006882 <_printf_i+0x152>
 8006930:	462a      	mov	r2, r5
 8006932:	4649      	mov	r1, r9
 8006934:	4640      	mov	r0, r8
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	47d0      	blx	sl
 800693a:	3001      	adds	r0, #1
 800693c:	d0ab      	beq.n	8006896 <_printf_i+0x166>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	079b      	lsls	r3, r3, #30
 8006942:	d413      	bmi.n	800696c <_printf_i+0x23c>
 8006944:	68e0      	ldr	r0, [r4, #12]
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	4298      	cmp	r0, r3
 800694a:	bfb8      	it	lt
 800694c:	4618      	movlt	r0, r3
 800694e:	e7a4      	b.n	800689a <_printf_i+0x16a>
 8006950:	2301      	movs	r3, #1
 8006952:	4632      	mov	r2, r6
 8006954:	4649      	mov	r1, r9
 8006956:	4640      	mov	r0, r8
 8006958:	47d0      	blx	sl
 800695a:	3001      	adds	r0, #1
 800695c:	d09b      	beq.n	8006896 <_printf_i+0x166>
 800695e:	3501      	adds	r5, #1
 8006960:	68e3      	ldr	r3, [r4, #12]
 8006962:	9903      	ldr	r1, [sp, #12]
 8006964:	1a5b      	subs	r3, r3, r1
 8006966:	42ab      	cmp	r3, r5
 8006968:	dcf2      	bgt.n	8006950 <_printf_i+0x220>
 800696a:	e7eb      	b.n	8006944 <_printf_i+0x214>
 800696c:	2500      	movs	r5, #0
 800696e:	f104 0619 	add.w	r6, r4, #25
 8006972:	e7f5      	b.n	8006960 <_printf_i+0x230>
 8006974:	08007695 	.word	0x08007695
 8006978:	080076a6 	.word	0x080076a6

0800697c <memchr>:
 800697c:	4603      	mov	r3, r0
 800697e:	b510      	push	{r4, lr}
 8006980:	b2c9      	uxtb	r1, r1
 8006982:	4402      	add	r2, r0
 8006984:	4293      	cmp	r3, r2
 8006986:	4618      	mov	r0, r3
 8006988:	d101      	bne.n	800698e <memchr+0x12>
 800698a:	2000      	movs	r0, #0
 800698c:	e003      	b.n	8006996 <memchr+0x1a>
 800698e:	7804      	ldrb	r4, [r0, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	428c      	cmp	r4, r1
 8006994:	d1f6      	bne.n	8006984 <memchr+0x8>
 8006996:	bd10      	pop	{r4, pc}

08006998 <memmove>:
 8006998:	4288      	cmp	r0, r1
 800699a:	b510      	push	{r4, lr}
 800699c:	eb01 0402 	add.w	r4, r1, r2
 80069a0:	d902      	bls.n	80069a8 <memmove+0x10>
 80069a2:	4284      	cmp	r4, r0
 80069a4:	4623      	mov	r3, r4
 80069a6:	d807      	bhi.n	80069b8 <memmove+0x20>
 80069a8:	1e43      	subs	r3, r0, #1
 80069aa:	42a1      	cmp	r1, r4
 80069ac:	d008      	beq.n	80069c0 <memmove+0x28>
 80069ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069b6:	e7f8      	b.n	80069aa <memmove+0x12>
 80069b8:	4601      	mov	r1, r0
 80069ba:	4402      	add	r2, r0
 80069bc:	428a      	cmp	r2, r1
 80069be:	d100      	bne.n	80069c2 <memmove+0x2a>
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ca:	e7f7      	b.n	80069bc <memmove+0x24>

080069cc <_free_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4605      	mov	r5, r0
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d040      	beq.n	8006a56 <_free_r+0x8a>
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f0c      	subs	r4, r1, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfb8      	it	lt
 80069de:	18e4      	addlt	r4, r4, r3
 80069e0:	f000 f910 	bl	8006c04 <__malloc_lock>
 80069e4:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <_free_r+0x8c>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	b933      	cbnz	r3, 80069f8 <_free_r+0x2c>
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	6014      	str	r4, [r2, #0]
 80069ee:	4628      	mov	r0, r5
 80069f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f4:	f000 b90c 	b.w	8006c10 <__malloc_unlock>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d908      	bls.n	8006a0e <_free_r+0x42>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	1821      	adds	r1, r4, r0
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf01      	itttt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	1809      	addeq	r1, r1, r0
 8006a0a:	6021      	streq	r1, [r4, #0]
 8006a0c:	e7ed      	b.n	80069ea <_free_r+0x1e>
 8006a0e:	461a      	mov	r2, r3
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b10b      	cbz	r3, 8006a18 <_free_r+0x4c>
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d9fa      	bls.n	8006a0e <_free_r+0x42>
 8006a18:	6811      	ldr	r1, [r2, #0]
 8006a1a:	1850      	adds	r0, r2, r1
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d10b      	bne.n	8006a38 <_free_r+0x6c>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	4401      	add	r1, r0
 8006a24:	1850      	adds	r0, r2, r1
 8006a26:	4283      	cmp	r3, r0
 8006a28:	6011      	str	r1, [r2, #0]
 8006a2a:	d1e0      	bne.n	80069ee <_free_r+0x22>
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4401      	add	r1, r0
 8006a32:	6011      	str	r1, [r2, #0]
 8006a34:	6053      	str	r3, [r2, #4]
 8006a36:	e7da      	b.n	80069ee <_free_r+0x22>
 8006a38:	d902      	bls.n	8006a40 <_free_r+0x74>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	e7d6      	b.n	80069ee <_free_r+0x22>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf01      	itttt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6054      	str	r4, [r2, #4]
 8006a54:	e7cb      	b.n	80069ee <_free_r+0x22>
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	200002e8 	.word	0x200002e8

08006a5c <sbrk_aligned>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4e0e      	ldr	r6, [pc, #56]	; (8006a98 <sbrk_aligned+0x3c>)
 8006a60:	460c      	mov	r4, r1
 8006a62:	6831      	ldr	r1, [r6, #0]
 8006a64:	4605      	mov	r5, r0
 8006a66:	b911      	cbnz	r1, 8006a6e <sbrk_aligned+0x12>
 8006a68:	f000 f8bc 	bl	8006be4 <_sbrk_r>
 8006a6c:	6030      	str	r0, [r6, #0]
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 f8b7 	bl	8006be4 <_sbrk_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d00a      	beq.n	8006a90 <sbrk_aligned+0x34>
 8006a7a:	1cc4      	adds	r4, r0, #3
 8006a7c:	f024 0403 	bic.w	r4, r4, #3
 8006a80:	42a0      	cmp	r0, r4
 8006a82:	d007      	beq.n	8006a94 <sbrk_aligned+0x38>
 8006a84:	1a21      	subs	r1, r4, r0
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 f8ac 	bl	8006be4 <_sbrk_r>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d101      	bne.n	8006a94 <sbrk_aligned+0x38>
 8006a90:	f04f 34ff 	mov.w	r4, #4294967295
 8006a94:	4620      	mov	r0, r4
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	200002ec 	.word	0x200002ec

08006a9c <_malloc_r>:
 8006a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa0:	1ccd      	adds	r5, r1, #3
 8006aa2:	f025 0503 	bic.w	r5, r5, #3
 8006aa6:	3508      	adds	r5, #8
 8006aa8:	2d0c      	cmp	r5, #12
 8006aaa:	bf38      	it	cc
 8006aac:	250c      	movcc	r5, #12
 8006aae:	2d00      	cmp	r5, #0
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	db01      	blt.n	8006ab8 <_malloc_r+0x1c>
 8006ab4:	42a9      	cmp	r1, r5
 8006ab6:	d905      	bls.n	8006ac4 <_malloc_r+0x28>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	2600      	movs	r6, #0
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4630      	mov	r0, r6
 8006ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac4:	4e2e      	ldr	r6, [pc, #184]	; (8006b80 <_malloc_r+0xe4>)
 8006ac6:	f000 f89d 	bl	8006c04 <__malloc_lock>
 8006aca:	6833      	ldr	r3, [r6, #0]
 8006acc:	461c      	mov	r4, r3
 8006ace:	bb34      	cbnz	r4, 8006b1e <_malloc_r+0x82>
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7ff ffc2 	bl	8006a5c <sbrk_aligned>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	4604      	mov	r4, r0
 8006adc:	d14d      	bne.n	8006b7a <_malloc_r+0xde>
 8006ade:	6834      	ldr	r4, [r6, #0]
 8006ae0:	4626      	mov	r6, r4
 8006ae2:	2e00      	cmp	r6, #0
 8006ae4:	d140      	bne.n	8006b68 <_malloc_r+0xcc>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4638      	mov	r0, r7
 8006aec:	eb04 0803 	add.w	r8, r4, r3
 8006af0:	f000 f878 	bl	8006be4 <_sbrk_r>
 8006af4:	4580      	cmp	r8, r0
 8006af6:	d13a      	bne.n	8006b6e <_malloc_r+0xd2>
 8006af8:	6821      	ldr	r1, [r4, #0]
 8006afa:	3503      	adds	r5, #3
 8006afc:	1a6d      	subs	r5, r5, r1
 8006afe:	f025 0503 	bic.w	r5, r5, #3
 8006b02:	3508      	adds	r5, #8
 8006b04:	2d0c      	cmp	r5, #12
 8006b06:	bf38      	it	cc
 8006b08:	250c      	movcc	r5, #12
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7ff ffa5 	bl	8006a5c <sbrk_aligned>
 8006b12:	3001      	adds	r0, #1
 8006b14:	d02b      	beq.n	8006b6e <_malloc_r+0xd2>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	442b      	add	r3, r5
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	e00e      	b.n	8006b3c <_malloc_r+0xa0>
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	1b52      	subs	r2, r2, r5
 8006b22:	d41e      	bmi.n	8006b62 <_malloc_r+0xc6>
 8006b24:	2a0b      	cmp	r2, #11
 8006b26:	d916      	bls.n	8006b56 <_malloc_r+0xba>
 8006b28:	1961      	adds	r1, r4, r5
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	6025      	str	r5, [r4, #0]
 8006b2e:	bf18      	it	ne
 8006b30:	6059      	strne	r1, [r3, #4]
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	bf08      	it	eq
 8006b36:	6031      	streq	r1, [r6, #0]
 8006b38:	5162      	str	r2, [r4, r5]
 8006b3a:	604b      	str	r3, [r1, #4]
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f104 060b 	add.w	r6, r4, #11
 8006b42:	f000 f865 	bl	8006c10 <__malloc_unlock>
 8006b46:	f026 0607 	bic.w	r6, r6, #7
 8006b4a:	1d23      	adds	r3, r4, #4
 8006b4c:	1af2      	subs	r2, r6, r3
 8006b4e:	d0b6      	beq.n	8006abe <_malloc_r+0x22>
 8006b50:	1b9b      	subs	r3, r3, r6
 8006b52:	50a3      	str	r3, [r4, r2]
 8006b54:	e7b3      	b.n	8006abe <_malloc_r+0x22>
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	bf0c      	ite	eq
 8006b5c:	6032      	streq	r2, [r6, #0]
 8006b5e:	605a      	strne	r2, [r3, #4]
 8006b60:	e7ec      	b.n	8006b3c <_malloc_r+0xa0>
 8006b62:	4623      	mov	r3, r4
 8006b64:	6864      	ldr	r4, [r4, #4]
 8006b66:	e7b2      	b.n	8006ace <_malloc_r+0x32>
 8006b68:	4634      	mov	r4, r6
 8006b6a:	6876      	ldr	r6, [r6, #4]
 8006b6c:	e7b9      	b.n	8006ae2 <_malloc_r+0x46>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	4638      	mov	r0, r7
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	f000 f84c 	bl	8006c10 <__malloc_unlock>
 8006b78:	e7a1      	b.n	8006abe <_malloc_r+0x22>
 8006b7a:	6025      	str	r5, [r4, #0]
 8006b7c:	e7de      	b.n	8006b3c <_malloc_r+0xa0>
 8006b7e:	bf00      	nop
 8006b80:	200002e8 	.word	0x200002e8

08006b84 <_realloc_r>:
 8006b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b88:	4680      	mov	r8, r0
 8006b8a:	4614      	mov	r4, r2
 8006b8c:	460e      	mov	r6, r1
 8006b8e:	b921      	cbnz	r1, 8006b9a <_realloc_r+0x16>
 8006b90:	4611      	mov	r1, r2
 8006b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b96:	f7ff bf81 	b.w	8006a9c <_malloc_r>
 8006b9a:	b92a      	cbnz	r2, 8006ba8 <_realloc_r+0x24>
 8006b9c:	f7ff ff16 	bl	80069cc <_free_r>
 8006ba0:	4625      	mov	r5, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba8:	f000 f838 	bl	8006c1c <_malloc_usable_size_r>
 8006bac:	4284      	cmp	r4, r0
 8006bae:	4607      	mov	r7, r0
 8006bb0:	d802      	bhi.n	8006bb8 <_realloc_r+0x34>
 8006bb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bb6:	d812      	bhi.n	8006bde <_realloc_r+0x5a>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7ff ff6e 	bl	8006a9c <_malloc_r>
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d0ed      	beq.n	8006ba2 <_realloc_r+0x1e>
 8006bc6:	42bc      	cmp	r4, r7
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4631      	mov	r1, r6
 8006bcc:	bf28      	it	cs
 8006bce:	463a      	movcs	r2, r7
 8006bd0:	f7ff fbac 	bl	800632c <memcpy>
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f7ff fef8 	bl	80069cc <_free_r>
 8006bdc:	e7e1      	b.n	8006ba2 <_realloc_r+0x1e>
 8006bde:	4635      	mov	r5, r6
 8006be0:	e7df      	b.n	8006ba2 <_realloc_r+0x1e>
	...

08006be4 <_sbrk_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	2300      	movs	r3, #0
 8006be8:	4d05      	ldr	r5, [pc, #20]	; (8006c00 <_sbrk_r+0x1c>)
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fc f8a8 	bl	8002d44 <_sbrk>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_sbrk_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_sbrk_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200002f0 	.word	0x200002f0

08006c04 <__malloc_lock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	; (8006c0c <__malloc_lock+0x8>)
 8006c06:	f000 b811 	b.w	8006c2c <__retarget_lock_acquire_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	200002f4 	.word	0x200002f4

08006c10 <__malloc_unlock>:
 8006c10:	4801      	ldr	r0, [pc, #4]	; (8006c18 <__malloc_unlock+0x8>)
 8006c12:	f000 b80c 	b.w	8006c2e <__retarget_lock_release_recursive>
 8006c16:	bf00      	nop
 8006c18:	200002f4 	.word	0x200002f4

08006c1c <_malloc_usable_size_r>:
 8006c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c20:	1f18      	subs	r0, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bfbc      	itt	lt
 8006c26:	580b      	ldrlt	r3, [r1, r0]
 8006c28:	18c0      	addlt	r0, r0, r3
 8006c2a:	4770      	bx	lr

08006c2c <__retarget_lock_acquire_recursive>:
 8006c2c:	4770      	bx	lr

08006c2e <__retarget_lock_release_recursive>:
 8006c2e:	4770      	bx	lr

08006c30 <atan2>:
 8006c30:	f000 b802 	b.w	8006c38 <__ieee754_atan2>
 8006c34:	0000      	movs	r0, r0
	...

08006c38 <__ieee754_atan2>:
 8006c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	4692      	mov	sl, r2
 8006c3e:	4699      	mov	r9, r3
 8006c40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c44:	461f      	mov	r7, r3
 8006c46:	f1ca 0300 	rsb	r3, sl, #0
 8006c4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006dd0 <__ieee754_atan2+0x198>
 8006c4e:	ea43 030a 	orr.w	r3, r3, sl
 8006c52:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006c56:	4573      	cmp	r3, lr
 8006c58:	4604      	mov	r4, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	d808      	bhi.n	8006c70 <__ieee754_atan2+0x38>
 8006c5e:	4246      	negs	r6, r0
 8006c60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c64:	4306      	orrs	r6, r0
 8006c66:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006c6a:	4576      	cmp	r6, lr
 8006c6c:	468c      	mov	ip, r1
 8006c6e:	d908      	bls.n	8006c82 <__ieee754_atan2+0x4a>
 8006c70:	4652      	mov	r2, sl
 8006c72:	464b      	mov	r3, r9
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 fa78 	bl	800016c <__adddf3>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	460d      	mov	r5, r1
 8006c80:	e019      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006c82:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006c86:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006c8a:	ea56 060a 	orrs.w	r6, r6, sl
 8006c8e:	d103      	bne.n	8006c98 <__ieee754_atan2+0x60>
 8006c90:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	f000 b8a4 	b.w	8006de0 <atan>
 8006c98:	17be      	asrs	r6, r7, #30
 8006c9a:	f006 0602 	and.w	r6, r6, #2
 8006c9e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006ca2:	ea53 0100 	orrs.w	r1, r3, r0
 8006ca6:	d10a      	bne.n	8006cbe <__ieee754_atan2+0x86>
 8006ca8:	2e02      	cmp	r6, #2
 8006caa:	d067      	beq.n	8006d7c <__ieee754_atan2+0x144>
 8006cac:	2e03      	cmp	r6, #3
 8006cae:	d102      	bne.n	8006cb6 <__ieee754_atan2+0x7e>
 8006cb0:	a53b      	add	r5, pc, #236	; (adr r5, 8006da0 <__ieee754_atan2+0x168>)
 8006cb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	ea52 010a 	orrs.w	r1, r2, sl
 8006cc2:	d106      	bne.n	8006cd2 <__ieee754_atan2+0x9a>
 8006cc4:	f1bc 0f00 	cmp.w	ip, #0
 8006cc8:	da63      	bge.n	8006d92 <__ieee754_atan2+0x15a>
 8006cca:	a537      	add	r5, pc, #220	; (adr r5, 8006da8 <__ieee754_atan2+0x170>)
 8006ccc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006cd0:	e7f1      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006cd2:	4572      	cmp	r2, lr
 8006cd4:	d10f      	bne.n	8006cf6 <__ieee754_atan2+0xbe>
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f106 36ff 	add.w	r6, r6, #4294967295
 8006cdc:	d107      	bne.n	8006cee <__ieee754_atan2+0xb6>
 8006cde:	2e02      	cmp	r6, #2
 8006ce0:	d850      	bhi.n	8006d84 <__ieee754_atan2+0x14c>
 8006ce2:	4b3c      	ldr	r3, [pc, #240]	; (8006dd4 <__ieee754_atan2+0x19c>)
 8006ce4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006ce8:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006cec:	e7e3      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006cee:	2e02      	cmp	r6, #2
 8006cf0:	d84c      	bhi.n	8006d8c <__ieee754_atan2+0x154>
 8006cf2:	4b39      	ldr	r3, [pc, #228]	; (8006dd8 <__ieee754_atan2+0x1a0>)
 8006cf4:	e7f6      	b.n	8006ce4 <__ieee754_atan2+0xac>
 8006cf6:	4573      	cmp	r3, lr
 8006cf8:	d0e4      	beq.n	8006cc4 <__ieee754_atan2+0x8c>
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006d00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d04:	da20      	bge.n	8006d48 <__ieee754_atan2+0x110>
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	da01      	bge.n	8006d0e <__ieee754_atan2+0xd6>
 8006d0a:	323c      	adds	r2, #60	; 0x3c
 8006d0c:	db20      	blt.n	8006d50 <__ieee754_atan2+0x118>
 8006d0e:	4652      	mov	r2, sl
 8006d10:	464b      	mov	r3, r9
 8006d12:	4620      	mov	r0, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	f7f9 fd09 	bl	800072c <__aeabi_ddiv>
 8006d1a:	f000 f9eb 	bl	80070f4 <fabs>
 8006d1e:	f000 f85f 	bl	8006de0 <atan>
 8006d22:	4604      	mov	r4, r0
 8006d24:	460d      	mov	r5, r1
 8006d26:	2e01      	cmp	r6, #1
 8006d28:	d015      	beq.n	8006d56 <__ieee754_atan2+0x11e>
 8006d2a:	2e02      	cmp	r6, #2
 8006d2c:	d017      	beq.n	8006d5e <__ieee754_atan2+0x126>
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	d0c1      	beq.n	8006cb6 <__ieee754_atan2+0x7e>
 8006d32:	a31f      	add	r3, pc, #124	; (adr r3, 8006db0 <__ieee754_atan2+0x178>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	f7f9 fa14 	bl	8000168 <__aeabi_dsub>
 8006d40:	a31d      	add	r3, pc, #116	; (adr r3, 8006db8 <__ieee754_atan2+0x180>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	e016      	b.n	8006d76 <__ieee754_atan2+0x13e>
 8006d48:	a51d      	add	r5, pc, #116	; (adr r5, 8006dc0 <__ieee754_atan2+0x188>)
 8006d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d4e:	e7ea      	b.n	8006d26 <__ieee754_atan2+0xee>
 8006d50:	2400      	movs	r4, #0
 8006d52:	2500      	movs	r5, #0
 8006d54:	e7e7      	b.n	8006d26 <__ieee754_atan2+0xee>
 8006d56:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	e7ab      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006d5e:	a314      	add	r3, pc, #80	; (adr r3, 8006db0 <__ieee754_atan2+0x178>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7f9 f9fe 	bl	8000168 <__aeabi_dsub>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	a111      	add	r1, pc, #68	; (adr r1, 8006db8 <__ieee754_atan2+0x180>)
 8006d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d76:	f7f9 f9f7 	bl	8000168 <__aeabi_dsub>
 8006d7a:	e77f      	b.n	8006c7c <__ieee754_atan2+0x44>
 8006d7c:	a50e      	add	r5, pc, #56	; (adr r5, 8006db8 <__ieee754_atan2+0x180>)
 8006d7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d82:	e798      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006d84:	a510      	add	r5, pc, #64	; (adr r5, 8006dc8 <__ieee754_atan2+0x190>)
 8006d86:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d8a:	e794      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006d8c:	2400      	movs	r4, #0
 8006d8e:	2500      	movs	r5, #0
 8006d90:	e791      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006d92:	a50b      	add	r5, pc, #44	; (adr r5, 8006dc0 <__ieee754_atan2+0x188>)
 8006d94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d98:	e78d      	b.n	8006cb6 <__ieee754_atan2+0x7e>
 8006d9a:	bf00      	nop
 8006d9c:	f3af 8000 	nop.w
 8006da0:	54442d18 	.word	0x54442d18
 8006da4:	c00921fb 	.word	0xc00921fb
 8006da8:	54442d18 	.word	0x54442d18
 8006dac:	bff921fb 	.word	0xbff921fb
 8006db0:	33145c07 	.word	0x33145c07
 8006db4:	3ca1a626 	.word	0x3ca1a626
 8006db8:	54442d18 	.word	0x54442d18
 8006dbc:	400921fb 	.word	0x400921fb
 8006dc0:	54442d18 	.word	0x54442d18
 8006dc4:	3ff921fb 	.word	0x3ff921fb
 8006dc8:	54442d18 	.word	0x54442d18
 8006dcc:	3fe921fb 	.word	0x3fe921fb
 8006dd0:	7ff00000 	.word	0x7ff00000
 8006dd4:	080076b8 	.word	0x080076b8
 8006dd8:	080076d0 	.word	0x080076d0
 8006ddc:	00000000 	.word	0x00000000

08006de0 <atan>:
 8006de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	4bb6      	ldr	r3, [pc, #728]	; (80070c0 <atan+0x2e0>)
 8006de6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006dea:	429e      	cmp	r6, r3
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	468b      	mov	fp, r1
 8006df2:	dd17      	ble.n	8006e24 <atan+0x44>
 8006df4:	4bb3      	ldr	r3, [pc, #716]	; (80070c4 <atan+0x2e4>)
 8006df6:	429e      	cmp	r6, r3
 8006df8:	dc01      	bgt.n	8006dfe <atan+0x1e>
 8006dfa:	d109      	bne.n	8006e10 <atan+0x30>
 8006dfc:	b140      	cbz	r0, 8006e10 <atan+0x30>
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7f9 f9b1 	bl	800016c <__adddf3>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	e005      	b.n	8006e1c <atan+0x3c>
 8006e10:	f1bb 0f00 	cmp.w	fp, #0
 8006e14:	4cac      	ldr	r4, [pc, #688]	; (80070c8 <atan+0x2e8>)
 8006e16:	f300 8121 	bgt.w	800705c <atan+0x27c>
 8006e1a:	4dac      	ldr	r5, [pc, #688]	; (80070cc <atan+0x2ec>)
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	4baa      	ldr	r3, [pc, #680]	; (80070d0 <atan+0x2f0>)
 8006e26:	429e      	cmp	r6, r3
 8006e28:	dc11      	bgt.n	8006e4e <atan+0x6e>
 8006e2a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006e2e:	429e      	cmp	r6, r3
 8006e30:	dc0a      	bgt.n	8006e48 <atan+0x68>
 8006e32:	a38b      	add	r3, pc, #556	; (adr r3, 8007060 <atan+0x280>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 f998 	bl	800016c <__adddf3>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4ba5      	ldr	r3, [pc, #660]	; (80070d4 <atan+0x2f4>)
 8006e40:	f7f9 fdda 	bl	80009f8 <__aeabi_dcmpgt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1e9      	bne.n	8006e1c <atan+0x3c>
 8006e48:	f04f 3aff 	mov.w	sl, #4294967295
 8006e4c:	e027      	b.n	8006e9e <atan+0xbe>
 8006e4e:	f000 f951 	bl	80070f4 <fabs>
 8006e52:	4ba1      	ldr	r3, [pc, #644]	; (80070d8 <atan+0x2f8>)
 8006e54:	4604      	mov	r4, r0
 8006e56:	429e      	cmp	r6, r3
 8006e58:	460d      	mov	r5, r1
 8006e5a:	f300 80b8 	bgt.w	8006fce <atan+0x1ee>
 8006e5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006e62:	429e      	cmp	r6, r3
 8006e64:	f300 809c 	bgt.w	8006fa0 <atan+0x1c0>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	f7f9 f97e 	bl	800016c <__adddf3>
 8006e70:	2200      	movs	r2, #0
 8006e72:	4b98      	ldr	r3, [pc, #608]	; (80070d4 <atan+0x2f4>)
 8006e74:	f7f9 f978 	bl	8000168 <__aeabi_dsub>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 f971 	bl	800016c <__adddf3>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	f7f9 fc4b 	bl	800072c <__aeabi_ddiv>
 8006e96:	f04f 0a00 	mov.w	sl, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 fb17 	bl	80004d8 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	f7f9 fb11 	bl	80004d8 <__aeabi_dmul>
 8006eb6:	a36c      	add	r3, pc, #432	; (adr r3, 8007068 <atan+0x288>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	f7f9 fb0a 	bl	80004d8 <__aeabi_dmul>
 8006ec4:	a36a      	add	r3, pc, #424	; (adr r3, 8007070 <atan+0x290>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f7f9 f94f 	bl	800016c <__adddf3>
 8006ece:	4632      	mov	r2, r6
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	f7f9 fb01 	bl	80004d8 <__aeabi_dmul>
 8006ed6:	a368      	add	r3, pc, #416	; (adr r3, 8007078 <atan+0x298>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	f7f9 faf8 	bl	80004d8 <__aeabi_dmul>
 8006ee8:	a365      	add	r3, pc, #404	; (adr r3, 8007080 <atan+0x2a0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 f93d 	bl	800016c <__adddf3>
 8006ef2:	4632      	mov	r2, r6
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	f7f9 faef 	bl	80004d8 <__aeabi_dmul>
 8006efa:	a363      	add	r3, pc, #396	; (adr r3, 8007088 <atan+0x2a8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 f934 	bl	800016c <__adddf3>
 8006f04:	4632      	mov	r2, r6
 8006f06:	463b      	mov	r3, r7
 8006f08:	f7f9 fae6 	bl	80004d8 <__aeabi_dmul>
 8006f0c:	a360      	add	r3, pc, #384	; (adr r3, 8007090 <atan+0x2b0>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 f92b 	bl	800016c <__adddf3>
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	f7f9 fadd 	bl	80004d8 <__aeabi_dmul>
 8006f1e:	a35e      	add	r3, pc, #376	; (adr r3, 8007098 <atan+0x2b8>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fad4 	bl	80004d8 <__aeabi_dmul>
 8006f30:	a35b      	add	r3, pc, #364	; (adr r3, 80070a0 <atan+0x2c0>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f917 	bl	8000168 <__aeabi_dsub>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	f7f9 facb 	bl	80004d8 <__aeabi_dmul>
 8006f42:	a359      	add	r3, pc, #356	; (adr r3, 80070a8 <atan+0x2c8>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f7f9 f90e 	bl	8000168 <__aeabi_dsub>
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	463b      	mov	r3, r7
 8006f50:	f7f9 fac2 	bl	80004d8 <__aeabi_dmul>
 8006f54:	a356      	add	r3, pc, #344	; (adr r3, 80070b0 <atan+0x2d0>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 f905 	bl	8000168 <__aeabi_dsub>
 8006f5e:	4632      	mov	r2, r6
 8006f60:	463b      	mov	r3, r7
 8006f62:	f7f9 fab9 	bl	80004d8 <__aeabi_dmul>
 8006f66:	a354      	add	r3, pc, #336	; (adr r3, 80070b8 <atan+0x2d8>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 f8fc 	bl	8000168 <__aeabi_dsub>
 8006f70:	4632      	mov	r2, r6
 8006f72:	463b      	mov	r3, r7
 8006f74:	f7f9 fab0 	bl	80004d8 <__aeabi_dmul>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	4649      	mov	r1, r9
 8006f80:	f7f9 f8f4 	bl	800016c <__adddf3>
 8006f84:	4622      	mov	r2, r4
 8006f86:	462b      	mov	r3, r5
 8006f88:	f7f9 faa6 	bl	80004d8 <__aeabi_dmul>
 8006f8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	d144      	bne.n	8007020 <atan+0x240>
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 f8e5 	bl	8000168 <__aeabi_dsub>
 8006f9e:	e734      	b.n	8006e0a <atan+0x2a>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4b4c      	ldr	r3, [pc, #304]	; (80070d4 <atan+0x2f4>)
 8006fa4:	f7f9 f8e0 	bl	8000168 <__aeabi_dsub>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4b48      	ldr	r3, [pc, #288]	; (80070d4 <atan+0x2f4>)
 8006fb4:	f7f9 f8da 	bl	800016c <__adddf3>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	f7f9 fbb4 	bl	800072c <__aeabi_ddiv>
 8006fc4:	f04f 0a01 	mov.w	sl, #1
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	e767      	b.n	8006e9e <atan+0xbe>
 8006fce:	4b43      	ldr	r3, [pc, #268]	; (80070dc <atan+0x2fc>)
 8006fd0:	429e      	cmp	r6, r3
 8006fd2:	da1a      	bge.n	800700a <atan+0x22a>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4b42      	ldr	r3, [pc, #264]	; (80070e0 <atan+0x300>)
 8006fd8:	f7f9 f8c6 	bl	8000168 <__aeabi_dsub>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <atan+0x300>)
 8006fe8:	f7f9 fa76 	bl	80004d8 <__aeabi_dmul>
 8006fec:	2200      	movs	r2, #0
 8006fee:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <atan+0x2f4>)
 8006ff0:	f7f9 f8bc 	bl	800016c <__adddf3>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 fb96 	bl	800072c <__aeabi_ddiv>
 8007000:	f04f 0a02 	mov.w	sl, #2
 8007004:	4604      	mov	r4, r0
 8007006:	460d      	mov	r5, r1
 8007008:	e749      	b.n	8006e9e <atan+0xbe>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	2000      	movs	r0, #0
 8007010:	4934      	ldr	r1, [pc, #208]	; (80070e4 <atan+0x304>)
 8007012:	f7f9 fb8b 	bl	800072c <__aeabi_ddiv>
 8007016:	f04f 0a03 	mov.w	sl, #3
 800701a:	4604      	mov	r4, r0
 800701c:	460d      	mov	r5, r1
 800701e:	e73e      	b.n	8006e9e <atan+0xbe>
 8007020:	4b31      	ldr	r3, [pc, #196]	; (80070e8 <atan+0x308>)
 8007022:	4e32      	ldr	r6, [pc, #200]	; (80070ec <atan+0x30c>)
 8007024:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007028:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800702c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007030:	f7f9 f89a 	bl	8000168 <__aeabi_dsub>
 8007034:	4622      	mov	r2, r4
 8007036:	462b      	mov	r3, r5
 8007038:	f7f9 f896 	bl	8000168 <__aeabi_dsub>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007044:	f7f9 f890 	bl	8000168 <__aeabi_dsub>
 8007048:	f1bb 0f00 	cmp.w	fp, #0
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
 8007050:	f6bf aee4 	bge.w	8006e1c <atan+0x3c>
 8007054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007058:	461d      	mov	r5, r3
 800705a:	e6df      	b.n	8006e1c <atan+0x3c>
 800705c:	4d24      	ldr	r5, [pc, #144]	; (80070f0 <atan+0x310>)
 800705e:	e6dd      	b.n	8006e1c <atan+0x3c>
 8007060:	8800759c 	.word	0x8800759c
 8007064:	7e37e43c 	.word	0x7e37e43c
 8007068:	e322da11 	.word	0xe322da11
 800706c:	3f90ad3a 	.word	0x3f90ad3a
 8007070:	24760deb 	.word	0x24760deb
 8007074:	3fa97b4b 	.word	0x3fa97b4b
 8007078:	a0d03d51 	.word	0xa0d03d51
 800707c:	3fb10d66 	.word	0x3fb10d66
 8007080:	c54c206e 	.word	0xc54c206e
 8007084:	3fb745cd 	.word	0x3fb745cd
 8007088:	920083ff 	.word	0x920083ff
 800708c:	3fc24924 	.word	0x3fc24924
 8007090:	5555550d 	.word	0x5555550d
 8007094:	3fd55555 	.word	0x3fd55555
 8007098:	2c6a6c2f 	.word	0x2c6a6c2f
 800709c:	bfa2b444 	.word	0xbfa2b444
 80070a0:	52defd9a 	.word	0x52defd9a
 80070a4:	3fadde2d 	.word	0x3fadde2d
 80070a8:	af749a6d 	.word	0xaf749a6d
 80070ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80070b0:	fe231671 	.word	0xfe231671
 80070b4:	3fbc71c6 	.word	0x3fbc71c6
 80070b8:	9998ebc4 	.word	0x9998ebc4
 80070bc:	3fc99999 	.word	0x3fc99999
 80070c0:	440fffff 	.word	0x440fffff
 80070c4:	7ff00000 	.word	0x7ff00000
 80070c8:	54442d18 	.word	0x54442d18
 80070cc:	bff921fb 	.word	0xbff921fb
 80070d0:	3fdbffff 	.word	0x3fdbffff
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	3ff2ffff 	.word	0x3ff2ffff
 80070dc:	40038000 	.word	0x40038000
 80070e0:	3ff80000 	.word	0x3ff80000
 80070e4:	bff00000 	.word	0xbff00000
 80070e8:	08007708 	.word	0x08007708
 80070ec:	080076e8 	.word	0x080076e8
 80070f0:	3ff921fb 	.word	0x3ff921fb

080070f4 <fabs>:
 80070f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80070f8:	4770      	bx	lr
	...

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
